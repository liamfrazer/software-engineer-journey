{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"Books/The%20Creative%20Act%20-%20A%20Way%20of%20Being/The%20Seed/","title":"The Seed","text":"<ul> <li>This is one of the fun parts of a project, because nothing is at stake.</li> <li>You get to play with forms and see what takes shape.</li> <li>There are no rules.</li> <li> <p>Cultivation will look different for every artist and every seed.</p> </li> <li> <p>Shakespeare's plays for example, have been adapted into movies centred around everything from New York's street gangs to samurais, from Santa Monica to outer space.</p> </li> <li> <p>We generate possibilities instead of eliminating them.</p> </li> <li> <p>Consider how many innovations that might have changed the world have been lost because someone was so focused on their goal, they missed the revelation right in front of them.</p> </li> <li> <p>When something interesting starts coming together, it arouses delight.</p> </li> <li>It's an energising feeling of wanting more.</li> <li>A feeling of moving forward.</li> <li> <p>Follow that energy.</p> </li> <li> <p>Failure is the information you need to get where you're going.</p> </li> </ul>","tags":["seed","creative"]},{"location":"Books/The%20Creative%20Act%20-%20A%20Way%20of%20Being/Try%20Everything/","title":"Try Everything","text":"<ul> <li>The only way to know if any idea works is to test it.</li> <li> <p>And if you're looking for the best idea, test everything.</p> </li> <li> <p>When working through ways of solving a puzzle, there are no mistakes.</p> </li> <li>Each unsuccessful solution gets you close to one that works.</li> </ul>","tags":["creative","idea"]},{"location":"Books/The%20Pragmatic%20Programmer/Software%20Entropy/","title":"Software Entropy","text":"<ul> <li>Don't live with broken windows</li> <li>Help strengthen your team by surveying your project neighbourhood.</li> <li> <p>Choose two or three broken windows and discuss with your colleagues what the problems are and what could be done to fix them.</p> </li> <li> <p>Can you tell when a window first gets broken?</p> </li> <li>What is your reaction?</li> <li>If it was the result of someone else's decision, or a management edict, what can you do about it?</li> </ul>","tags":["pragmatic"]},{"location":"Books/The%20Pragmatic%20Programmer/The%20Cat%20ate%20my%20Source%20Code/","title":"The Cat ate my Source Code","text":"<ul> <li>Does your excuse sound reasonable? or Stupid?</li> <li>How is it going to sound to your boss?</li> <li>What is the other person likely to say?</li> <li>How will you respond?</li> <li> <p>Is there anything else you can try?</p> </li> <li> <p>Instead of excuses, provide options</p> </li> <li>Explain what can be done to salvage the situation</li> <li>Do you need to spend time prototyping to determine the best way to proceed?</li> <li> <p>Do you need to introduce better testing, or automation to prevent it from happening again?</p> </li> <li> <p>Try to flush out the lame excuses before voicing them aloud.</p> </li> <li> <p>If you find yourself saying \"I don't know\", be sure to follow it up with \"but I'll find out\"</p> </li> <li>It's a great way to admin what you don't know, but then take responsibility like a pro.</li> </ul>","tags":["pragmatic"]},{"location":"Books/The%20Pragmatic%20Programmer/Tips/","title":"Tips","text":"<ul> <li>Provide options, don't make lame excuses</li> <li>Don't live with broken windows</li> <li>Be a catalyst for change</li> <li>It's easier to ask for forgiveness than it is to get permission</li> <li>Remembering the big picture</li> <li>Make quality a requirements issue</li> <li>Invest regularly in your Knowledge Portfolio</li> <li></li> </ul>","tags":["pragmatic","tips"]},{"location":"Books/The%20Pragmatic%20Programmer/What%20Makes%20a%20Pragmatic%20Programmer/","title":"What Makes a Pragmatic Programmer","text":"","tags":["pragmatic"]},{"location":"Books/The%20Pragmatic%20Programmer/What%20Makes%20a%20Pragmatic%20Programmer/#early-adapterfast-adapter","title":"Early adapter/fast adapter","text":"<ul> <li>You have an instinct for technologies and techniques and you love trying things out.</li> <li>When given something new, you can grasp it quickly and integrate it with the rest of your knowledge.</li> <li>Your confidence is born of experience.</li> </ul>","tags":["pragmatic"]},{"location":"Books/The%20Pragmatic%20Programmer/What%20Makes%20a%20Pragmatic%20Programmer/#inquisitive","title":"Inquisitive","text":"<ul> <li>You tend to ask ask questions.</li> <li>You are a pack rat for little facts, each of which may affect some decsions years later from now</li> </ul>","tags":["pragmatic"]},{"location":"Books/The%20Pragmatic%20Programmer/What%20Makes%20a%20Pragmatic%20Programmer/#critical-thinker","title":"Critical Thinker","text":"<ul> <li>You rarely take things as given without first getting the facts.</li> <li>When colleagues say \"because that's the way it's done\", or a vendor promises the solution to all your problems, you smell a challenger.</li> </ul>","tags":["pragmatic"]},{"location":"Books/The%20Pragmatic%20Programmer/What%20Makes%20a%20Pragmatic%20Programmer/#realistic","title":"Realistic","text":"<ul> <li>You try to understand the underlying nature of each problem you face.</li> <li>This realism gives you a good feel for how difficult things are, and how long things will take.</li> <li>Deeply understanding that process should be a difficult or will take a while to complete gives you the stamina to keep at it.</li> </ul>","tags":["pragmatic"]},{"location":"Books/The%20Pragmatic%20Programmer/What%20Makes%20a%20Pragmatic%20Programmer/#jack-of-all-trades","title":"Jack of all Trades","text":"<ul> <li>You try hard to be familiar with a broad range of technologies and environments, and you work to keep abreast of new developments.</li> <li>Although your current job may require you to be a specialist, you will always be able to move on to new areas and new challenges</li> </ul>","tags":["pragmatic"]},{"location":"Books/The%20Pragmatic%20Programmer/What%20Makes%20a%20Pragmatic%20Programmer/#care-about-your-craft","title":"Care about your Craft","text":"","tags":["pragmatic"]},{"location":"Books/The%20Pragmatic%20Programmer/What%20Makes%20a%20Pragmatic%20Programmer/#think-about-your-work","title":"Think about your Work","text":"","tags":["pragmatic"]},{"location":"Books/The%20Pragmatic%20Programmer/Your%20Knowledge%20Portfolio/","title":"Your Knowledge Portfolio","text":"","tags":["pragmatic"]},{"location":"Books/Ultralearning/Ask%20Yourself%20These%20Questions/","title":"Ask Yourself These Questions","text":"","tags":["ultralearning"]},{"location":"Books/Ultralearning/Ask%20Yourself%20These%20Questions/#1-metalearning","title":"1. Metalearning","text":"<ol> <li>Have I done research into the typical ways of learning the skill?</li> <li>Have I checked what resources successful learners use?</li> <li>Have I spent 10% of my total time preparing the project?</li> </ol>","tags":["ultralearning"]},{"location":"Books/Ultralearning/Ask%20Yourself%20These%20Questions/#2-focus","title":"2. Focus","text":"<p>222 250</p>","tags":["ultralearning"]},{"location":"Books/Ultralearning/Direct%20then%20Drill%20Approach/","title":"Direct then Drill Approach","text":"<ul> <li>The first step is try to practice the skill directly.</li> <li>This means figuring out where and how the skill will be used, then trying to match the situation as close as is feasible.</li> <li>Learn programming by writing software.</li> <li>Improve your writing skills by penning essays.</li> <li> <p>This initial connection and subsequent feedback loop ensure that the transfer problem wont occur.</p> </li> <li> <p>The next step is to analyse the direct skill and try to isolate components that are either rate-determing steps in your performance or subskills you find difficult to improve because there are too many other things going on for you to focus on them.</p> </li> <li> <p>The final step is to go back to direct practice and integrate what you've learnt.</p> </li> </ul>","tags":["ultralearning"]},{"location":"Books/Ultralearning/Drills%20and%20Cognitive%20Load/","title":"Drills and Cognitive Load","text":"<ul> <li>Drills resolve this problem by simplifying a skill enough that you can focus your cognitive resources on a single aspect</li> <li>A drill takes the direct practice and cuts it apart, so that you can practice only an isolated component.</li> </ul>","tags":["ultralearning"]},{"location":"Books/Ultralearning/Experimentation%20is%20Key%20to%20Mastery/","title":"Experimentation is Key to Mastery","text":"<ul> <li>Learning in the early phases of a skill is accumulation.</li> <li>You acquire new facts, knowledge and skills to handle problems you didn't know how to solve before. </li> <li>Getting better increasingly becomes an act of unlearning.</li> <li> <p>Not only must you learn to solve problems you couldn't before, you must unlearn stale and ineffective approaches for solving these problems.</p> </li> <li> <p>The difference between a novice programmer and a master isn't usually that the novice cannot solve certain problems. Rather, it's the master knows the best way to solve the problem, which will be the mose efficient and clean and cause the fewest headaches later on.</p> </li> <li>Experimentation becomes synonymous with learning as you force yourself to go outside your comfort zone and try new things.</li> </ul>","tags":["ultralearning"]},{"location":"Books/Ultralearning/How%20to%20Build%20Your%20Intuition/","title":"How to Build Your Intuition","text":"<ul> <li>Instead of following an equation, he would try to imagine the situation it described.</li> <li>As more information was given, he'd work it through on his example</li> <li>Whenever there was a mistake, he could see it.</li> <li> <p>Constructed something which fit all the condition, as soon as something doesn't fit, then it's false.</p> </li> <li> <p>This approach is more succesfull in solving problems, because it gets to the core of how the problem works. The surface features of the problem don't always relate to the correct procedures needed to solve it.</p> </li> <li>Only by developing enough experience with problem solving can you build up a deep mental model of how other problems work.</li> </ul>","tags":["ultralearning"]},{"location":"Books/Ultralearning/How%20to%20Build%20Your%20Intuition/#rule-1-dont-give-up-on-a-hard-problem","title":"Rule 1: Don't give up on a hard problem","text":"<ul> <li>when you feel like giving up and that you can't possibly figure out the solution to a difficult problem, try setting a timer for another ten minutes to push yourself a bit further.</li> <li>Even when the difficulty is caused by the information not being there, this can prime you to remember information better later.</li> </ul>","tags":["ultralearning"]},{"location":"Books/Ultralearning/How%20to%20Build%20Your%20Intuition/#rule-2-prove-things-to-understand-them","title":"Rule 2: Prove things to understand them","text":"<ul> <li>Feynman didn't master things by following along with other people's results. Instead, it was the process of mentally trying to re-create those results that became so good.</li> <li>His drive to understand things by virtue of working through the results himself also assisted in building his capacity for deep intuition.</li> </ul>","tags":["ultralearning"]},{"location":"Books/Ultralearning/How%20to%20Build%20Your%20Intuition/#rule-3-always-start-with-a-concrete-example","title":"Rule 3: Always start with a Concrete Example","text":"<ul> <li>This process of following along with one's own example forces a deeper level of processing the material as it is being presented.</li> <li>Using feedback rich processes to test whether or not he knew something was a trademark to Feynman</li> </ul>","tags":["ultralearning"]},{"location":"Books/Ultralearning/How%20to%20Build%20Your%20Intuition/#rule-4-dont-fool-yourself","title":"Rule 4: Don't Fool Yourself","text":"<ul> <li>Explaining things clearly and asking dumb questions can keep you from fooling yourself into thinking you know something when you don't.</li> </ul>","tags":["ultralearning"]},{"location":"Books/Ultralearning/How%20to%20Learn%20Directly/","title":"How to Learn Directly","text":"","tags":["ultralearning","direct"]},{"location":"Books/Ultralearning/How%20to%20Learn%20Directly/#tactic-1-project-based-learning","title":"Tactic 1: Project based learning","text":"<ul> <li>If you organise your learning around producing something, you're guaranteed to at least learn how to produce that thing.</li> </ul>","tags":["ultralearning","direct"]},{"location":"Books/Ultralearning/How%20to%20Practice%20retrieval/","title":"How to Practice retrieval","text":"<ul> <li>Retrieval not only enhances on what you've learnt previously, but can help prepare you to learn better.</li> <li>Retrieval works to enhance future learning, even when there is nothing to retrieve yet.</li> <li>Trying to retrieve an answer that doesn't yet exist in your mind, is like laying down a road to a building that hasn't been built yet.</li> </ul>","tags":["ultralearning"]},{"location":"Books/Ultralearning/How%20to%20Practice%20retrieval/#tactic-1-flash-cards","title":"Tactic 1: Flash Cards","text":"<ul> <li>Flashcards work really well when there is a pairing between a specific queue and a particular response.</li> <li>Programmers can memorise syntax via flashcards, but concepts that need to be applied in real programs don't often fit the cue-response framework that flash cards demand.</li> </ul>","tags":["ultralearning"]},{"location":"Books/Ultralearning/How%20to%20Practice%20retrieval/#tactic-2-free-recall","title":"Tactic 2: Free Recall","text":"<ul> <li>A simple tactic for applying retrieval is, after reading a section from a book or sitting in a lecture, to try and write down everything you can remember on a blank piece of paper.</li> <li>By forcing yourself to recall the main points and arguments, you'll be able to remember them better later.</li> </ul>","tags":["ultralearning"]},{"location":"Books/Ultralearning/How%20to%20Practice%20retrieval/#tactic-4-closed-book-learning","title":"Tactic 4: Closed Book Learning","text":"<ul> <li>For a programmer, it's not enough to know what an algorithm means, but to be able to write it in code.</li> <li>As you go through passive material, you can create challenges for yourself to go through later.</li> </ul>","tags":["ultralearning"]},{"location":"Books/Ultralearning/Learn%20Straight%20From%20The%20Source/","title":"Learn Straight From The Source","text":"<ul> <li>Whenever you learn something new, it's a good habit to ask yourself where and how the knowledge will manifest it-self.</li> <li>If you can answer that, you can ask yourself whether you're doing anything to tie what you're learning to that context</li> </ul>","tags":["ultralearning"]},{"location":"Books/Ultralearning/Metalearning/","title":"Metalearning","text":""},{"location":"Books/Ultralearning/Metalearning/#javascript","title":"JavaScript:","text":""},{"location":"Books/Ultralearning/Metalearning/#concepts","title":"Concepts:","text":"<ol> <li>Variables and Data Types: Understand different data types (strings, numbers, booleans, objects, etc.) and how to declare variables.</li> <li>Functions: Learn how to create functions, pass parameters, and return values.</li> <li>Control Structures: Master control flow statements like <code>if...else</code>, <code>for</code> loops, <code>while</code> loops, and <code>switch</code> statements.</li> <li>Objects and Arrays: Explore how to work with objects and arrays, including manipulating and accessing data within them.</li> <li>Scope and Closures: Understand the concept of scope, closures, and how they affect variable access.</li> <li>DOM Manipulation: Learn how to interact with the Document Object Model (DOM) to change HTML/CSS content dynamically.</li> </ol>"},{"location":"Books/Ultralearning/Metalearning/#facts","title":"Facts:","text":"<ol> <li>Syntax: Familiarize yourself with JavaScript syntax, including semicolons, brackets, and other language-specific elements.</li> <li>Built-in Functions: Know important built-in functions/methods and their usage (e.g., <code>map()</code>, <code>filter()</code>, <code>reduce()</code>).</li> <li>Event Handling: Understand how to handle events like clicks, mouse movements, and keyboard events.</li> <li>Error Handling: Learn about error types and how to handle exceptions using <code>try...catch</code>.</li> </ol>"},{"location":"Books/Ultralearning/Metalearning/#procedures","title":"Procedures:","text":"<ol> <li>Practice Coding: Solve problems and challenges using JavaScript to apply and solidify your knowledge.</li> <li>Build Projects: Work on small projects to reinforce your understanding and improve problem-solving skills.</li> <li>Read Documentation: Refer to official documentation (MDN Web Docs) to understand language features and functionalities.</li> <li>Online Courses and Tutorials: Utilize online courses and tutorials to gain structured knowledge.</li> </ol>"},{"location":"Books/Ultralearning/Metalearning/#react","title":"React:","text":""},{"location":"Books/Ultralearning/Metalearning/#concepts_1","title":"Concepts:","text":"<ol> <li>Components: Understand React components and their lifecycle methods.</li> <li>State and Props: Learn about stateful and stateless components, managing state, and passing data through props.</li> <li>JSX: Get familiar with JSX syntax used in React for writing component structures.</li> <li>Hooks: Learn about React Hooks (useState, useEffect, useContext, etc.) for managing state and side effects.</li> <li>Routing: Explore React Router for handling navigation within your application.</li> <li>Redux or Context API: Understand state management using Redux or Context API for global state.</li> </ol>"},{"location":"Books/Ultralearning/Metalearning/#facts_1","title":"Facts:","text":"<ol> <li>Component Structure: Know how to structure components and organize them in a React application.</li> <li>Virtual DOM: Understand the concept of the Virtual DOM and how React optimizes rendering.</li> <li>Events in React: Learn how to handle events within React components.</li> </ol>"},{"location":"Books/Ultralearning/Metalearning/#procedures_1","title":"Procedures:","text":"<ol> <li>Build Projects: Create small to medium-sized projects using React to practice and reinforce concepts.</li> <li>Read Official Documentation: Refer to React's official documentation to understand its features and best practices.</li> <li>Online Courses and Tutorials: Enroll in reputable online courses or tutorials to grasp React concepts systematically.</li> <li>Contribute and Collaborate: Contribute to open-source projects or collaborate with others to enhance your React skills.</li> </ol> <p>Both metalearning and ultralearning emphasize active learning, deliberate practice, and continuous improvement. Regularly applying what you've learned through practice and projects will solidify your understanding of JavaScript and React.</p>"},{"location":"Books/Ultralearning/Tactics%20for%20Designing%20Drills/","title":"Tactics for Designing Drills","text":"","tags":["ultralearning"]},{"location":"Books/Ultralearning/Tactics%20for%20Designing%20Drills/#tactic-1-drill-slicing","title":"Tactic 1: Drill Slicing","text":"<ul> <li>The easiest way to create a drill is to isolate a slice in time of a longer sequence of actions.</li> <li>Looks for parts of a skill you're learning to decompose into specific moments of time that have heightened difficulty or importance.</li> </ul>","tags":["ultralearning"]},{"location":"Books/Ultralearning/Tactics%20for%20Designing%20Drills/#tactic-5-prerequisite-chaining","title":"Tactic 5: Prerequisite Chaining","text":"<ul> <li>Start with a skill that you don't have all the prerequisites for</li> <li> <p>Then when you perform poorly, go back a step, learn one of the foundational topics and then repeat the exercise.</p> </li> <li> <p>Instead of being forced to do this for an unknown process, it is now up t you to find a way to enhance the learning process by accelerating learning on the specific things that you found most difficult</p> </li> <li></li> </ul>","tags":["ultralearning"]},{"location":"Books/Ultralearning/The%20Feynman%20Technique/","title":"The Feynman Technique","text":"<ul> <li>The purpose of using this technique is to help develop intuition about the ideas you are learning.</li> <li>It can be used when you don't understand an idea at all, or simply when you understand something a little, but really want to turn it into deep intuition.</li> <li> <p>Names do not constitute knowledge</p> </li> <li> <p>Write down the subject you want to study.</p> </li> <li>Write down your explanation of the subject, as if writing it for a child</li> <li>Identify the gaps you have in the topic<ol> <li>Do you ramble?</li> <li>Can you not use simple language?</li> <li>Strengthen your weak areas</li> </ol> </li> <li>Repeat Step 1-3 until you've mastered the subject</li> </ul>","tags":["ultralearning","feynman"]},{"location":"Books/Ultralearning/The%20Feynman%20Technique/#1-write-down-the-concept-or-problem-you-want-to-understand-at-the-top-of-a-piece-of-paper","title":"1.  Write down the concept or problem you want to understand at the top of a piece of paper.","text":"","tags":["ultralearning","feynman"]},{"location":"Books/Ultralearning/The%20Feynman%20Technique/#2-in-the-space-below-explain-the-idea-as-if-you-had-to-teach-it-to-someone-else","title":"2. In the space below, explain the idea as if you had to teach it to someone else.","text":"","tags":["ultralearning","feynman"]},{"location":"Books/Ultralearning/The%20Feynman%20Technique/#a-if-its-a-concept-ask-yourself-how-you-would-convey-the-idea-to-someone-who-has-never-heard-of-it-before","title":"A) If it's a concept, ask yourself how you would convey the idea to someone who has never heard of it before.","text":"","tags":["ultralearning","feynman"]},{"location":"Books/Ultralearning/The%20Feynman%20Technique/#b-if-its-a-problem-explain-how-to-solve-it-and-crucially-why-the-solution-procedure-makes-sense-to-you","title":"B) If it's a problem, explain how to solve it and -crucially- why the solution procedure makes sense to you.","text":"","tags":["ultralearning","feynman"]},{"location":"Books/Ultralearning/The%20Feynman%20Technique/#3-when-you-get-stuck-meaning-your-understanding-fails-to-provide-a-clear-answer-go-back-to-your-book-notes-teacher-or-reference-material-to-find-the-answer","title":"3. When you get stuck, meaning your understanding fails to provide a clear answer, go back to your book, notes, teacher or reference material to find the answer.","text":"<ul> <li>Using this technique will quickly reveal how much you really understand of your subject.</li> <li>Any gaps in your understanding will become clear as you struggle to explain key parts of the idea.</li> </ul>","tags":["ultralearning","feynman"]},{"location":"Books/Ultralearning/The%20Feynman%20Technique/#application-1-for-things-you-dont-understand-at-all","title":"Application 1:  For things you don't understand at all","text":"<ul> <li>Easy method is with book in hand, go back and forth between your explanation and the one in the book.</li> </ul>","tags":["ultralearning","feynman"]},{"location":"Books/Ultralearning/The%20Feynman%20Technique/#application-2-for-problems-you-cant-seem-to-solve","title":"Application 2: For Problems You Can't Seem to Solve","text":"<ul> <li>It's very important to go through the problem step by step rather than simply summarising it.</li> <li>Summarising may skip out the core difficulties of the problem.</li> <li>Going deeper may take time, but it can help you get a strong grasp over a new method in one go.</li> </ul>","tags":["ultralearning","feynman"]},{"location":"Books/Ultralearning/The%20Feynman%20Technique/#application-3-for-expanding-your-intuition","title":"Application 3: For Expanding Your Intuition","text":"","tags":["ultralearning","feynman"]},{"location":"Books/Ultralearning/The%20Mindset%20of%20Experimentation/","title":"The Mindset of Experimentation","text":"<ul> <li>In a growth mindset, learners see their own capacity for learning as something that can be actively improved upon.</li> <li>Those who think they can improve and grow, do.</li> </ul>","tags":["ultralearning"]},{"location":"Books/Ultralearning/The%20Mindset%20of%20Experimentation/#tactic-one-copy-then-create","title":"Tactic One: Copy, then Create","text":"<ul> <li>Copying simplifies the problem of experimentation somewhat as it gives you a starting point for making decisions.</li> <li>In attempting to emulate or copy an example you appreciate, you must deconstruct it to understand why it works.</li> </ul>","tags":["ultralearning"]},{"location":"Books/Ultralearning/What%20should%20be%20Retrieved/","title":"What should be Retrieved","text":"<ul> <li>If you need to recall something later, you're best off practising retrieving it.</li> <li>Put more effort into practicing retrieving the underlaying concepts than doing technical calculations.</li> <li> <p>Things that are rarely used, or that are easier to look up than memorise won't be retrieved. These tend to be the things that don't matter so much.</p> </li> <li> <p>A programmer may realise a need to use a certain function to solve a problem, but forgets how to write it.</p> </li> <li>Looking up the syntax may slow down the process, but the problem will still be solved anyway.</li> <li> <p>If you don't have enough knowledge stored to recognise when you can use a function to solve your problem, no looking up can help you.</p> </li> <li> <p>Often the thing separating mediocre programmers from great ones isn't the range of problems they can solve, but that the latter often knows dozens of ways to solve problems and can select the best one for each situation.</p> </li> </ul>","tags":["ultralearning"]},{"location":"Books/Ultralearning/Why%20is%20it%20so%20hard%20to%20remember%20things/","title":"Why is it so hard to remember things","text":"<ul> <li>Programmers must remember the syntax for commands in their code</li> <li>Being able to remember how something works, or how to perform a particular technique is useless if you cannot recall it</li> <li>The forgetting curve, we tend to forget things incredibly quickly after learning them</li> <li>If you're learning programming, you may learn what a <code>for loop</code> is and remember it in terms of doing something repeatedly. Later you may learn about <code>while loops</code>, <code>recursion</code>, <code>repeat-until loops</code> and <code>go-to</code> statements. Each of these are related to doing something repeatedly, but may impact your ability to remember how to use a <code>for loop</code></li> <li>You need to pick a mnemonic system, which will both accomplish your goals and be simple enough to stick to.</li> <li>Some subjects allow for some degree of forgetting as long as the skills are practiced continuously and have the ability to relearn.</li> <li>All systems work according to one of the four mechanisms: spacing, proceduralization, over-learning or mnemonics</li> </ul>","tags":["ultralearning"]},{"location":"Books/Ultralearning/Why%20is%20it%20so%20hard%20to%20remember%20things/#mechanism-1-spacing-repeat-to-remember","title":"Mechanism 1 - Spacing: Repeat to Remember","text":"<ul> <li>Don't cram. Spreading learning sessions over more intervals over longer periods of time tend to perform much better in the long run.</li> <li>Many ultralearners apply what are known as SRS tools to retain the most knowledge with the least effort.</li> <li>Semi-regular do fresher projects. Scheduling this kind of maintenance in advance can be helpful, teaches that learning isn't just done once and continues for life.</li> </ul>","tags":["ultralearning"]},{"location":"Books/Ultralearning/Why%20is%20it%20so%20hard%20to%20remember%20things/#mechanism-3-overlearning-practice-beyond-perfect","title":"Mechanism 3- Overlearning: Practice Beyond Perfect","text":"<ul> <li>Can recall programming from the MI challenges, because they happened to be patterns that were repeated far more than was necessary to perform them adequately at the time &gt; Because they were components of a much larger problem</li> <li>This suggests that moving up a level to a more advanced skill enabled the earlier skill to be overlearned, thus preventing some forgetting.</li> </ul>","tags":["ultralearning"]},{"location":"Books/Ultralearning/Your%20First%20UltraLearning%20Project/","title":"Your First UltraLearning Project","text":"","tags":["ultralearning"]},{"location":"Books/Ultralearning/Your%20First%20UltraLearning%20Project/#step-1-do-your-research","title":"Step 1: Do your Research","text":"<ul> <li> <ol> <li>What topic you're going to learn and it's approximate scope</li> </ol> </li> <li> <p>Start with a narrow scope, which can expand as you proceed.</p> </li> <li> <ol> <li>The primary resource you're going to use.</li> </ol> </li> <li> <p>This is where you decide what your starting point will be.</p> </li> <li> <ol> <li>A benchmark for how others have successfully learnt this skill or subject.</li> </ol> </li> <li> <p>Identify the things other people who have learnt the skill have done to learn it.</p> </li> <li> <ol> <li>Direct Practice Activities</li> </ol> </li> <li> <ol> <li>Backup materials and drills</li> </ol> </li> </ul>","tags":["ultralearning"]},{"location":"Books/Ultralearning/Your%20First%20UltraLearning%20Project/#step-2-schedule-your-time","title":"Step 2. Schedule Your Time","text":"<ul> <li>Consistency breeds good habits, reducing the effort required to study.</li> <li>Shorter, spaced time chunks are better for memory than crammed chunks are.</li> <li>Take all this information and schedule it on your calendar.</li> <li>If you're unwilling to put time in your calendar, you're almost certainly unwilling to put time in to study.</li> </ul>","tags":["ultralearning"]},{"location":"Books/Ultralearning/Your%20First%20UltraLearning%20Project/#step-3-execute-your-plan","title":"Step 3. Execute Your Plan","text":"","tags":["ultralearning"]},{"location":"Code%20Concepts/Classes/","title":"Classes","text":"","tags":["classes","javascript"]},{"location":"Code%20Concepts/Classes/#javascript","title":"JavaScript","text":"<ul> <li>Classes are am ES6 feature that provide a more structured and cleaner way to work with object.</li> <li>Cleaner than traditional constructor functions</li> <li>Helpful for static keyword, encapsulation, inheritance</li> </ul> <pre><code>class Product {\n    constructor(name, price) {\n        this.name = name;\n        this.price = price;\n    }\n\n    displayProduct() {\n        console.log(`Product: ${this.name}`);\n        console.log(`Price: $${this.price.toFixed(2)}`);\n    }\n\n    calculateTotal(salesTax) {\n        return this.price + (this.price * salesTax);\n    }\n}\n\nconst salesTax = 0.05;\n\nconst product1 = new Product(\"Shirt\", 19.99);\nconst product2 = new Product(\"Pants\", 22.50);\nconst product3 = new Product(\"Boxers\", 24.99);\n\n\nproduct1.displayProduct();\nproduct2.displayProduct();\nproduct3.displayProduct();\n\nconst total = product1.calculateTotal(salesTax);\nconsole.log(`Total Price: (with ${salesTax * 100}% Tax): $${total.toFixed(2)}`);\n\n\n// Product: Shirt, Price: $19.99\n// Product: Pants, Price: $22.50\n// Product: Boxers, Price: $24.99\n\n// Total Price: (with 5% Tax): $20.99\n</code></pre>","tags":["classes","javascript"]},{"location":"Code%20Concepts/Promises/","title":"Promises","text":"","tags":["Promises","javascript"]},{"location":"Code%20Concepts/Promises/#javascript","title":"JavaScript","text":"<ul> <li>https://www.youtube.com/watch?v=lfmg-EJ8gm4&amp;t=38390s</li> <li>A <code>Promise</code> is an object that manages asynchronous operations.</li> <li>You wrap a <code>Promise</code> object around asynchronous code</li> <li>\"I promise to return a value\"</li> <li>PENDING &gt; RESOLVED or REJECTED</li> </ul> <pre><code>new Promise((resolved, reject) =&gt; {asyncronous code})\n</code></pre> <pre><code>// Do these chores in Order\n\n// 1. Walk the dog\n// 2. Clean the Kitchen\n// 3. Take out the trash\n\nfunction walkDog() {\n\n    return new Promise((resolve, reject) =&gt; {\n        setTimeout(() =&gt; {\n            const dogWalked = true;\n            if (dogWalked) {\n                resolve(\"You walked the dog.\");\n            } else {\n                reject(\"You didn't walk the dog.\")\n            }\n        }, 1500);\n    });\n}\n\nfunction cleanKitchen() {\n\n    return new Promise((resolve, reject) =&gt; {\n        setTimeout(() =&gt; {\n            const kitchenCleaned = false;\n            if (kitchenCleaned) {\n                resolve(\"You cleaned the kitchen.\");\n            } else {\n                reject(\"You didn't clean the kitchen.\")\n            }\n        }, 2500);\n    });\n}\n\nfunction takeOutTrash() {\n\n    return new Promise((resolve, reject) =&gt; {\n        setTimeout(() =&gt; {\n            const trashTakenOut = true;\n            if (trashTakenOut) {\n                resolve(\"You took out the trash.\");\n            } else {\n                reject(\"You didn't take out the trash.\")\n            }\n        }, 3500);\n    })\n}\n\nwalkDog().then(value =&gt; { console.log(value); return cleanKitchen() }) // You walked the dog.\n    .then(value =&gt; { console.log(value); return takeOutTrash() })\n    .then(value =&gt; { console.log(value); console.log('Done!') })\n    .catch(error =&gt; { console.log(error) }); // You didn't clean the kitchen.\n</code></pre>","tags":["Promises","javascript"]},{"location":"Daily%20Notes/2024-01-02/","title":"2024 01 02","text":"<ul> <li>Process of elimination  - new branch on develop</li> <li>Packagelock.json change<ul> <li>Only commit changes that I've intentionally done depending on a dependency</li> <li>Change/add/remove - only reason to change the packagelock file</li> </ul> </li> <li> <p>If I've not intentionally made a change to the packagelock, the file shouldn't be committed </p> </li> <li> <p>Deploying the branch to wsc-dev when needing to test before merging with </p> </li> <li> <p>Check previous Builds before I do it, if no recent deploys then my branch can be used</p> </li> <li> <p>JSDOCS, when using an object, there should only be one param</p> </li> <li>Cherry-pick - really powerful to pull separate commits</li> </ul>"},{"location":"Daily%20Notes/2024-01-03/","title":"2024 01 03","text":"<ul> <li>GIT reset head~1 (NUMBER IS AMOUNT OF COMMITS BACK)</li> <li>Can make changes to that commit locally to fix bugs</li> <li> <p>Will need to git pull</p> </li> <li> <p>Can rewrite history with GIT reset with either soft/hard reset</p> </li> <li> <p>git reset --soft HEAD</p> </li> <li> <p>force push</p> </li> <li> <p>HOW TO RESOLVE MERGE CONFLICT + OVERWRITE COMMIT HISTORY</p> </li> <li>git rebase -i HEAD~2 - used to rewrite history</li> <li>git rebase by itself was used to resolve the conflicts</li> <li>Force push needed else it wont rewrite</li> <li>git_rebase.md</li> <li> <p>git_rebase.md -FORCE PUSH AND BE CAREFUL</p> </li> <li> <p>session data stored in redis - shared memory</p> </li> <li>can find session key</li> <li>Conversation debugging &gt; session keys</li> <li>chatHistory</li> <li>Chat demand ? chat peak ? max data amount coming through</li> <li>request to get all keys + request per key</li> <li> <p>10 second delay </p> </li> <li> <p>SessionStore / lib &gt;handoff-skil</p> </li> <li> <p>seperate redis</p> </li> <li> <p>filteredSessionData - grab keys from the session data, if not there then undefined/null - if updated then updated</p> </li> <li> <p>Group skills by a group, create group of skills, tick</p> </li> <li> <p>CBL or NPS survey task</p> </li> <li>Mixed caching data</li> </ul>"},{"location":"Daily%20Notes/2024-01-04/","title":"2024 01 04","text":"<ul> <li>Agent demand reduction</li> <li>Visual workstack</li> <li> <p>Workstack prioritisation </p> </li> <li> <p>Should have tested it before deploying to WSC-dev with my local branch</p> </li> <li> <p>result has to be an abstract of the AbstractServiceNowItem</p> </li> <li>You have to be explicitly tell it what the result</li> </ul> <p>get/patch/post</p>"},{"location":"Daily%20Notes/2024-01-08/","title":"2024 01 08","text":"<ul> <li>Create a note for a Programming concept e.g Constructors</li> <li>Have a an example in each coding language I require (JS, C#, TypeScript etc)</li> <li>Link to video tutorials where possible</li> <li>Make the explanations as simple as possible, possibly just code by itself</li> </ul>"},{"location":"Daily%20Notes/2024-01-10/","title":"2024 01 10","text":"<ul> <li>Promises resolve or reject</li> <li>It has to resolve or reject else it will do nothing</li> <li> <p>Write my own promises, a non async promises </p> </li> <li> <p>Model View Controller</p> </li> <li> <p>Build functionality within snowIncidentAPI</p> </li> </ul>"},{"location":"Daily%20Notes/2024-01-15/","title":"2024 01 15","text":"<p>public is avaliable anywhere private - only things within the class can access it</p> <p>Patterns and organisation  Singleton and static - instansiated once</p> <ul> <li>Setup a constructor when setting up a class</li> <li>Set and define stuff up</li> <li>Pass parameters</li> <li> <p>super keyword - class inheritance</p> </li> <li> <p>Classes and Class Inheritance</p> </li> <li>onGet is setting things up to intercept calls</li> <li>This will intercept calls made to the API, reply with 200</li> <li>fix eslint on save and run single tests</li> </ul>"},{"location":"Daily%20Notes/2024-01-17/","title":"2024 01 17","text":"<ul> <li>_fixtures used for JSON data impotts used multiple times</li> <li>Object + describe whats inside that object object.string</li> <li>CRA Unit Testing replicating</li> <li>Dashboard not frontend</li> <li>Get it to a point where minmal viable project</li> <li></li> </ul>"},{"location":"Daily%20Notes/2024-01-18/","title":"2024 01 18","text":"<ul> <li>A GIT tag is a read only version</li> <li>Docker tag - if you don't tag it will use the latest</li> <li>Whatever the latest image build is, is the latest tag</li> <li>Docker tags always go to latest if no tag is provided - automatically labelled as the latest , when deploying my own build it will go to the latest, once done I'll delete and then the latest build will be replaced with the most previous build</li> <li> <p>Jenkins </p> </li> <li> <p>Scenario &gt; Summary &gt; Steps taken</p> </li> </ul>"},{"location":"Daily%20Notes/2024-02-01/","title":"2024 02 01","text":"<ul> <li>split jest into own config file</li> <li>Additional test to useUpdateAxios</li> </ul>"},{"location":"Daily%20Notes/Ideas/","title":"Ideas","text":""},{"location":"Daily%20Notes/Ideas/#framework-ideas","title":"Framework Ideas","text":"<ul> <li>Dynamically adjustable car values</li> <li>Dynamically adjustable weapon values</li> <li>Banking system entirely based on virtual money/offline bank account</li> <li>Weapon stat tracking system?</li> <li>Food intake/health system?</li> <li>\"fruit\" watch could be used to show you your vitals on screen</li> <li>If not admin + check speed over % + in a vehicle = ban/screenshot</li> </ul>"},{"location":"Daily%20Notes/Ideas/#game-ideas","title":"Game Ideas","text":"<ul> <li>Environment is impacted by spells (e.g things set on fire if hit by a fire spell)</li> <li>Replace the functionality of a spell with a dino instead</li> <li>Weapons that I'm holding (as I can't do much else) could benefit the Dino's powers</li> <li>Mining events could take place that I need protection from</li> <li>Marketplace would be a website accessible internal + external and be connected to a database both accessible from JS/React &amp; C#</li> <li>First mining run gives you a choice? or gives a defined dino</li> <li>When entering the mine, you're always put at the first level, but should a choice be provided if multiple levels are accessible?</li> <li>Task list of items to do, could be simple like To Do, In progress, Done</li> <li></li> </ul>"},{"location":"Daily%20Notes/Ideas/#work-ideas","title":"Work Ideas","text":"<ul> <li>Manage .MD files within an application, potentially GIT to follow changes?</li> <li>The agents shouldn't have to tell OPS what chat they're currently on, we should be able to retrieve that from the MI - Saves asking the question + saves agent time away from the conversation</li> <li>Agents should be pingable/alerted whenever there is an urgent message, similar to the functionality of how we're able to alert the customers with urgent messages</li> <li></li> </ul>"},{"location":"Learning/AI%20SaaS%20Chat%20Bot/Axios%20-%20Sending%20the%20API%20Request%20from%20React%20to%20Express/","title":"Axios - Sending the API Request from React to Express","text":"<ul> <li>Axios can be used to send the request from the React frontend to the Express backend</li> </ul> <pre><code>import axios from \"axios\";\naxios.defaults.baseURL = \"http://localhost:5000/api/v1\";\naxios.defaults.withCredentials = true;\n</code></pre> <pre><code>// Helper - api-communicator.ts\n\nimport axios from \"axios\";\n\nconst loginUser = async (email: string, password: string) =&gt; {\n    const res = await axios.post(\"/user/login\", { email, password });\n    if (res.status !== 200) {\n        throw new Error(`Unable to Login: ${res.data.message}`);\n    }\n    const data = await res.data;\n    return data;\n};\n\nexport { loginUser };\n</code></pre> <pre><code>// Contexts - AuthContext.tsx\nimport { loginUser } from \"../helpers/api-communicator\";\n\n    const login = async (email: string, password: string) =&gt; {\n        const data = await loginUser(email, password);\n        if (data) {\n            setUser({ email: data.email, name: data.name });\n            setIsLoggedIn(true);\n        }\n    };\n</code></pre> <pre><code>// Pages - Login.tsx\nconst Login = () =&gt; {\n    const auth = useAuth();\n    const handleSubmit = async (e: React.FormEvent&lt;HTMLFormElement&gt;) =&gt; {\n        e.preventDefault();\n        const formData = new FormData(e.currentTarget);\n        const email = formData.get(\"email\") as string;\n        const password = formData.get(\"password\") as string;\n        try {\n            toast.loading(\"Signing In!\", { id: \"login\" });\n            await auth?.login(email, password);\n            toast.success(\"Signed In Successfully\", { id: \"login\" });\n        } catch (error) {\n            console.log(error);\n            toast.error(\"Signing In Failed\", { id: \"login\" });\n        }\n    };\n</code></pre> <p> <pre><code>[1] POST /api/v1/user/login 200 73.555 ms - 61\n</code></pre></p> <pre><code>// app.ts\n\nimport cors from \"cors\";\napp.use(cors({ origin: \"http://localhost:5173\", credentials: true }));\n</code></pre> <p> </p>","tags":["AI-ChatBot","react","Express","axios"]},{"location":"Learning/AI%20SaaS%20Chat%20Bot/Build%20a%20Secure%20Authentication%20with%20Tokens%20and%20HTTP-only%20signed%20cookies/","title":"Build a Secure Authentication with Tokens and HTTP-only signed cookies","text":"<pre><code>import morgan from \"morgan\";\n// Remove from Production\napp.use(morgan(\"dev\"));\n</code></pre> <pre><code>import { Router } from \"express\";\nimport userRoutes from \"./user.routes.js\";\nimport chatRoutes from \"./chat.routes.js\";\n\nconst appRouter = Router();\n\nappRouter.use(\"/user\", userRoutes); // domain/api/v1/user\nappRouter.use(\"/chat\", chatRoutes); // domain/api/v1/chat\n\nexport default appRouter;\n</code></pre> <pre><code>import { Router } from \"express\";\n\nconst chatRoutes = Router();\n\nexport default chatRoutes;\n</code></pre> <pre><code>import { Router } from \"express\";\nimport getAllUsers from \"../controllers/user-controllers.js\";\n\nconst userRoutes = Router();\n\nuserRoutes.get(\"/\", getAllUsers);\n\nexport default userRoutes;\n</code></pre>","tags":["AI-ChatBot","Secure","Tokens","HTTP-only","models","Mongoose","Middleware","authentication","Authorisation","JWT"]},{"location":"Learning/AI%20SaaS%20Chat%20Bot/Build%20a%20Secure%20Authentication%20with%20Tokens%20and%20HTTP-only%20signed%20cookies/#database-models","title":"Database Models","text":"<pre><code>import mongoose from \"mongoose\";\nimport { randomUUID } from \"crypto\";\n\nconst chatSchema = new mongoose.Schema({\n    id: {\n        type: String,\n        default: randomUUID,\n        },\n    role: { \n        type: String,\n        required: true\n        },\n    content: {\n        type: String,\n        required: true,\n        },\n    },\n});\n\nconst userSchema = new mongoose.Schema({\n    name: {\n        type: String,\n        required: true,\n    },\n    email: {\n        type: String,\n        required: true,\n        unique: true,\n    },\n    password: {\n        type: String,\n        required: true,\n    },\n    chats: [chatSchema],\n});\n\nexport default mongoose.model(\"User\", userSchema);\n</code></pre>","tags":["AI-ChatBot","Secure","Tokens","HTTP-only","models","Mongoose","Middleware","authentication","Authorisation","JWT"]},{"location":"Learning/AI%20SaaS%20Chat%20Bot/Build%20a%20Secure%20Authentication%20with%20Tokens%20and%20HTTP-only%20signed%20cookies/#getting-all-users-from-the-database","title":"Getting all users from the database","text":"<pre><code>import { Request, Response, NextFunction } from \"express\";\nimport User from \"../models/User.js\";\n\nconst getAllUsers = async (req: Request, res: Response, next: NextFunction) =&gt; {\n    try {\n        const users = await User.find();\n        return res.status(200).json({ message: \"OK\", users });\n    } catch (error) {\n        console.log(error);\n        return res.status(200).json({ message: \"ERROR\", cause: error.message });\n    }\n};\n\nexport default getAllUsers;\n</code></pre> <p><pre><code>// [1] GET /api/v1/user 200 32.896 ms - 27\n</code></pre> </p>","tags":["AI-ChatBot","Secure","Tokens","HTTP-only","models","Mongoose","Middleware","authentication","Authorisation","JWT"]},{"location":"Learning/AI%20SaaS%20Chat%20Bot/Build%20a%20Secure%20Authentication%20with%20Tokens%20and%20HTTP-only%20signed%20cookies/#signup-process-and-encrypting-passwords","title":"Signup process and encrypting passwords","text":"<pre><code>import { Request, Response, NextFunction } from \"express\";\nimport { hash } from \"bcrypt\";\nimport User from \"../models/User.js\";\n\nconst getAllUsers = async (req: Request, res: Response, next: NextFunction) =&gt; {\n    try {\n        const users = await User.find();\n        return res.status(200).json({ message: \"OK\", users });\n    } catch (error) {\n        console.log(error);\n        return res.status(200).json({ message: \"ERROR\", cause: error.message });\n    }\n};\n\nconst userSignUp = async (req: Request, res: Response, next: NextFunction) =&gt; {\n    try {\n        const { name, email, password } = req.body;\n        const hashedPassword = await hash(password, 10);\n        const user = new User({ name, email, hashedPassword });\n        await user.save();\n        return res.status(200).json({ message: \"OK\", id: user._id.toString() });\n    } catch (error) {\n        console.log(error);\n        return res.status(200).json({ message: \"ERROR\", cause: error.message });\n    }\n};\n\nexport { getAllUsers, userSignUp };\n</code></pre> <p><pre><code>// POST /api/v1/user/signup 200 86.516 ms - 48\n</code></pre> </p> <pre><code>{\n    \"message\": \"OK\",\n    \"users\": [\n        {\n            \"_id\": \"659012136e04c2fa96a1a5a0\",\n            \"name\": \"Liam\",\n            \"email\": \"liam.frazer@gmail.com\",\n            \"password\": \"$2b$10$EbD.7KUwZmKe89GMf.n4nek8WlZNjpa9wrZsHpRWlh3sgZ4bvgmMu\",\n            \"chats\": [],\n            \"__v\": 0\n        }\n    ]\n}\n</code></pre>","tags":["AI-ChatBot","Secure","Tokens","HTTP-only","models","Mongoose","Middleware","authentication","Authorisation","JWT"]},{"location":"Learning/AI%20SaaS%20Chat%20Bot/Build%20a%20Secure%20Authentication%20with%20Tokens%20and%20HTTP-only%20signed%20cookies/#middlewares","title":"Middlewares","text":"<ul> <li>Middleware are functions which get executed before a request is processed.</li> <li>In Node and Express, middleware can be used to check JSON body validations, Tokens or Cookie Validations, Params Validations and more according to specific requirements</li> </ul>","tags":["AI-ChatBot","Secure","Tokens","HTTP-only","models","Mongoose","Middleware","authentication","Authorisation","JWT"]},{"location":"Learning/AI%20SaaS%20Chat%20Bot/Build%20a%20Secure%20Authentication%20with%20Tokens%20and%20HTTP-only%20signed%20cookies/#validation-middleware-with-express-validator","title":"Validation middleware with express-validator","text":"<pre><code>import { body, ValidationChain, validationResult } from \"express-validator\";\nimport { Request, Response, NextFunction } from \"express\";\n\nconst validate = (validations: ValidationChain[]) =&gt; {\n    return async (req: Request, res: Response, next: NextFunction) =&gt; {\n        for (let validation of validations) {\n            const result = await validation.run(req);\n            if (!result.isEmpty()) {\n                break;\n            }\n        }\n        const errors = validationResult(req);\n        if (errors.isEmpty()) {\n            return next();\n        }\n        return res.status(422).json({ errors: errors.array() });\n    };\n};\n\nconst signupValidator = [\n    body(\"name\").notEmpty().withMessage(\"Name is required\"),\n    body(\"email\").trim().isEmail().withMessage(\"Email is required\"),\n    body(\"password\")\n        .trim()\n        .isLength({ min: 6 })\n        .withMessage(\"Password should contain at least 6 characters\"),\n];\n\nexport { validate, signupValidator };\n</code></pre> <p><pre><code>userRoutes.post(\"/signup\", validate(signupValidator), userSignup);\n</code></pre> <pre><code>{\n    \"errors\": [\n        {\n            \"type\": \"field\",\n            \"value\": \"liam\",\n            \"msg\": \"Email is required\",\n            \"path\": \"email\",\n            \"location\": \"body\"\n        }\n    ]\n}\n</code></pre> <pre><code>POST /api/v1/user/signup 422 3.406 ms - 103\n</code></pre></p> <p><pre><code>\"errors\": [\n        {\n            \"type\": \"field\",\n            \"value\": \"12345\",\n            \"msg\": \"Password should contain at least 6 characters\",\n            \"path\": \"password\",\n            \"location\": \"body\"\n        }\n    ]\n}\n</code></pre> <pre><code>POST /api/v1/user/signup 422 1.491 ms - 135\n</code></pre></p>","tags":["AI-ChatBot","Secure","Tokens","HTTP-only","models","Mongoose","Middleware","authentication","Authorisation","JWT"]},{"location":"Learning/AI%20SaaS%20Chat%20Bot/Build%20a%20Secure%20Authentication%20with%20Tokens%20and%20HTTP-only%20signed%20cookies/#login-functionality","title":"Login Functionality","text":"<p><pre><code>{\n    \"message\": \"OK\",\n    \"id\": \"65901f7bacad39432540b36c\"\n}\n</code></pre> <pre><code>[1] POST /api/v1/user/login 200 83.719 ms - 48\n</code></pre></p> <p><pre><code>const loginValidator = [\n    body(\"email\").trim().isEmail().withMessage(\"Email is required\"),\n    body(\"password\")\n        .trim()\n        .isLength({ min: 6 })\n        .withMessage(\"Password should contain at least 6 characters\"),\n];\n\nconst signupValidator = [\n    body(\"name\").notEmpty().withMessage(\"Name is required\"),\n    ...loginValidator,\n];\n\nexport { validate, signupValidator, loginValidator };\n</code></pre> <pre><code>const userLogin = async (req: Request, res: Response, next: NextFunction) =&gt; {\n    try {\n        const { email, password } = req.body;\n        const user = await User.findOne({ email });\n        if (!user) {\n            return res.status(401).send(\"User not found\");\n        }\n        const isPasswordCorrect = await compare(password, user.password);\n        if (!isPasswordCorrect) {\n            return res.status(403).send(\"Invalid credentials\");\n        }\n        return res.status(200).json({ message: \"OK\", id: user._id.toString() });\n    } catch (error) {\n        console.log(error);\n        return res.status(200).json({ message: \"ERROR\", cause: error.message });\n    }\n};\n</code></pre></p>","tags":["AI-ChatBot","Secure","Tokens","HTTP-only","models","Mongoose","Middleware","authentication","Authorisation","JWT"]},{"location":"Learning/AI%20SaaS%20Chat%20Bot/Build%20a%20Secure%20Authentication%20with%20Tokens%20and%20HTTP-only%20signed%20cookies/#authentication","title":"Authentication","text":"<ul> <li>Authentication is step in which the user needs to verify their identity.</li> <li>For this application, user user needs to provide the Email and Password created during the registration process</li> <li>The user will then be provided with a token after the authentication process takes places</li> </ul>","tags":["AI-ChatBot","Secure","Tokens","HTTP-only","models","Mongoose","Middleware","authentication","Authorisation","JWT"]},{"location":"Learning/AI%20SaaS%20Chat%20Bot/Build%20a%20Secure%20Authentication%20with%20Tokens%20and%20HTTP-only%20signed%20cookies/#authorisation","title":"Authorisation","text":"<ul> <li>Once the user authenticates, they are provided with a token.</li> <li>To access the resource, the user will show the token used during the authentication process.</li> <li>This authorisation will then ensure the user only has access to the resource they're entitled to.</li> </ul>","tags":["AI-ChatBot","Secure","Tokens","HTTP-only","models","Mongoose","Middleware","authentication","Authorisation","JWT"]},{"location":"Learning/AI%20SaaS%20Chat%20Bot/Build%20a%20Secure%20Authentication%20with%20Tokens%20and%20HTTP-only%20signed%20cookies/#jwt","title":"JWT","text":"<ul> <li>JSON Web Token (JWT) is used to encrypt a payload into a signed token.</li> <li>This contains the permissions or authorities of the user.</li> </ul>","tags":["AI-ChatBot","Secure","Tokens","HTTP-only","models","Mongoose","Middleware","authentication","Authorisation","JWT"]},{"location":"Learning/AI%20SaaS%20Chat%20Bot/Build%20a%20Secure%20Authentication%20with%20Tokens%20and%20HTTP-only%20signed%20cookies/#http-only-cookies","title":"HTTP-only Cookies","text":"<ul> <li>HTTP-only cookies are a type of web cookie that comes with a special security attribute that restricts cookies from being access by JavaScript within the browser.</li> <li>This prevents XSS attacks.</li> </ul> <pre><code>import jwt from \"jsonwebtoken\";\n\nconst createToken = (id: string, email: string, expiresIn: string) =&gt; {\n    const payload = {\n        id,\n        email,\n    };\n    const token = jwt.sign(payload, process.env.JWT_SECRET, {\n        expiresIn: expiresIn,\n    });\n    return token;\n};\n\nexport default createToken;\n</code></pre> <pre><code>const userSignup = async (req: Request, res: Response, next: NextFunction) =&gt; {\n    try {\n        const { name, email, password } = req.body;\n        const existingUser = await User.findOne({ email });\n        if (existingUser) {\n            return res.status(401).send(\"User already exists\");\n        }\n        const hashedPassword = await hash(password, 10);\n        const user = new User({ name, email, password: hashedPassword });\n        await user.save();\n\n        res.clearCookie(COOKIE_NAME, {\n            httpOnly: true,\n            domain: \"localhost\",\n            signed: true,\n            path: \"/\",\n        });\n\n        const token = createToken(user._id.toString(), user.email, \"7d\");\n        const expires = new Date();\n        expires.setDate(expires.getDate() + 7);\n        res.cookie(COOKIE_NAME, token, {\n            path: \"/\",\n            domain: \"localhost\",\n            expires,\n            httpOnly: true,\n            signed: true,\n        });\n\n        return res.status(201).json({ message: \"OK\", id: user._id.toString() });\n    } catch (error) {\n        console.log(error);\n        return res.status(200).json({ message: \"ERROR\", cause: error.message });\n    }\n};\n</code></pre> <p> <pre><code>POST /api/v1/user/login 200 85.811 ms - 48\n</code></pre></p>","tags":["AI-ChatBot","Secure","Tokens","HTTP-only","models","Mongoose","Middleware","authentication","Authorisation","JWT"]},{"location":"Learning/AI%20SaaS%20Chat%20Bot/Building%20the%20React%20Front%20end%20for%20OpenAI%20ChatGPT/","title":"Building the React Front end for OpenAI ChatGPT","text":"<p><pre><code>// pages - Chat.tsx\nimport { Box, Avatar, Typography, Button, IconButton } from \"@mui/material\";\nimport { red } from \"@mui/material/colors\";\nimport React from \"react\";\nimport { useAuth } from \"../contexts/AuthContext\";\nimport ChatItem from \"../components/chat/ChatItem\";\n\nimport { IoMdSend } from \"react-icons/io\";\n\nconst chatMessages = [\n    {\n        role: \"user\",\n        content: \"Hello, can you tell me the weather forcast for tomorrow?\",\n    },\n    {\n        role: \"assistant\",\n        content: \"Sure! I can help with that. Please provide me with your location.\",\n    },\n    {\n        role: \"user\",\n        content: \"I'm based in Nottingham!\",\n    },\n    {\n        role: \"assistant\",\n        content: \"Great! Give me a moment to fetch the weather information for Nottingham.\",\n    },\n    {\n        role: \"assistant\",\n        content: \"The weather forecast for Nottingham is sunny with a high of 14 degrees and a low of 5 degrees. There is a 50% chance of rain, with 10% chance of snow.\",\n    },\n    {\n        role: \"user\",\n        content: \"That sounds perfect for December! Thanks for the information.\",\n    },\n    {\n        role: \"assistant\",\n        content: \"You're welcome! If you have any further questions, please feel free to ask.\",\n    },\n];\n\nconst Chat = () =&gt; {\n    const auth = useAuth();\n    return (\n        &lt;Box sx={{ display: \"flex\", flex: 1, width: \"100%\", height: \"100%\", mt: 3, gap: 3 }}&gt;\n            &lt;Box sx={{ display: { md: \"flex\", sm: \"none\", xs: \"none\" }, flex: 0.2, flexDirection: \"column\" }}&gt;\n                &lt;Box sx={{ display: \"flex\", width: \"100%\", height: \"60vh\", bgcolor: \"rgb(17,29,39)\", borderRadius: 5, flexDirection: \"column\", mx: 3 }}&gt;\n                    &lt;Avatar sx={{ mx: \"auto\", my: 2, bgcolor: \"white\", color: \"black\", fontWeight: 700 }}&gt;{auth?.user?.name[0]}&lt;/Avatar&gt;\n                    &lt;Typography sx={{ mx: \"auto\", fontFamily: \"work sans\" }}&gt;You are talking to a ChatBOT&lt;/Typography&gt;\n                    &lt;Typography sx={{ mx: \"auto\", fontFamily: \"work sans\", my: 4, p: 3 }}&gt;You can ask some questions related to Knowledge, Business, Advice, Education, etc. But please avoid sharing personal information.&lt;/Typography&gt;\n                    &lt;Button sx={{ width: \"200px\", my: \"auto\", color: \"white\", fontWeight: 700, borderRadius: 3, mx: \"auto\", bgcolor: red[300], \":hover\": { bgcolor: red[400] } }}&gt;Clear Conversation&lt;/Button&gt;\n                &lt;/Box&gt;\n            &lt;/Box&gt;\n            &lt;Box sx={{ display: \"flex\", flex: { md: 0.8, sx: 1, sm: 1 }, flexDirection: \"column\", px: 3 }}&gt;\n                &lt;Typography sx={{ textAlign: \"center\", fontSize: \"40px\", color: \"white\", mb: 2, mx: \"auto\", fontWeight: 600 }}&gt;Model GPT3.5-turbo&lt;/Typography&gt;\n                &lt;Box sx={{ width: \"100%\", height: \"60vh\", borderRadius: 3, mx: \"auto\", display: \"flex\", flexDirection: \"column\", overflow: \"scroll\", overflowX: \"hidden\", overflowY: \"hidden\", scrollBehavior: \"smooth\" }}&gt;\n                    {chatMessages.map((chat, index) =&gt; (\n                        &lt;ChatItem content={chat.content} role={chat.role} key={index} /&gt;\n                    ))}\n                &lt;/Box&gt;\n                &lt;div style={{ width: \"100%\", padding: \"20px\", borderRadius: 8, backgroundColor: \"rgb(17,27,39)\", display: \"flex\", margin: \"auto\" }}&gt;\n                    &lt;input type=\"text\" style={{ width: \"100%\", backgroundColor: \"transparent\", padding: \"10px\", border: \"none\", outline: \"none\", color: \"white\", fontSize: \"20px\" }}&gt;&lt;/input&gt;\n                    &lt;IconButton sx={{ ml: \"auto\", color: \"white\" }}&gt;{&lt;IoMdSend /&gt;}&lt;/IconButton&gt;\n                &lt;/div&gt;\n            &lt;/Box&gt;\n        &lt;/Box&gt;\n    );\n};\n\nexport default Chat;\n</code></pre> <pre><code>// components - chat - ChatItem.tsx\nimport React from \"React\";\nimport { Box, Typography, Avatar } from \"@mui/material\";\nimport { useAuth } from \"../../contexts/AuthContext\";\n\nconst ChatItem = ({ content, role }: { content: string; role: \"user\" | \"assistant\" }) =&gt; {\n    const auth = useAuth();\n    return role === \"assistant\" ? (\n        &lt;Box sx={{ display: \"flex\", p: 2, bgcolor: \"#004d5612\", my: 2, gap: 2 }}&gt;\n            &lt;Avatar sx={{ ml: \"0\" }}&gt;\n                &lt;img src=\"openai.png\" alt=\"openai\" width={\"30px\"} /&gt;\n            &lt;/Avatar&gt;\n            &lt;Box&gt;\n                &lt;Typography fontSize={\"20px\"}&gt;{content}&lt;/Typography&gt;\n            &lt;/Box&gt;\n        &lt;/Box&gt;\n    ) : (\n        &lt;Box sx={{ display: \"flex\", p: 2, bgcolor: \"#004d56\", gap: 2 }}&gt;\n            &lt;Avatar sx={{ ml: \"0\", bgcolor: \"black\", color: \"white\" }}&gt;{auth?.user?.name[0]}&lt;/Avatar&gt;\n            &lt;Box&gt;\n                &lt;Typography fontSize={\"20px\"}&gt;{content}&lt;/Typography&gt;\n            &lt;/Box&gt;\n        &lt;/Box&gt;\n    );\n};\n\nexport default ChatItem;\n</code></pre></p> <p></p>","tags":["AI-ChatBot","react","FrontEnd"]},{"location":"Learning/AI%20SaaS%20Chat%20Bot/Chat%20Route%20to%20see%20previous%20chat/","title":"Chat Route to see previous chat","text":"<p><pre><code>// routes - chat.routes.ts\nchatRoutes.get(\"/all-chats\", verifyToken, sendChatsToUser);\n</code></pre> <pre><code>// helpers - api-communicator.ts\nconst getUserChats = async () =&gt; {\n    const res = await axios.get(\"/chat/all-chats\");\n    if (res.status !== 200) {\n        console.log(res.data);\n        throw new Error(`Unable to send chat`);\n    }\n    const data = await res.data;\n    return data;\n};\n</code></pre> <pre><code>// controllers - chat-controllers.ts\nexport const sendChatsToUser = async (req: Request, res: Response, next: NextFunction) =&gt; {\n    try {\n        const user = await User.findById(res.locals.jwtData.id);\n        if (!user) {\n            return res.status(401).send(\"User not found or Token malfunctioned\");\n        }\n        if (user._id.toString() !== res.locals.jwtData.id) {\n            return res.status(401).send(\"Permissions did not match\");\n        }\n\n        return res.status(200).json({ message: \"OK\", chats: user.chats });\n    } catch (error) {\n        console.log(error);\n        return res.status(200).json({ message: \"ERROR\", cause: error.message });\n    }\n};\n</code></pre> <pre><code>// pages - Chat.tsx\n    useLayoutEffect(() =&gt; {\n        if (auth?.isLoggedIn &amp;&amp; auth?.user) {\n            toast.loading(\"Loading chats\", { id: \"loadchats\" });\n            getUserChats()\n                .then((data) =&gt; {\n                    setChatMessages([...data.chats]);\n                    toast.success(\"Successfully loaded chats\", { id: \"loadchats\" });\n                })\n                .catch((error) =&gt; {\n                    console.log(error);\n                    toast.error(\"Failed to load chats\", { id: \"loadchats\" });\n                });\n        }\n    }, [auth]);\n</code></pre></p>","tags":["AI-ChatBot","routes","useLayoutEffect"]},{"location":"Learning/AI%20SaaS%20Chat%20Bot/Clear%20Conversation%20Functionality/","title":"Clear Conversation Functionality","text":"<p><pre><code>// routes - chat.routes.ts\nchatRoutes.delete(\"/delete\", verifyToken, deleteChats);\n</code></pre> <pre><code>// pages - Chat.tsx\n    const handleDeleteChats = async () =&gt; {\n        try {\n            toast.loading(\"Deleting chats\", { id: \"deletechats\" });\n            await deleteUserChats();\n            setChatMessages([]);\n            toast.success(\"Successfully deleted chat\", { id: \"deletechats\" });\n        } catch (error) {\n            console.log(error);\n            toast.success(\"Failed to delete chat\", { id: \"deletechats\" });\n        }\n    };\n\n                    &lt;Button onClick={handleDeleteChats} sx={{ width: \"200px\", my: \"auto\", color: \"white\", fontWeight: 700, borderRadius: 3, mx: \"auto\", bgcolor: red[300], \":hover\": { bgcolor: red[400] } }}&gt;\n                        Clear Conversation\n                    &lt;/Button&gt;\n</code></pre> <pre><code>// helpers - api-communicator.ts\nconst deleteUserChats = async () =&gt; {\n    const res = await axios.delete(\"/chat/delete\");\n    if (res.status !== 200) {\n        console.log(res.data);\n        throw new Error(`Unable to delete chat`);\n    }\n    const data = await res.data;\n    return data;\n};\n</code></pre> <pre><code>// controllers - chat-controllers.ts\nexport const deleteChats = async (req: Request, res: Response, next: NextFunction) =&gt; {\n    try {\n        const user = await User.findById(res.locals.jwtData.id);\n        if (!user) {\n            return res.status(401).send(\"User not found or Token malfunctioned\");\n        }\n        if (user._id.toString() !== res.locals.jwtData.id) {\n            return res.status(401).send(\"Permissions did not match\");\n        }\n        //@ts-ignore\n        user.chats = [];\n        await user.save();\n        return res.status(200).json({ message: \"OK\" });\n    } catch (error) {\n        console.log(error);\n        return res.status(200).json({ message: \"ERROR\", cause: error.message });\n    }\n};\n</code></pre></p>","tags":["AI-ChatBot"]},{"location":"Learning/AI%20SaaS%20Chat%20Bot/Enabling%20Protected%20Routes%20within%20the%20Front%20End/","title":"Enabling Protected Routes within the Front End","text":"<p><pre><code>// pages - Chat.tsx\n    useEffect(() =&gt; {\n        if (!auth?.user) {\n            return navigate(\"/login\");\n        }\n    }, [auth, navigate]);\n</code></pre> <pre><code>// routes - user.routes.ts\nuserRoutes.get(\"/logout\", verifyToken, logoutUser);\n</code></pre> <pre><code>// helpers - api-communicator.ts\nconst userLogout = async () =&gt; {\n    const res = await axios.get(\"/user/logout\");\n    if (res.status !== 200) {\n        console.log(res.data);\n        throw new Error(`Unable to delete chat`);\n    }\n    const data = await res.data;\n    return data;\n};\n</code></pre> <pre><code>// contexts - AuthContext.tsx\n    const logout = async () =&gt; {\n        await userLogout();\n        setIsLoggedIn(false);\n        setUser(null);\n        window.location.reload();\n    };\n</code></pre> <pre><code>// controllers - user-controllers.ts\nconst logoutUser = async (req: Request, res: Response, next: NextFunction) =&gt; {\n    try {\n        const user = await User.findById(res.locals.jwtData.id);\n        if (!user) {\n            return res.status(401).send(\"User not found or Token malfunctioned\");\n        }\n        if (user._id.toString() !== res.locals.jwtData.id) {\n            return res.status(401).send(\"Permissions did not match\");\n        }\n\n        res.clearCookie(COOKIE_NAME, {\n            httpOnly: true,\n            domain: \"localhost\",\n            signed: true,\n            path: \"/\",\n        });\n\n        return res.status(200).json({ message: \"OK\", name: user.name, email: user.email });\n    } catch (error) {\n        console.log(error);\n        return res.status(200).json({ message: \"ERROR\", cause: error.message });\n    }\n};\n</code></pre></p>","tags":["AI-ChatBot","routes","Protected","useNavigate","useEffect"]},{"location":"Learning/AI%20SaaS%20Chat%20Bot/Enabling%20Protected%20Routes%20within%20the%20Front%20End/#login-redirect-if-logged-in","title":"Login redirect if logged in","text":"<pre><code>// pages - Login.tx\n    useEffect(() =&gt; {\n        if (auth?.user) {\n            return navigate(\"/chat\");\n        }\n    }, [auth, navigate]);\n</code></pre>","tags":["AI-ChatBot","routes","Protected","useNavigate","useEffect"]},{"location":"Learning/AI%20SaaS%20Chat%20Bot/Enabling%20Protected%20Routes%20within%20the%20Front%20End/#protecting-chat-page-if-not-logged-in","title":"Protecting Chat page if not logged in","text":"<pre><code>// App.tsx\n\n{auth?.isLoggedIn &amp;&amp; auth?.user &amp;&amp; &lt;Route path=\"/chat\" element={&lt;Chat /&gt;} /&gt;}\n</code></pre>","tags":["AI-ChatBot","routes","Protected","useNavigate","useEffect"]},{"location":"Learning/AI%20SaaS%20Chat%20Bot/Integrate%20MongoDB%20Database%20Connection/","title":"Integrate MongoDB Database Connection","text":"<p> <pre><code>import { config } from \"dotenv\";\nconfig();\n</code></pre> <pre><code>// app.ts\nimport express from \"express\";\nimport { config } from \"dotenv\";\nconfig();\n\nconst app = express();\n\n// Middleware\napp.use(express.json());\n\nexport default app;\n</code></pre></p> <p><pre><code>// index.ts\nimport app from \"./app.js\";\nimport { connectToDatabase } from \"./db/connection.js\";\n\nconst PORT = process.env.port || 5000;\n\n// Connection and Listener\nconnectToDatabase()\n    .then(() =&gt; {\n        app.listen(PORT, () =&gt; {\n            console.log(\"Server open &amp; connected to MongoDB\");\n        });\n    })\n    .catch((err) =&gt; {\n        console.log(err);\n    });\n</code></pre> <pre><code>// Server open &amp; connected to MongoDB\n</code></pre></p>","tags":["MongoDB","Mongoose","AI-ChatBot"]},{"location":"Learning/AI%20SaaS%20Chat%20Bot/Integrating%20the%20User%20Messages%20to%20the%20Backend/","title":"Integrating the User Messages to the Backend","text":"<p><pre><code>// Chat - ChatItem.tsx\nimport { Box, Typography, Avatar } from \"@mui/material\";\nimport { useAuth } from \"../../contexts/AuthContext\";\n\nimport { Prism as SyntaxHighlighter } from \"react-syntax-highlighter\";\nimport { coldarkDark } from \"react-syntax-highlighter/dist/esm/styles/prism\";\n\nconst extractCodeFromString = (message: string) =&gt; {\n    if (message.includes(\"```\")) {\n        const blocks = message.split(\"```\");\n        return blocks;\n    }\n};\n\nconst isCodeBlock = (str: string) =&gt; {\n    if (str.includes(\"=\") || str.includes(\";\") || str.includes(\"[\") || str.includes(\"]\") || str.includes(\"{\") || str.includes(\"}\") || str.includes(\"#\") || str.includes(\"//\")) {\n        return true;\n    }\n    return false;\n};\n\nconst ChatItem = ({ content, role }: { content: string; role: \"user\" | \"assistant\" }) =&gt; {\n    const messageBlocks = extractCodeFromString(content);\n    const auth = useAuth();\n    return role === \"assistant\" ? (\n        &lt;Box sx={{ display: \"flex\", p: 2, bgcolor: \"#004d5612\", my: 2, gap: 2 }}&gt;\n            &lt;Avatar sx={{ ml: \"0\" }}&gt;\n                &lt;img src=\"openai.png\" alt=\"openai\" width={\"30px\"} /&gt;\n            &lt;/Avatar&gt;\n            &lt;Box&gt;\n                {!messageBlocks &amp;&amp; &lt;Typography sx={{ fontSize: \"20px\" }}&gt;{content}&lt;/Typography&gt;}\n                {messageBlocks &amp;&amp;\n                    messageBlocks.length &amp;&amp;\n                    messageBlocks.map((block) =&gt;\n                        isCodeBlock(block) ? (\n                            &lt;SyntaxHighlighter style={coldarkDark} language=\"javascript\"&gt;\n                                {block}\n                            &lt;/SyntaxHighlighter&gt;\n                        ) : (\n                            &lt;Typography sx={{ fontSize: \"20px\" }}&gt;{block}&lt;/Typography&gt;\n                        )\n                    )}\n            &lt;/Box&gt;\n        &lt;/Box&gt;\n    ) : (\n        &lt;Box sx={{ display: \"flex\", p: 2, bgcolor: \"#004d56\", gap: 2, my: 2 }}&gt;\n            &lt;Avatar sx={{ ml: \"0\", bgcolor: \"black\", color: \"white\" }}&gt;{auth?.user?.name[0]}&lt;/Avatar&gt;\n            &lt;Box&gt;\n                {!messageBlocks &amp;&amp; &lt;Typography sx={{ fontSize: \"20px\" }}&gt;{content}&lt;/Typography&gt;}\n                {messageBlocks &amp;&amp;\n                    messageBlocks.length &amp;&amp;\n                    messageBlocks.map((block) =&gt;\n                        isCodeBlock(block) ? (\n                            &lt;SyntaxHighlighter style={coldarkDark} language=\"javascript\"&gt;\n                                {block}\n                            &lt;/SyntaxHighlighter&gt;\n                        ) : (\n                            &lt;Typography sx={{ fontSize: \"20px\" }}&gt;{block}&lt;/Typography&gt;\n                        )\n                    )}\n            &lt;/Box&gt;\n        &lt;/Box&gt;\n    );\n};\n\nexport default ChatItem;\n</code></pre> <pre><code>// Pages - Chat.tsx\nimport { Box, Avatar, Typography, Button, IconButton } from \"@mui/material\";\nimport { red } from \"@mui/material/colors\";\nimport { useAuth } from \"../contexts/AuthContext\";\nimport ChatItem from \"../components/chat/ChatItem\";\nimport { useRef, useState } from \"react\";\nimport { IoMdSend } from \"react-icons/io\";\nimport { sendChatRequest } from \"../helpers/api-communicator\";\n\ntype Message = {\n    role: \"user\" | \"assistant\";\n    content: string;\n};\n\nconst Chat = () =&gt; {\n    const inputRef = useRef&lt;HTMLInputElement | null&gt;(null);\n    const auth = useAuth();\n    const [chatMessages, setChatMessages] = useState&lt;Message[]&gt;([]);\n    const handleSubmit = async () =&gt; {\n        const content = inputRef.current?.value as string;\n        if (inputRef &amp;&amp; inputRef.current) {\n            inputRef.current.value = \"\";\n        }\n        const newMessage: Message = { role: \"user\", content };\n        setChatMessages((prev) =&gt; [...prev, newMessage]);\n        const chatData = await sendChatRequest(content);\n        setChatMessages([...chatData.chats]);\n        // Send message to API\n    };\n    return (\n        &lt;Box sx={{ display: \"flex\", flex: 1, width: \"100%\", height: \"100%\", mt: 3, gap: 3 }}&gt;\n            &lt;Box sx={{ display: { md: \"flex\", sm: \"none\", xs: \"none\" }, flex: 0.2, flexDirection: \"column\" }}&gt;\n                &lt;Box sx={{ display: \"flex\", width: \"100%\", height: \"60vh\", bgcolor: \"rgb(17,29,39)\", borderRadius: 5, flexDirection: \"column\", mx: 3 }}&gt;\n                    &lt;Avatar sx={{ mx: \"auto\", my: 2, bgcolor: \"white\", color: \"black\", fontWeight: 700 }}&gt;{auth?.user?.name[0]}&lt;/Avatar&gt;\n                    &lt;Typography sx={{ mx: \"auto\", fontFamily: \"work sans\" }}&gt;You are talking to a ChatBOT&lt;/Typography&gt;\n                    &lt;Typography sx={{ mx: \"auto\", fontFamily: \"work sans\", my: 4, p: 3 }}&gt;You can ask some questions related to Knowledge, Business, Advice, Education, etc. But please avoid sharing personal information.&lt;/Typography&gt;\n                    &lt;Button sx={{ width: \"200px\", my: \"auto\", color: \"white\", fontWeight: 700, borderRadius: 3, mx: \"auto\", bgcolor: red[300], \":hover\": { bgcolor: red[400] } }}&gt;Clear Conversation&lt;/Button&gt;\n                &lt;/Box&gt;\n            &lt;/Box&gt;\n            &lt;Box sx={{ display: \"flex\", flex: { md: 0.8, sx: 1, sm: 1 }, flexDirection: \"column\", px: 3 }}&gt;\n                &lt;Typography sx={{ textAlign: \"center\", fontSize: \"40px\", color: \"white\", mb: 2, mx: \"auto\", fontWeight: 600 }}&gt;Model GPT 3.5-turbo&lt;/Typography&gt;\n                &lt;Box sx={{ width: \"100%\", height: \"60vh\", borderRadius: 3, mx: \"auto\", display: \"flex\", flexDirection: \"column\", overflow: \"scroll\", overflowX: \"hidden\", overflowY: \"auto\", scrollBehavior: \"smooth\" }}&gt;\n                    {chatMessages.map((chat, index) =&gt; (\n                        &lt;ChatItem content={chat.content} role={chat.role} key={index} /&gt;\n                    ))}\n                &lt;/Box&gt;\n                &lt;div style={{ width: \"100%\", padding: \"20px\", borderRadius: 8, backgroundColor: \"rgb(17,27,39)\", display: \"flex\", margin: \"auto\" }}&gt;\n                    &lt;input ref={inputRef} type=\"text\" style={{ width: \"100%\", backgroundColor: \"transparent\", padding: \"10px\", border: \"none\", outline: \"none\", color: \"white\", fontSize: \"20px\" }}&gt;&lt;/input&gt;\n                    &lt;IconButton onClick={handleSubmit} sx={{ ml: \"auto\", color: \"white\" }}&gt;\n                        {&lt;IoMdSend /&gt;}\n                    &lt;/IconButton&gt;\n                &lt;/div&gt;\n            &lt;/Box&gt;\n        &lt;/Box&gt;\n    );\n};\n\nexport default Chat;\n</code></pre> <pre><code>// helpers - api-communicator.ts\nimport axios from \"axios\";\n\nconst loginUser = async (email: string, password: string) =&gt; {\n    const res = await axios.post(\"/user/login\", { email, password });\n    if (res.status !== 200) {\n        throw new Error(`Unable to Login`);\n    }\n    const data = await res.data;\n    return data;\n};\n\nconst checkAuthStatus = async () =&gt; {\n    const res = await axios.get(\"/user/auth-status\");\n    if (res.status !== 200) {\n        throw new Error(`Unable to Authenticate`);\n    }\n    const data = await res.data;\n    return data;\n};\n\nconst sendChatRequest = async (message: string) =&gt; {\n    const res = await axios.post(\"/chat/new\", { message });\n    if (res.status !== 200) {\n        console.log(res.data);\n        throw new Error(`Unable to send chat`);\n    }\n    const data = await res.data;\n    return data;\n};\n\nexport { loginUser, checkAuthStatus, sendChatRequest };\n</code></pre></p>","tags":["AI-ChatBot","APIs"]},{"location":"Learning/AI%20SaaS%20Chat%20Bot/Login%20Page%20and%20handling%20form%20data/","title":"Login Page and handling form data","text":"<p><pre><code>import React from \"react\";\nimport { Box, Typography, Button } from \"@mui/material\";\nimport CustomisedInput from \"../components/shared/CustomisedInput\";\nimport { IoIosLogIn } from \"react-icons/io\";\n\nconst Login = () =&gt; {\n    return (\n        &lt;Box width={\"100%\"} height={\"100%\"} display=\"flex\" flex={1}&gt;\n            &lt;Box\n                padding={8}\n                mt={8}\n                display={{ xs: \"none\", sm: \"none\", md: \"flex\" }}\n            &gt;\n                &lt;img\n                    src=\"airobot.png\"\n                    alt=\"Robot\"\n                    style={{ width: \"400px\" }}\n                &gt;&lt;/img&gt;\n            &lt;/Box&gt;\n            &lt;Box\n                display={\"flex\"}\n                flex={{ xs: 1, sm: 1, md: 0.5 }}\n                justifyContent={\"center\"}\n                alignItems={\"center\"}\n                padding={2}\n                ml={\"auto\"}\n                mt={16}\n            &gt;\n                &lt;form\n                    style={{\n                        margin: \"auto\",\n                        padding: \"30px\",\n                        boxShadow: \" 10px 10px 20px #000\",\n                        borderRadius: \"10px\",\n                        border: \"none\",\n                    }}\n                &gt;\n                    &lt;Box\n                        sx={{\n                            display: \"flex\",\n                            flexDirection: \"column\",\n                            justifyContent: \"center\",\n                        }}\n                    &gt;\n                        &lt;Typography\n                            variant=\"h4\"\n                            textAlign=\"center\"\n                            padding={2}\n                            fontWeight={600}\n                        &gt;\n                            Login\n                        &lt;/Typography&gt;\n                        &lt;CustomisedInput\n                            type={\"email\"}\n                            label={\"Email\"}\n                            name={\"email\"}\n                        /&gt;\n                        &lt;CustomisedInput\n                            type={\"password\"}\n                            label={\"Password\"}\n                            name={\"password\"}\n                        /&gt;\n                        &lt;Button\n                            type=\"submit\"\n                            sx={{\n                                px: 2,\n                                py: 1,\n                                mt: 2,\n                                width: \"400px\",\n                                borderRadius: 2,\n                                bgcolor: \"#00fffc\",\n                                \":hover\": { bgcolor: \"white\", color: \"black\" },\n                            }}\n                            endIcon={&lt;IoIosLogIn /&gt;}\n                        &gt;\n                            Login\n                        &lt;/Button&gt;\n                    &lt;/Box&gt;\n                &lt;/form&gt;\n            &lt;/Box&gt;\n        &lt;/Box&gt;\n    );\n};\n\nexport default Login;\n</code></pre> </p> <ul> <li>We can create a function to grab the form data without having to use a state</li> </ul> <p><pre><code>&lt;form onSubmit={(e) =&gt; handleSubmit(e)} style={{ margin: \"auto\", padding: \"30px\", boxShadow: \" 10px 10px 20px #000\", borderRadius: \"10px\", border: \"none\" }}&gt;\n</code></pre> <pre><code>    const handleSubmit = (e: React.FormEvent&lt;HTMLFormElement&gt;) =&gt; {\n        e.preventDefault();\n        const formData = new FormData(e.currentTarget);\n        const email = formData.get(\"email\");\n        const password = formData.get(\"password\");\n        console.log(email, password);\n    };\n</code></pre> <pre><code>liam.frazer@gmail.com 12345\n</code></pre></p>","tags":["AI-ChatBot","react","form-data","axios"]},{"location":"Learning/AI%20SaaS%20Chat%20Bot/Setting%20up%20the%20Front%20End/","title":"Setting up the Front End","text":"<pre><code>import React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport App from \"./App.tsx\";\nimport \"./index.css\";\nimport { createTheme, ThemeProvider } from \"@mui/material\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nconst theme = createTheme({\n    typography: {\n        fontFamily: \"Roboto Slab, serif\",\n        allVariants: { color: \"white\" },\n    },\n});\n\nReactDOM.createRoot(document.getElementById(\"root\")!).render(\n    &lt;React.StrictMode&gt;\n        &lt;BrowserRouter&gt;\n            &lt;ThemeProvider theme={theme}&gt;\n                &lt;App /&gt;\n            &lt;/ThemeProvider&gt;\n        &lt;/BrowserRouter&gt;\n    &lt;/React.StrictMode&gt;\n);\n</code></pre> <pre><code>npm install @mui/material @emotion/react @emotion/styled react-icons react-router-dom react-hot-toast\n</code></pre>","tags":["react","#AI-ChatBot"]},{"location":"Learning/AI%20SaaS%20Chat%20Bot/Setting%20up%20the%20Front%20End/#routing","title":"Routing","text":"<pre><code>import Header from \"./components/Header\";\nimport { Routes, Route } from \"react-router-dom\";\nimport Home from \"./pages/Home\";\nimport Login from \"./pages/Login\";\nimport Signup from \"./pages/Signup\";\nimport Chat from \"./pages/Chat\";\nimport NotFound from \"./pages/NotFound\";\n\nfunction App() {\n    return (\n        &lt;main&gt;\n            &lt;Header /&gt;\n            &lt;Routes&gt;\n                &lt;Route path=\"/\" element={&lt;Home /&gt;} /&gt;\n                &lt;Route path=\"/login\" element={&lt;Login /&gt;} /&gt;\n                &lt;Route path=\"/signup\" element={&lt;Signup /&gt;} /&gt;\n                &lt;Route path=\"/chat\" element={&lt;Chat /&gt;} /&gt;\n                &lt;Route path=\"*\" element={&lt;NotFound /&gt;} /&gt;\n            &lt;/Routes&gt;\n        &lt;/main&gt;\n    );\n}\n\nexport default App;\n</code></pre>","tags":["react","#AI-ChatBot"]},{"location":"Learning/AI%20SaaS%20Chat%20Bot/Setting%20up%20the%20Front%20End/#logo-with-material-ui-styling","title":"Logo with Material UI Styling","text":"<pre><code>import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Typography } from \"@mui/material\";\n\nconst Logo = () =&gt; {\n    return (\n        &lt;div\n            style={{\n                display: \"flex\",\n                marginRight: \"auto\",\n                alignItems: \"center\",\n                gap: \"15px\",\n            }}\n        &gt;\n            &lt;Link to={\"/\"}&gt;\n                &lt;img\n                    src=\"openai.png\"\n                    alt=\"openai\"\n                    width={\"30px\"}\n                    height={\"30px\"}\n                    className=\"image-inverted\"\n                /&gt;\n            &lt;/Link&gt;\n            &lt;Typography\n                sx={{\n                    display: { md: \"block\", sm: \"none\", xs: \"none\" },\n                    marginRight: \"auto\",\n                    fontWeight: \"800\",\n                    textShadow: \"2px 2px 20px #000\",\n                }}\n            &gt;\n                &lt;span style={{ fontSize: \"20px\" }}&gt;MERN&lt;/span&gt;-GPT\n            &lt;/Typography&gt;\n        &lt;/div&gt;\n    );\n};\n\nexport default Logo;\n</code></pre>","tags":["react","#AI-ChatBot"]},{"location":"Learning/AI%20SaaS%20Chat%20Bot/Setting%20up%20the%20Front%20End/#header","title":"Header","text":"<pre><code>import React from \"react\";\nimport { AppBar, Toolbar } from \"@mui/material\";\nimport Logo from \"./shared/Logo\";\n\nconst Header = () =&gt; {\n    return (\n        &lt;AppBar\n            sx={{\n                bgcolor: \"transparent\",\n                boxShadow: \"none\",\n                position: \"static\",\n            }}\n        &gt;\n            &lt;Toolbar sx={{ display: \"flex\" }}&gt;\n                &lt;Logo /&gt;\n            &lt;/Toolbar&gt;\n        &lt;/AppBar&gt;\n    );\n};\n\nexport default Header;\n</code></pre> <ul> <li>The context API will be very useful to show components to the user, depending on whether they're logged in or not using our backend.</li> </ul>","tags":["react","#AI-ChatBot"]},{"location":"Learning/AI%20SaaS%20Chat%20Bot/Setting%20up%20the%20Front%20End/#component-showing-based-on-context","title":"Component showing based on context","text":"<pre><code>import { createContext } from \"react\";\nimport { useState, ReactNode, useEffect, useContext } from \"react\";\n\ntype User = {\n    name: string;\n    email: string;\n};\ntype UserAuth = {\n    isLoggedIn: boolean;\n    user: User | null;\n    login: (email: string, password: string) =&gt; Promise&lt;void&gt;;\n    signup: (name: string, email: string, password: string) =&gt; Promise&lt;void&gt;;\n    logout: () =&gt; Promise&lt;void&gt;;\n};\nconst AuthContext = createContext&lt;UserAuth | null&gt;(null);\nconst AuthProvider = ({ children }: { children: ReactNode }) =&gt; {\n    const [user, setUser] = useState&lt;User | null&gt;(null);\n    const [isLoggedIn, setIsLoggedIn] = useState&lt;boolean&gt;(false);\n\n    useEffect(() =&gt; {\n        // Fetch if the user's cookies are valid then skip login\n    }, []);\n    const login = async (email: string, password: string) =&gt; {};\n    const signup = async (name: string, email: string, password: string) =&gt; {};\n    const logout = async () =&gt; {};\n\n    const value = {\n        user,\n        isLoggedIn,\n        login,\n        logout,\n        signup,\n    };\n    return (\n        &lt;AuthContext.Provider value={value}&gt;{children}&lt;/AuthContext.Provider&gt;\n    );\n};\n\nconst useAuth = () =&gt; useContext(AuthContext);\n\nexport { useAuth, AuthProvider };\n</code></pre> <ul> <li>We can use an overall application state within the AuthContext.tsx file</li> </ul> <pre><code>import React from \"react\";\nimport { AppBar, Toolbar } from \"@mui/material\";\nimport Logo from \"./shared/Logo\";\n\nimport { useAuth } from \"../contexts/AuthContext\";\nimport NavigationLink from \"./shared/NavigationLink\";\n\nconst Header = () =&gt; {\n    const auth = useAuth();\n    return (\n        &lt;AppBar\n            sx={{\n                bgcolor: \"transparent\",\n                boxShadow: \"none\",\n                position: \"static\",\n            }}\n        &gt;\n            &lt;Toolbar sx={{ display: \"flex\" }}&gt;\n                &lt;Logo /&gt;\n                &lt;div&gt;\n                    {auth?.isLoggedIn ? (\n                        &lt;&gt;\n                            &lt;NavigationLink\n                                bg=\"#00fffc\"\n                                to=\"/chat\"\n                                text=\"Go to Chat\"\n                                textColor=\"black\"\n                            /&gt;\n                            &lt;NavigationLink\n                                bg=\"#51539f\"\n                                to=\"/\"\n                                text=\"Logout\"\n                                textColor=\"white\"\n                                onClick={auth.logout}\n                            /&gt;\n                        &lt;/&gt;\n                    ) : (\n                        &lt;&gt;\n                            &lt;NavigationLink\n                                bg=\"#00fffc\"\n                                to=\"/login\"\n                                text=\"Login\"\n                                textColor=\"black\"\n                            /&gt;\n                            &lt;NavigationLink\n                                bg=\"#51539f\"\n                                to=\"/signup\"\n                                text=\"Signup\"\n                                textColor=\"white\"\n                            /&gt;\n                        &lt;/&gt;\n                    )}\n                &lt;/div&gt;\n            &lt;/Toolbar&gt;\n        &lt;/AppBar&gt;\n    );\n};\n\nexport default Header;\n</code></pre>","tags":["react","#AI-ChatBot"]},{"location":"Learning/AI%20SaaS%20Chat%20Bot/Setup%20Node%20Express%20App%20with%20TypeScript/","title":"Setup Node Express App with TypeScript","text":"<pre><code>import express from \"express\";\n\nconst app = express();\n\n// GET -\n// PUT -\n// POST -\n// DELETE -\n\napp.get(\"/\", (req, res, next) =&gt; {});\n\napp.listen(5000, () =&gt; {\n    console.log(\"Listening on port 5000\");\n});\n</code></pre> <p><pre><code>app.get(\"/\", (req, res, next) =&gt; {});\n</code></pre> * / is the location or URL that the GET request would be accessed from, in our example it will just be the main URL * next is used to move on top the next middleware</p> <p></p> <ul> <li>POST is used to send some data along with the request</li> </ul> <p><pre><code>app.use(express.json());\n</code></pre> * This tells the application that we will be using JSON as the incoming and outgoing requests as JSON</p> <pre><code>app.post(\"/\", (req, res, next) =&gt; {\n    console.log(req.body.name);\n\n    return res.send(\"Hello\");\n});\n</code></pre> <p> </p> <ul> <li> <p>PUT request is sending data directly from the front end <pre><code>app.put(\"/\", (req, res, next) =&gt; {\n    console.log(req.body.name);\n\n    return res.send(\"Hello\");\n});\n</code></pre></p> </li> <li> <p>While we're only using a static route at the moment, there will be points in the future where we may have multiple users requiring the express server at the same time</p> </li> <li>We could send the user ID within JSON to identify </li> <li>We could send the ID into the URL as a dynamic route</li> </ul>","tags":["Node","Express","TypeScript","AI-ChatBot"]},{"location":"Learning/AI%20SaaS%20Chat%20Bot/Setup%20Node%20Express%20App%20with%20TypeScript/#dynamic-routing","title":"Dynamic Routing","text":"<p><pre><code>app.put(\"/user/:id\", (req, res, next) =&gt; {\n    console.log(req.params.id);\n\n    return res.send(\"Hello\");\n});\n</code></pre> </p> <p></p> <pre><code>import express from \"express\";\n\nconst app = express();\n\n// Middleware\napp.use(express.json());\n\n// Connection and Listener\napp.listen(5000, () =&gt; {\n    console.log(\"Listening on port 5000\");\n});\n</code></pre>","tags":["Node","Express","TypeScript","AI-ChatBot"]},{"location":"Learning/AI%20SaaS%20Chat%20Bot/Using%20the%20OpenAI%20ChatGPT%203.5%20API/","title":"Using the OpenAI ChatGPT 3.5 API","text":"<p><pre><code>// routes - chat.routes.ts\nimport { Router } from \"express\";\nimport { verifyToken } from \"../utils/token-manager.js\";\nimport { validate, chatCompletionValidator } from \"../utils/validators.js\";\nimport { generateChatCompletion } from \"../controllers/chat-controllers.js\";\n\n// Protected API\nconst chatRoutes = Router();\nchatRoutes.post(\"/new\", validate(chatCompletionValidator), verifyToken, generateChatCompletion);\n\nexport default chatRoutes;\n</code></pre> <pre><code>// controllers - chat-controllers.ts\nimport { Request, Response, NextFunction } from \"express\";\nimport { configureOpenAI } from \"../config/openai-config.js\";\nimport { OpenAIApi, ChatCompletionRequestMessage } from \"openai\";\nimport User from \"../models/User.js\";\n\nconst generateChatCompletion = async (req: Request, res: Response, next: NextFunction) =&gt; {\n    const { message } = req.body;\n    try {\n        const user = await User.findById(res.locals.jwtData.id);\n        if (!user) {\n            return res.status(401).json({ message: \"User not registered or Token malfunctioned\" });\n        }\n        // Grab chats from User\n        const chats = user.chats.map(({ role, content }) =&gt; ({ role, content })) as ChatCompletionRequestMessage[];\n        chats.push({ content: message, role: \"user\" });\n        user.chats.push({ content: message, role: \"user\" });\n        // Send all chats with new one to OpenAI API\n        const config = configureOpenAI();\n        const openAI = new OpenAIApi(config);\n        // Get response from OpenAI\n        const chatResponse = await openAI.createChatCompletion({ model: \"gpt-3.5-turbo\", messages: chats });\n        user.chats.push(chatResponse.data.choices[0].message);\n        await user.save();\n        return res.status(200).json({ chats: user.chats });\n    } catch (error) {\n        console.log(error);\n        return res.status(500).json({ message: \"Something went wrong\" });\n    }\n};\n\nexport { generateChatCompletion };\n</code></pre> <pre><code>// Utils - validators.ts\nconst chatCompletionValidator = [body(\"name\").notEmpty().withMessage(\"Message is required\")];\n</code></pre> <pre><code>// config - openai-config.ts\nimport { Configuration } from \"openai\";\n\nconst configureOpenAI = () =&gt; {\n    const config = new Configuration({\n        apiKey: process.env.OPEN_AI_SECRET,\n        organization: process.env.OPEN_AI_ORGANIZATION_ID,\n    });\n    return config;\n};\n\nexport { configureOpenAI };\n</code></pre></p>","tags":["AI-ChatBot","react","ChatGPT","APIs"]},{"location":"Learning/AI%20SaaS%20Chat%20Bot/useEffect%28%29%20to%20auto-login%20if%20authenticated/","title":"useEffect() to auto-login if authenticated","text":"<p><pre><code>// Routes - user.routes.ts\nuserRoutes.get(\"/auth-status\", verifyToken, verifyUser);\n</code></pre> <pre><code>// utils - token-manager.ts\nconst verifyToken = async (req: Request, res: Response, next: NextFunction) =&gt; {\n    const token = req.signedCookies[`${COOKIE_NAME}`];\n    if (!token || token.trim() === \"\") {\n        return res.status(401).json({ message: \"Token not received\" });\n    }\n    return new Promise&lt;void&gt;((resolve, reject) =&gt; {\n        return jwt.verify(token, process.env.JWT_SECRET, (err, success) =&gt; {\n            if (err) {\n                reject(err.message);\n                return res.status(401).json({ message: \"Token expired\" });\n            } else {\n                console.log(\"Token Verification Successful\");\n                resolve();\n                res.locals.jwtData = success;\n                return next();\n            }\n        });\n    });\n};\n</code></pre> <pre><code>// helpers - api-communicator.ts\nconst checkAuthStatus = async () =&gt; {\n    const res = await axios.get(\"/user/auth-status\");\n    if (res.status !== 200) {\n        throw new Error(`Unable to Authenticate`);\n    }\n    const data = await res.data;\n    return data;\n};\n</code></pre> <pre><code>// contexts - AuthContexts.tsx\n\n    useEffect(() =&gt; {\n        // Fetch if the user's cookies are valid then skip login\n        async function checkStatus() {\n            const data = await checkAuthStatus();\n            if (data) {\n                setUser({ email: data.email, name: data.name });\n                setIsLoggedIn(true);\n            }\n        }\n        checkStatus();\n    }, []);\n</code></pre> <pre><code>// controllers - user-controller.ts\nconst verifyUser = async (req: Request, res: Response, next: NextFunction) =&gt; {\n    try {\n        const user = await User.findById(res.locals.jwtData.id);\n        if (!user) {\n            return res.status(401).send(\"User not found or Token malfunctioned\");\n        }\n        if (user._id.toString() !== res.locals.jwtData.id) {\n            return res.status(401).send(\"Permissions did not match\");\n        }\n\n        return res.status(200).json({ message: \"OK\", name: user.name, email: user.email });\n    } catch (error) {\n        console.log(error);\n        return res.status(200).json({ message: \"ERROR\", cause: error.message });\n    }\n};\n</code></pre></p>","tags":["AI-ChatBot","authenticated","useEffect"]},{"location":"Learning/CSharp%20Fundamentals%20for%20Beginners/Creating%20and%20Adding%20References%20to%20Assemblies/","title":"Creating and Adding References to Assemblies","text":"<p> <pre><code>using System.Net;\n\nnamespace MyCodeLibrary\n{\n    public class Scrape\n    {\n        public string ScrapeWebPage(string url)\n        {\n            return GetWebPage(url);\n        }\n\n        public string ScrapWebpage(string url, string filepath)\n        {\n            string html = GetWebPage(url);\n            File.WriteAllText(filepath, html);\n            return html;\n        }\n\n        private string GetWebPage(string url)\n        {\n            WebClient client = new WebClient();\n            return client.DownloadString(url);\n        }\n    }\n}\n</code></pre> * Building a Custom Class Library</p> <p><pre><code>using MyCodeLibrary;\n\nnamespace Program\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            Scrape myScrape = new Scrape();\n            string value = myScrape.ScrapeWebPage(\"http://google.com\");\n            Console.WriteLine(value);\n            Console.ReadLine();\n        }\n    }\n}\n</code></pre> * Using that Custom Class Library within another application</p>","tags":["csharp"]},{"location":"Learning/CSharp%20Fundamentals%20for%20Beginners/Creating%20your%20first%20CSharp%20Application/","title":"Creating your first CSharp Application","text":"<p><pre><code>namespace HelloWorld\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            Console.WriteLine(\"Hello, World!\");\n            Console.ReadLine(); // Wait for further input\n        }\n    }\n}\n</code></pre> * It matters where you type your code (e.g outside of the code blocks{ }) * A C# instruction has to end with a <code>;</code> * Cannot miss using <code>\"</code> around a STRING * C# is case-sensitive, wrong case will cause complications * Lowercase <code>readline</code> is different than <code>ReadLine</code></p> <ul> <li>Commenting out code to be used for later or write notes regarding the application</li> </ul>","tags":["csharp"]},{"location":"Learning/CSharp%20Fundamentals%20for%20Beginners/Defining%20and%20Calling%20Methods/","title":"Defining and Calling Methods","text":"<ul> <li>A method is a block of code, we can then call it by it's name to invoke that code defined within it's codeblock</li> </ul> <p><pre><code>        static void Main(string[] args)\n        {\n            HelloWorld();\n        }\n\n        private static void HelloWorld()\n        {\n            Console.WriteLine(\"Hello world!\");\n        }\n</code></pre> * Simplest example of show how to create and call a method</p> <p><pre><code>namespace Program\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            Console.WriteLine(\"The Name Game\");\n\n            Console.Write(\"What's your first name? \");\n            string firstName = Console.ReadLine();\n\n            Console.Write(\"What's your last name? \");\n            string lastName = Console.ReadLine();\n\n            Console.Write(\"What city were you born in? \");\n            string city = Console.ReadLine();\n\n            char[] firstNameArray = firstName.ToCharArray();\n            Array.Reverse(firstNameArray);\n\n            char[] lastNameArray = lastName.ToCharArray();\n            Array.Reverse(lastNameArray);\n\n            char[] cityArray = city.ToCharArray();\n            Array.Reverse(cityArray);\n\n            string result = \"\";\n\n            foreach (char item in firstNameArray)\n            {\n                result += item;\n            }\n\n            result += \" \";\n\n            foreach (char item in lastNameArray)\n            {\n                result += item;\n            }\n\n            result += \" \";\n\n            foreach (char item in cityArray)\n            {\n                result += item;\n            }\n\n            Console.WriteLine(result);\n\n\n        }\n    }\n}\n</code></pre> * Example of code with multiple points of repetition that can be replaced with methods/functions</p> <ul> <li>To create an input parameter to a method, it requires a datatype and a name</li> <li> <p>This allows code outside of the method to pass through a variable to then be used inside the method</p> </li> <li> <p>The void keyword means that we're not bothered about the return of the method</p> </li> <li> <p>If this was changed to <code>string</code> for example, we're asking the Method to return back a string</p> </li> <li> <p><code>String.Format</code> will create a new string</p> </li> <li> <p>Overloaded versions of methods</p> </li> <li>You can create additional versions of the same method, with a different method signature, the signature is the number and the datatype</li> </ul> <pre><code>namespace Program\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            Console.WriteLine(\"The Name Game\");\n\n            Console.Write(\"First Name: \");\n            string firstName = Console.ReadLine();\n\n            Console.Write(\"Last Name: \");\n            string lastName = Console.ReadLine();\n\n            Console.Write(\"City: \");\n            string city = Console.ReadLine();\n\n            DisplayResult(\n                ReverseString(firstName),\n                ReverseString(lastName),\n                ReverseString(city));\n            Console.ReadLine();\n        }\n\n        private static string ReverseString(string message)\n        {\n            char[] messageArray = message.ToCharArray();\n            Array.Reverse(messageArray);\n            return String.Concat(messageArray);\n        }\n\n        private static void DisplayResult(\n            string reversedFirstName,\n            string reversedLastName,\n            string reversedCity)\n        {\n            Console.Write(\"Results: \");\n            Console.Write(String.Format(\"{0} {1} {2}\",\n                reversedFirstName,\n                reversedLastName,\n                reversedCity));\n        }\n    }\n}\n</code></pre>","tags":["csharp"]},{"location":"Learning/CSharp%20Fundamentals%20for%20Beginners/Enumerations%20and%20the%20Switch%20Decision%20Statement/","title":"Enumerations and the Switch Decision Statement","text":"<ul> <li>You want to limit and constrain the data with Enums or Enumerations</li> <li>We may want to constrain the possible status to a certain limit, if we're looking to keep track of them</li> </ul> <p><pre><code> private static void PrintAssesment(List&lt;Todo&gt; todos)\n {\n     foreach (var todo in todos)\n     {\n         switch (todo.Status)\n         {\n             case Status.NotStarted:\n                 Console.ForegroundColor = ConsoleColor.DarkRed;\n                 break;\n\n             case Status.InProgress:\n                 Console.ForegroundColor = ConsoleColor.Yellow;\n                 break;\n\n             case Status.OnHold:\n                 Console.ForegroundColor = ConsoleColor.Red;\n                 break;\n\n             case Status.Completed:\n                 Console.ForegroundColor = ConsoleColor.Green;\n                 break;\n\n             case Status.Deleted:\n                 Console.ForegroundColor = ConsoleColor.DarkRed;\n                 break;\n             default:\n                 break;\n         }\n         Console.WriteLine(todo.Description);\n     }\n }\n</code></pre> <pre><code>Buy milk\nBuy bread\nBuy cheese\nBuy eggs\n</code></pre></p> <pre><code>using System.Collections;\n\nnamespace Program\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            List&lt;Todo&gt; todos = new List&lt;Todo&gt;()\n            {\n                new Todo { Description = \"Buy milk\", EstimatedHours = 1, Status = Status.InProgress },\n                new Todo { Description = \"Buy bread\", EstimatedHours = 2, Status = Status.Completed },\n                new Todo { Description = \"Buy cheese\", EstimatedHours = 3, Status = Status.NotStarted },\n                new Todo { Description = \"Buy eggs\", EstimatedHours = 4, Status = Status.OnHold }\n\n            };\n\n            PrintAssesment(todos);\n            Console.ReadLine();\n        }\n\n        private static void PrintAssesment(List&lt;Todo&gt; todos)\n        {\n            foreach (var todo in todos)\n            {\n                switch (todo.Status)\n                {\n                    case Status.NotStarted:\n                        Console.ForegroundColor = ConsoleColor.DarkRed;\n                        break;\n\n                    case Status.InProgress:\n                        Console.ForegroundColor = ConsoleColor.Yellow;\n                        break;\n\n                    case Status.OnHold:\n                        Console.ForegroundColor = ConsoleColor.Red;\n                        break;\n\n                    case Status.Completed:\n                        Console.ForegroundColor = ConsoleColor.Green;\n                        break;\n\n                    case Status.Deleted:\n                        Console.ForegroundColor = ConsoleColor.DarkRed;\n                        break;\n                    default:\n                        break;\n                }\n                Console.WriteLine(todo.Description);\n            }\n        }\n    }\n    class Todo\n    {\n        public string Description { get; set; }\n        public int EstimatedHours { get; set; }\n        public Status Status { get; set; }\n    }\n\n    enum Status\n    {\n        NotStarted,\n        InProgress,\n        OnHold,\n        Completed,\n        Deleted\n    }\n}\n</code></pre>","tags":["csharp"]},{"location":"Learning/CSharp%20Fundamentals%20for%20Beginners/For%20Iteration%20Statement/","title":"For Iteration Statement","text":"<pre><code>namespace Program\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            for (int i = 0; i &lt; 10; i++)\n            {\n                Console.WriteLine(i);\n            }\n            Console.ReadLine();\n        }\n    }\n}\n</code></pre> <ul> <li>Begin by declaring variable <code>i</code></li> <li>As long as <code>i</code> is less than 10, we will continue to loop through the iteration</li> <li>Each time we loop through, we increase the value of <code>i</code> by 1</li> </ul> <p><pre><code>namespace Program\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            for (int i = 0; i &lt; 10; i++)\n            {\n                Console.WriteLine(i);\n                if (i == 7)\n                {\n                    Console.WriteLine(\"Found seven!\");\n                    break;\n                }\n            }\n            Console.ReadLine();\n        }\n    }\n}\n</code></pre> * Within the loop iteration, we're checking for the value of <code>i</code> * Once the value is true, we evaluate the additional code block * Once that codeblock is evaluated, we then <code>break</code> out  of the code.</p>","tags":["csharp"]},{"location":"Learning/CSharp%20Fundamentals%20for%20Beginners/For%20Iteration%20Statement/#debugging","title":"Debugging","text":"","tags":["csharp"]},{"location":"Learning/CSharp%20Fundamentals%20for%20Beginners/Gracefully%20Handling%20Exceptions/","title":"Gracefully Handling Exceptions","text":"<ul> <li>We should be pessimistic regarding everything that we cannot control</li> <li>Anything that we can't control directly should be treated with suspicion and code should always be created defensively</li> </ul> <p> <pre><code>using System.Collections;\n\nnamespace Program\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            string content = File.ReadAllText(@\"C:\\dev\\tex.txt\");\n            Console.WriteLine(content);\n            Console.ReadLine();\n        }\n    }\n}\n</code></pre></p> <p><pre><code>{\n    try\n    {\n        string content = File.ReadAllText(@\"C:\\dev\\tex.txt\");\n        Console.WriteLine(content);\n    }\n    catch (Exception ex)\n    {\n        Console.WriteLine(\"There was a problem!\");\n        Console.WriteLine(ex.Message);\n    }\n    Console.ReadLine();\n}\n</code></pre> <pre><code>There was a problem!\nCould not find file 'C:\\dev\\tex.txt'.\n</code></pre></p> <p> * In our example, we can use a <code>try/catch</code> statement to work from the most specific cases with the more specific errors, down to a general <code>Exception</code> case to ensure it's still captured.</p> <pre><code>       static void Main(string[] args)\n       {\n           try\n           {\n               string content = File.ReadAllText(@\"C:\\dev\\tex.txt\");\n               Console.WriteLine(content);\n           }\n           catch (FileNotFoundException ex)\n           {\n               Console.WriteLine(\"Error - File not found: \" + ex.Message);\n           }\n           catch (DirectoryNotFoundException ex)\n           {\n               Console.WriteLine(\"Error - Directory not found: \" + ex.Message);\n           }\n           catch (Exception ex)\n           {\n               Console.WriteLine(\"There was a problem!\" + ex.Message);\n           }\n           finally\n           {\n               // Code to finalise\n               // Setting objects to null\n               // Closing database connections\n               Console.WriteLine(\"Closing application now ...\");\n           }\n           Console.ReadLine();\n       }\n</code></pre>","tags":["csharp"]},{"location":"Learning/CSharp%20Fundamentals%20for%20Beginners/Operators%2C%20Expressions%20and%20Statements/","title":"Operators, Expressions and Statements","text":"<ul> <li><code>;</code> is used to show a complete line of code</li> <li>Statements are typically one line of code</li> <li>A statement is made up of 1 or more expressions</li> <li> <p>Expressions are made up of 1 or more operators/operands</p> </li> <li> <p>Each line of code is a statement</p> </li> <li> <p>Each statement is made up of 1 or more expressions</p> </li> <li> <p>Operands are things like objects, classes and variables, these are the subject of the statement of code</p> </li> <li> <p>Operators are tools that act on the operand to perform an action</p> </li> <li> <p>An expressions is made up of operands and operators</p> </li> <li>You use expressions to form statements, which are how instructions are expressed to the compiler/dotnet runtime</li> </ul> <pre><code>namespace Program\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            // Variable declaration\n            int x, y, a, b;\n\n            // Assignment operator\n            x = 3;\n            y = 2;\n            a = 1;\n            b = 0;\n\n            // Addition operator\n            x = 3 + 4;\n\n            // Subtraction operator\n            x = 4 - 3;\n\n            // Multiplication operator\n            x = 10 * 5;\n\n            // Division operator\n            x = 10 / 5;\n\n            // Order of operations using parenthesis\n            x = (x + y) * (a - b);\n\n            // Equality operator\n            if (x == y)\n            {\n            }\n\n            // Greater than operator\n            if (x &gt; y)\n            {\n            }\n\n            // Less than operator\n            if (x &lt; y)\n            {\n            }\n\n            // Greater or equal to operator\n            if (x &gt;= y)\n            {\n            }\n\n            // Conditional AND operator\n            if ((x &gt; y) &amp;&amp; (a &gt; b))\n            {\n            }\n\n            // Conditional OR operator\n            if ((x &gt; y) || (a &gt; b))\n            {\n            }\n\n            // In-line Conditional Operator\n            string message = (x == 1) ? \"Car\" : \"Boat\";\n\n            // Member access and Method invocation\n            Console.WriteLine(\"Hi\");\n        }\n    }\n}\n</code></pre>","tags":["csharp"]},{"location":"Learning/CSharp%20Fundamentals%20for%20Beginners/Static%20Keyword/","title":"Static Keyword","text":"<ul> <li> <p>Static methods will be available to you, without having to create an instance of the class <pre><code>        static void Main(string[] args)\n        {\n            Car myCar = new Car();\n\n            Car.MyMethod();\n</code></pre> <pre><code>class Car\n{\n    public string Make { get; set; }\n    public string Model { get; set; }\n    public int Year { get; set; }\n    public string Color { get; set; }\n\n\n    public Car()\n    {\n        // You could load from a configuration file, such as a database.\n        Make = \"Nissan\";\n    }\n\n    public Car(string make, string model, int year, string color)\n    {\n        Make = make;\n        Model = model;\n        Year = year;\n        Color = color;\n    }\n\n    public static void MyMethod()\n    {\n        Console.WriteLine(\"Called the static MyMethod\");\n    }\n}\n</code></pre> <pre><code>Called the static MyMethod\n</code></pre></p> </li> <li> <p>There is a difference between static members and instance members.</p> </li> <li>Properties describing a single instance of the car, whereas a static member aren't per instance, they're more utilities and can be called at any time and don't depend on a single state of the class and can be used at any time</li> </ul>","tags":["csharp"]},{"location":"Learning/CSharp%20Fundamentals%20for%20Beginners/The%20IF%20Decision%20Statement/","title":"The IF Decision Statement","text":"<ul> <li>Making a decision to execute a code, based on some condition</li> <li>This could be input, state data, but we're going to make a decision depending on a certain state</li> </ul> <pre><code>namespace Program\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            Console.WriteLine(\"Liam's Big Giveaway\");\n            Console.Write(\"Choose a Door: 1, 2 or 3: \");\n            string userValue = Console.ReadLine();\n\n            if (userValue == \"1\")\n            {\n                string message = \"You won a new car!\";\n                Console.WriteLine(message);\n            }\n\n            Console.ReadLine();\n        }\n    }\n}\n</code></pre> <ul> <li><code>=</code> is a single assignment operator</li> <li><code>==</code> is an evaluation to create a Boolean value of true or false</li> <li>If the value is false in an IF statement, this will move automatically to code next code block.</li> </ul> <p><pre><code>namespace Program\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            Console.WriteLine(\"Liam's Big Giveaway\");\n            Console.Write(\"Choose a Door: 1, 2 or 3: \");\n            string userValue = Console.ReadLine();\n\n            if (userValue == \"1\")\n            {\n                string message = \"You won a new car!\";\n                Console.WriteLine(message);\n            }\n            else if (userValue == \"2\")\n            {\n                string message = \"You won a new boat!\";\n                Console.WriteLine(message);\n            }\n            else if (userValue == \"3\")\n            {\n                string message = \"You won a new cat!\";\n                Console.WriteLine(message);\n            }\n\n            Console.ReadLine();\n        }\n    }\n}\n</code></pre> * If any of the values are true, that code block will be ran * For example, if the second <code>else if</code> statement is true, the other codeblock is not ran</p> <ul> <li> <p>An <code>else</code> statement at the end of the construct can be used as a safety catch to catch any other case possible.</p> </li> <li> <p>In the above code, there are plenty of examples of DRY examples (don't repeat yourself)</p> </li> <li>Defining a variable within an inner scope, means that specific variable will not be accessible outside of that scope. <pre><code>            else\n            {\n                string message = \"Sorry, we didn't understand.\";\n            }\n            Console.WriteLine(message);\n            Console.ReadLine();\n</code></pre></li> <li>Moving <code>message</code> outside of the last <code>else</code> statement will cause an error if <code>message</code> does not exist as a variable in the outer scope.</li> <li> <p>A cleaner example of the code </p> </li> <li> <p>If there is only one line of code underneath an IF statement, the code blocks are not required</p> </li> </ul> <pre><code>namespace Program\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            Console.WriteLine(\"Liam's Big Giveaway\");\n            Console.Write(\"Choose a Door: 1, 2 or 3: \");\n            string userValue = Console.ReadLine();\n            string message;\n\n            if (userValue == \"1\")\n                message = \"You won a new car!\";\n            else if (userValue == \"2\")\n                message = \"You won a new boat!\";\n            else if (userValue == \"3\")\n                message = \"You won a new cat!\";\n            else\n                message = \"Sorry, we didn't understand.\";\n\n            Console.WriteLine(message);\n            Console.ReadLine();\n        }\n    }\n}\n</code></pre> <ul> <li>Two line of code will cause the second line to be \"outside\" of the hidden code block</li> </ul> <p><pre><code>            {\n                message = \"Sorry, we didn't understand.\";\n                message += \"You lose.\";\n            }\n</code></pre> * The assignment and concat operator can be combined into one</p> <p><pre><code>string message = (userValue == \"1\") ? \"Boat\" : \"strand of hair\";\n</code></pre> * Similar to a Ternary operator, if the evaluation is TRUE, we would take the value from after the ? * If the evaluation is FALSE, we would take the value after the : * This is only usable when there are two valuations. Like an IF ELSE statement</p> <p><pre><code> Console.WriteLine(\"You won a {0}, therefor you won a {1}.\", userValue, message);\n</code></pre> * Replacement values can be used like <code>{0}</code> to then input a value into. * The first item in the list will be element 0, replaced by the list of input parameters after the literal string.</p>","tags":["csharp","if"]},{"location":"Learning/CSharp%20Fundamentals%20for%20Beginners/Understanding%20Arrays/","title":"Understanding Arrays","text":"<p><pre><code>int[] numbers = new int[5];\n</code></pre> * Declaring an array of integers collected under the value <code>numbers</code></p> <p><pre><code>            numbers[0] = 4;\n            numbers[1] = 8;\n            numbers[2] = 15;\n            numbers[3] = 16;\n            numbers[4] = 23;\n</code></pre> * Accessing the elements of the array and then assigning a value to each</p> <p><pre><code>Console.WriteLine(numbers[2]);\n</code></pre> * Accessing the assigned value of the 3rd element of the array</p> <p><pre><code>Console.WriteLine(numbers.Length);\n</code></pre> * Accessing the length of the array by using the <code>length</code> property</p> <p><pre><code>        {\n            int[] numbers = new int[] { 4, 8, 15, 16, 23, 42 };\n        }\n</code></pre> * Assigning the values of the array at runtime, while also allowing the complier to work out how many values are within the array</p> <p><pre><code>{\n    string[] names = new string[] { \"Liam\", \"Frazer\", \"Michael\", \"David\" };\n\n    for (int i = 0; i &lt; names.Length; i++)\n    {\n        Console.WriteLine(names[i]);\n    }\n}\n</code></pre> * Iterating through each value within the array, using a <code>for</code> loop</p> <p><pre><code>        {\n            string[] names = new string[] { \"Liam\", \"Frazer\", \"Michael\", \"David\" };\n\n            foreach (string name in names)\n            {\n                Console.WriteLine(name);\n            }\n        }\n</code></pre> * Using a <code>foreach</code> loop to iterate through the array</p> <p><pre><code>{\n    string quote = \"You can get what you want out of life\" + \n        \" if you help enough other people get what they want\";\n\n    char[] charArray = quote.ToCharArray();\n\n    Array.Reverse(charArray);\n\n    foreach (char c in charArray)\n    {\n        Console.Write(c);\n    }\n    Console.ReadLine();\n}\n</code></pre> * Reversing a string by using the <code>toCharArray()</code> method, the <code>Array.Reverse</code> method and the <code>foreach</code> iteration loop.</p>","tags":["csharp"]},{"location":"Learning/CSharp%20Fundamentals%20for%20Beginners/Understanding%20Classes/","title":"Understanding Classes","text":"<ul> <li>A class is a container for related methods</li> <li>The class is the blueprint, the object is created as a result of the blueprint <pre><code>Car myCar = new Car();\n</code></pre></li> <li>Declaring a new car in memory, then creating a new instance of the Car class</li> <li>Each time we initialise a class, we would have an object that is separate to all the other Classes within the computer's memory</li> <li> <p>A Class is like a Cookie Cutter, it gives the shape to the object, but not the actual object itself</p> </li> <li> <p>The <code>new</code> keyword uses the blueprint, in order to create a new instance of Car</p> </li> <li>Car describes the class/the blueprint, we want to work with one instance which we've set in memory as <code>myCar</code></li> </ul> <p><pre><code>private static decimal DetermineMarketValue(Car car)\n</code></pre> * The uppercase Car corresponds to the name of the Class, the lowercase car is responding to the object, this is an input parameter</p> <ul> <li>In our scenario, it would make more sense for the DetermineMarketValue method to be a part of the <code>Car</code> class, as the class has full access to all the variables/values required for the method to function</li> <li>In our example, we could write a small function that determines the value of the car depending on the year of the car</li> </ul> <pre><code>class Car\n{\n    public string Make { get; set; }\n    public string Model { get; set; }\n    public int Year { get; set; }\n    public string Color { get; set; }\n\n    public decimal DetermineMarketValue()\n    {\n        decimal carValue;\n        if (Year &gt; 1990)\n            carValue = 10000;\n        else\n            carValue = 2000;\n\n        return carValue;\n    }\n}\n</code></pre> <p><pre><code>using System.Text;\n\nnamespace Program\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            Car myCar = new Car();\n            myCar.Make = \"Ford\";\n            myCar.Model = \"Mustang\";\n            myCar.Year = 1964;\n            myCar.Color = \"Red\";\n\n            Console.WriteLine(\"{0} {1} {2} {3}\",\n                myCar.Make,\n                myCar.Model,\n                myCar.Year,\n                myCar.Color);\n\n            Console.WriteLine(\"{0:C}\", myCar.DetermineMarketValue());\n\n            Console.ReadLine();\n        }\n    }\n\n\n    class Car\n    {\n        public string Make { get; set; }\n        public string Model { get; set; }\n        public int Year { get; set; }\n        public string Color { get; set; }\n\n        public decimal DetermineMarketValue()\n        {\n            decimal carValue;\n            if (Year &gt; 1990)\n                carValue = 10000;\n            else\n                carValue = 2000;\n\n            return carValue;\n        }\n    }\n}\n</code></pre> <pre><code>Ford Mustang 1964 Red\n\u00a32,000.00\n</code></pre></p> <ul> <li>We're storing values in that bucket, use the reference <code>myCar</code> as a handle to that bucket</li> <li>Once that handle is dropped, the bucket will no longer be accessible.</li> <li> <p>The DotNet framework monitors the memory that it manages, looking for objects that no longer have any handles, the reference count will go to 0, meaning that this is part of the garbage collection</p> </li> <li> <p>C++ is an unmanaged memory where I may have to memory manage by myself, whereas C# has a garbage selection is managed</p> </li> </ul> <p><pre><code>        static void Main(string[] args)\n        {\n            Car myCar = new Car();\n\n            myCar.Make = \"Ford\";\n            myCar.Model = \"Mustang\";\n            myCar.Year = 1969;\n            myCar.Color = \"Red\";\n\n            Car myOtherCar;\n            myOtherCar = myCar;\n\n            Console.WriteLine(\"{0} {1} {2} {3}\",\n                myOtherCar.Make,\n                myOtherCar.Model,\n                myOtherCar.Year,\n                myOtherCar.Color);\n\n            myOtherCar.Model = \"Bronco\";\n\n            Console.WriteLine(\"{0} {1} {2} {3}\",\n                myCar.Make,\n                myCar.Model,\n                myCar.Year,\n                myCar.Color);\n\n            Console.ReadLine();\n        }\n</code></pre> <pre><code>Ford Mustang 1969 Red\nFor Bronco 1969 Red\n</code></pre> * While we're reference <code>myCar</code> in the second WriteLine, while both <code>mycar</code> and <code>myOtherCar</code> would appear to be different, they've both pointed to the same point in memory, meaning that changes to the <code>myOtherCar</code> variable will have an impact on the original <code>myCar</code> variable</p> <ul> <li>Once we exit outside of the main method, the myCar variable would go out of scope</li> <li>The same if we defined a variable within a different method and set a variable within the Method's scope</li> </ul> <p></p> <ul> <li>We're calling a <code>constructor</code> method whenever we're creating a new instant of a class</li> <li> <p>They're typically used to put the new object into a valid state</p> </li> <li> <p>The <code>.this</code> keyword is optional, it refers to this instance of the object and helps clarify where the variable is associated to.</p> </li> <li> <p>To put any new instance of an object into a valid state</p> </li> <li> <p>Similar to methods, we can create overloaded constructors</p> </li> </ul> <p><pre><code>    public Car()\n    {\n        // You could load from a configuration file, such as a database.\n        Make = \"Nissan\";\n    }\n\n    public Car(string make, string model, int year, string color)\n    {\n        Make = make;\n        Model = model;\n        Year = year;\n        Color = color;\n    }\n}\n</code></pre> <pre><code>Car myThirdCar = new Car(\"Ford\", \"Escape\", 1990, \"Pink\");\n</code></pre>  * The implicit default constructor has no input parameters or a method body, but it allows you to make calls and make new instances of classes at Compile Time * By defining it yourself, you take control of the process</p>","tags":["csharp"]},{"location":"Learning/CSharp%20Fundamentals%20for%20Beginners/Understanding%20Data%20Types%20and%20Variables/","title":"Understanding Data Types and Variables","text":"<ul> <li>We have to declare the variables (buckets) and then label them to ensure we can access them.</li> </ul> <p><pre><code>            int x;\n            int y;\n</code></pre> * Assigning integer values into the variables <code>x</code> and <code>y</code></p> <p><pre><code>            int x;\n            int y;\n\n            x = 7;\n            y = x + 3;\n</code></pre> * Using the <code>=</code> assignment operator, assigning a value into the Y variable</p> <pre><code>Console.WriteLine(\"What is your name?\");\n            Console.WriteLine(\"Type your first name: \");\n            string myFirstName;\n\n            myFirstName = Console.ReadLine();\n\n            string myLastName;\n            Console.Write(\"Type your last name: \");\n            myLastName = Console.ReadLine();\n\n            Console.WriteLine(\"Hello, \" + myFirstName + \" \" + myLastName + \"!\"); // Hello, firstName secondName!\n</code></pre> <ul> <li>Declare your variables as you're using them, don't need to declare the variables at the top section of the code</li> <li>If you can, give them an initialised value immediately after being declared.</li> </ul> <pre><code>            Console.WriteLine(\"What is your name?\");\n            Console.WriteLine(\"Type your first name: \");\n            // string myFirstName;\n\n            string myFirstName = Console.ReadLine();\n\n            // string myLastName;\n            Console.Write(\"Type your last name: \");\n            string myLastName = Console.ReadLine();\n\n            Console.WriteLine(\"Hello, \" + myFirstName + \" \" + myLastName + \"!\");\n</code></pre>","tags":["csharp"]},{"location":"Learning/CSharp%20Fundamentals%20for%20Beginners/Understanding%20Events%20and%20Event-Driven%20Programming/","title":"Understanding Events and Event-Driven Programming","text":"<ul> <li>Events allow responses by handling those key moments within the application's lifecycle</li> <li>We can write code to respond to events being raised</li> </ul> <p><pre><code>static void Main(string[] args)\n{\n    System.Timers.Timer timer = new System.Timers.Timer(2000);\n\n    timer.Elapsed += Timer_Elapsed;\n\n    timer.Start();\n\n    Console.ReadLine();\n\n}\n\nprivate static void Timer_Elapsed(object? sender, System.Timers.ElapsedEventArgs e)\n{\n    Console.WriteLine(\"Elapsed: {0:HH:mm:ss.fff}\", e.SignalTime);\n}\n</code></pre> <pre><code>Elapsed: 18:22:41.196\nElapsed: 18:22:43.193\nElapsed: 18:22:45.193\nElapsed: 18:22:47.193\nElapsed: 18:22:49.191\nElapsed: 18:22:51.191\n</code></pre></p> <pre><code>namespace Program\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            System.Timers.Timer timer = new System.Timers.Timer(2000);\n\n            timer.Elapsed += Timer_Elapsed;\n            timer.Elapsed += Timer_Elapsed1;\n\n            timer.Start();\n\n            Console.WriteLine(\"Press enter to remove the red event.\");\n            Console.ReadLine();\n\n            timer.Elapsed -= Timer_Elapsed1;\n\n            Console.ReadLine();\n\n        }\n\n        private static void Timer_Elapsed1(object? sender, System.Timers.ElapsedEventArgs e)\n        {\n            Console.ForegroundColor = ConsoleColor.Red;\n            Console.WriteLine(\"Elapsed: {0:HH:mm:ss.fff}\", e.SignalTime);\n        }\n\n        private static void Timer_Elapsed(object? sender, System.Timers.ElapsedEventArgs e)\n        {\n            Console.ForegroundColor = ConsoleColor.White;\n            Console.WriteLine(\"Elapsed: {0:HH:mm:ss.fff}\", e.SignalTime);\n        }\n    }\n}\n</code></pre> <p> <pre><code>using System.Text;\nusing System.Windows;\nusing System.Windows.Controls;\nusing System.Windows.Data;\nusing System.Windows.Documents;\nusing System.Windows.Input;\nusing System.Windows.Media;\nusing System.Windows.Media.Imaging;\nusing System.Windows.Navigation;\nusing System.Windows.Shapes;\n\nnamespace WPFEvents\n{\n    /// &lt;summary&gt;\n    /// Interaction logic for MainWindow.xaml\n    /// &lt;/summary&gt;\n    public partial class MainWindow : Window\n    {\n        public MainWindow()\n        {\n            InitializeComponent();\n        }\n\n        private void Button_Click(object sender, RoutedEventArgs e)\n        {\n            myLabel.Content = \"Hello World!\";\n        }\n    }\n}\n</code></pre> </p>","tags":["csharp"]},{"location":"Learning/CSharp%20Fundamentals%20for%20Beginners/Understanding%20Namespaces%20and%20Working%20with%20the%20.NET%20Class%20Library/","title":"Understanding Namespaces and Working with the .NET Class Library","text":"<ul> <li>Every DotNet applications accesses the same cache of DotNet assembly files and the DotNet Framework is required to be installed on the machine</li> <li>namespaces are like <code>last names</code> for our classes, </li> <li>The <code>using</code> statement at the top of the file allows us to swap <code>System.Console.WriteLine()</code> to <code>Console.WriteLine</code> instead. </li> </ul> <p><pre><code>using System.IO;\n\nnamespace Program\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            string text = \"Sample Text\";\n            File.WriteAllText(@\"C:\\dev\\text.txt\", text);\n        }\n    }\n}\n</code></pre> <pre><code>// text.txt\nSample Text\n</code></pre></p> <p><pre><code>using System.IO;\nusing System.Net;\nusing static System.Net.Mime.MediaTypeNames;\n\nnamespace Program\n{\n    class Program\n    {\n        static void Main(string[] args)\n        { \n            WebClient client = new WebClient();\n            string reply = client.DownloadString(\"https://msdn.microsoft.com\");\n            File.WriteAllText(@\"C:\\dev\\text.txt\", reply);\n\n            Console.WriteLine(reply);\n            Console.ReadLine();\n        }\n    }\n}\n</code></pre> </p>","tags":["csharp"]},{"location":"Learning/CSharp%20Fundamentals%20for%20Beginners/Understanding%20Scope%20and%20Accessibility%20Modifiers/","title":"Understanding Scope and Accessibility Modifiers","text":"<ul> <li>When you declare a variable within a block of code, that variable is only live in the duration of that codeblock, or within any of the codeblocks within the codeblock where it was declared</li> <li>When the codeblock is finished executing, the variable is no longer accessible</li> </ul> <p> <pre><code>using System.Text;\nusing System.Xml.Schema;\n\nnamespace Program\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            string j = \"\";\n            for (int i = 0; i &lt; 10; i++)\n            {\n                j = i.ToString();\n                Console.WriteLine(i);\n            }\n            // Console.WriteLine(i);\n            Console.WriteLine(\"Outside of the for: \" + j);\n            Console.ReadLine();\n\n        }\n    }\n}\n</code></pre></p> <ul> <li>A private field is available to all members of the class</li> </ul> <p><pre><code>using System.Text;\nusing System.Xml.Schema;\n\nnamespace Program\n{\n    class Program\n    {\n\n        private static string k = \"\";\n        static void Main(string[] args)\n        {\n            string j = \"\";\n            for (int i = 0; i &lt; 10; i++)\n            {\n                j = i.ToString();\n                k = i.ToString();\n                Console.WriteLine(i);\n            }\n            // Console.WriteLine(i);\n            Console.WriteLine(\"Outside of the for: \" + j);\n            Console.WriteLine(\"Outside of the for: \" + k);\n\n            HelperMethod();\n            Console.ReadLine();\n\n        }\n\n        static void HelperMethod()\n        {\n            Console.WriteLine(\"Value of k from the HelperMethod(): \" + k);\n        }\n    }\n}\n</code></pre> * K is being defined at the class level, making it a sibling to <code>static void Main</code> and <code>static void HelperMethod()</code></p> <p><pre><code>            for (int i = 0; i &lt; 10; i++)\n            {\n                j = i.ToString();\n                k = i.ToString();\n                Console.WriteLine(i);\n\n                if (i == 9)\n                {\n                    string l = i.ToString();\n                }\n\n                Console.WriteLine(l);\n            }\n</code></pre> * <code>l</code> is not accessible as it was being declared within the <code>for loop</code> statement above</p> <ul> <li>private and public are related to encapsulation</li> <li>private means that a method can be called by any other method within the same class</li> <li>A public method is then called outside of the given class</li> <li>Private methods are only called within side the clas</li> </ul> <p><pre><code>class Car\n{\n    public void DoSomething()\n    {\n        Console.WriteLine(helperMethod());\n    }\n\n    private string helperMethod()\n    {\n        return \"Hello World\";\n    }\n}\n</code></pre>  * The consumer of the <code>Car</code> classes doesn't know that the <code>helperMethod</code> doesn't exist * It only uses and makes the <code>DoSomething</code> method available * We typically want to hide the implementation via encapsulation. * Public method should be obvious and simple, while the internals should be Private * This helps remove ambiguity and provide a cleaner interface</p>","tags":["csharp"]},{"location":"Learning/CSharp%20Fundamentals%20for%20Beginners/While%20Iteration%20Statement/","title":"While Iteration Statement","text":"<ul> <li>The <code>while</code> statement in this scenario is allowing us to check for a condition</li> <li><code>while</code> the evaluation is true, we're able to recall the <code>MainMenu()</code> method</li> <li> <p><code>while</code> the evaluation is false, we're able to break out of the while statement</p> </li> <li> <p>The <code>do while</code> statement allows us to run the <code>do</code> part of the statement atleast one time</p> </li> </ul> <pre><code>namespace Program\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            bool displayMenu = true;\n\n            while (displayMenu)\n            {\n                displayMenu = MainMenu();\n            }\n        }\n\n        private static bool MainMenu()\n        {\n            Console.Clear();\n            Console.WriteLine(\"Choose an option:\");\n            Console.WriteLine(\"1) Print Numbers\");\n            Console.WriteLine(\"2) Guessing Game\");\n            Console.WriteLine(\"3) Exit\");\n            string result = Console.ReadLine();\n\n            if (result == \"1\")\n            {\n                PrintNumbers();\n                return true;\n            }\n            else if (result == \"2\")\n            {\n                GuessingGame();\n                return true;\n            }\n            else if (result == \"3\")\n            {\n                return false;\n            }\n            else\n            {\n                return true;\n            }\n        }\n\n        private static void PrintNumbers()\n        {\n            Console.Clear();\n            Console.WriteLine(\"Print Numbers\");\n            Console.Write(\"Type a number: \");\n            int result = int.Parse(Console.ReadLine());\n            int counter = 1;\n            while (counter &lt; result + 1) \n            {\n                Console.Write(counter);\n                Console.Write(\"-\");\n                counter++;\n            }\n            Console.ReadLine();\n        }\n\n        private static void GuessingGame()\n        {\n            Console.Clear();\n            Console.WriteLine(\"Guessing Game\");\n\n            Random myRandom = new Random();\n            int randomNumber = myRandom.Next(1, 11);\n\n            int guessCount = 0;\n            bool incorrect = true;\n\n            do\n            {\n                Console.WriteLine(\"Guess a number between 1 and 10: \");\n                string result = Console.ReadLine();\n                guessCount++;\n                if (result == randomNumber.ToString())\n                    incorrect = false;\n                else\n                    Console.WriteLine(\"Wrong\");\n\n            } while (incorrect);\n                Console.WriteLine(\"Correct! It took you {0} guesses.\", guessCount);\n\n\n            Console.ReadLine();\n        }\n    }\n}\n</code></pre>","tags":["csharp"]},{"location":"Learning/CSharp%20Fundamentals%20for%20Beginners/Working%20with%20Collections/","title":"Working with Collections","text":"<ul> <li>There was no way of limiting the data stored with an ArrayList collection</li> <li>The ArrayList is not strongly typed, which could cause bugs like the example below</li> <li>We allowed our Collection to store an item, other than a car</li> </ul> <p><pre><code>    class Program\n    {\n        static void Main(string[] args)\n        {\n            Car carOne = new Car();\n            carOne.Make = \"Toyota\";\n            carOne.Model = \"Camry\";\n\n            Car carTwo = new Car();\n            carTwo.Make = \"Nissan\";\n            carTwo.Model = \"Altima\";\n\n            Book bookOne = new Book();\n            bookOne.Author = \"Jane Doe\";\n            bookOne.Title = \"The Great Gatsby\";\n            bookOne.ISBN = \"0-000-00000-0\";\n\n            // ArrayLists are dynamically sized\n            // Support features like sorting, adding, and removing\n            ArrayList arrayList = new ArrayList();\n            arrayList.Add(carOne);\n            arrayList.Add(carTwo);\n            arrayList.Add(bookOne);\n\n            foreach (Car car in arrayList)\n            {\n                Console.WriteLine(car.Make);\n            }\n\n            Console.ReadLine();\n        }\n    }\n</code></pre> </p> <ul> <li>C# introduced Generic Collections, that requires myself to make it specific by providing the data type within that collection</li> </ul> <p><pre><code>            // List&lt;T&gt;\n            List&lt;Car&gt; myList = new List&lt;Car&gt;();\n            myList.Add(carOne);\n            myList.Add(carTwo);\n            myList.Add(bookOne);\n</code></pre> </p> <ul> <li>Dictionaries contains a key and a definition next to it</li> <li>Neither Make or Model would be appropriate as Dictionary keys, as there could be duplicates and will be duplicates of the same value, instead we can add an additional VIN</li> </ul> <pre><code>Dictionary&lt;string, Car&gt; myDictionary = new Dictionary&lt;string, Car&gt;();\n\nmyDictionary.Add(carOne.VIN, carOne);\nmyDictionary.Add(carTwo.VIN, carTwo);\n\nConsole.WriteLine(myDictionary[\"1\"].Make); // Toyota\n</code></pre> <ul> <li>Initialising a Dictionary at it's creation point with object initialization</li> <li>We've created a new variable called <code>car</code>, we've created a new instance of the <code>Car</code> class within the computer's memory, and then we've populated the Car object at the moment of creation <pre><code>            Car car1 = new Car() {Make = \"Toyota\", Model = \"Camry\", VIN = \"1\" };\n            Car car2 = new Car() { Make = \"Nissan\", Model = \"Altima\", VIN = \"2\" };\n</code></pre></li> </ul> <pre><code>            // Collection initialization\n            List&lt;Car&gt; myList = new List&lt;Car&gt;() {\n                new Car { Make = \"Toyota\", Model = \"Camry\", VIN = \"1\" },\n                new Car { Make = \"Nissan\", Model = \"Altima\", VIN = \"2\" } };\n</code></pre>","tags":["csharp"]},{"location":"Learning/CSharp%20Fundamentals%20for%20Beginners/Working%20with%20Dates%20and%20Times/","title":"Working with Dates and Times","text":"<pre><code>using System.Text;\n\nnamespace Program\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            DateTime myValue = DateTime.Now;\n            // Console.WriteLine(myValue.ToString());\n            // Console.WriteLine(myValue.ToShortDateString());\n            // Console.WriteLine(myValue.ToShortTimeString());\n            // Console.WriteLine(myValue.ToLongDateString());\n            // Console.WriteLine(myValue.ToLongTimeString());\n\n            // Console.WriteLine(myValue.AddDays(1).ToLongDateString());\n            // Console.WriteLine(myValue.AddHours(3).ToLongTimeString());\n            // Console.WriteLine(myValue.AddDays(-3).ToLongTimeString());\n\n            //Console.WriteLine(myValue.Month);\n\n            // DateTime myBirthday = new DateTime(2000, 1, 1);\n            // Console.WriteLine(myBirthday.ToShortDateString());\n\n            DateTime myBirthday = DateTime.Parse(\"01/01/2000\");\n            TimeSpan myAge = DateTime.Now.Subtract(myBirthday);\n            Console.WriteLine(myAge.TotalDays);\n            Console.ReadLine();\n        }\n    }\n}\n</code></pre>","tags":["csharp"]},{"location":"Learning/CSharp%20Fundamentals%20for%20Beginners/Working%20with%20LINQ%20%28Language%20Integrated%20Query%29%20Syntax/","title":"Working with LINQ (Language Integrated Query) Syntax","text":"<pre><code>            List&lt;Car&gt; myCars = new List&lt;Car&gt;()\n            {\n                new Car() {VIN=\"A1\", Make=\"BMW\", Model=\"550i\", Year=2016, StickerPrice=55000.00 },\n                new Car() {VIN=\"B2\", Make=\"Toyota\", Model=\"4Runner\", Year=2016, StickerPrice=35000.00 },\n                new Car() {VIN=\"C3\", Make=\"BMW\", Model=\"745li\", Year=2020, StickerPrice=25000.00 },\n                new Car() {VIN=\"D4\", Make=\"Ford\", Model=\"Escape\", Year=2018, StickerPrice=32000.00 },\n                new Car() {VIN=\"E5\", Make=\"Nissan\", Model=\"Rogue\", Year=2015, StickerPrice=38000.00 }\n            };\n</code></pre> <ul> <li> <p>Language Integrated Query - Query Syntax <pre><code>            var bmws = from car in myCars\n                       where car.Make == \"BMW\"\n                       &amp;&amp; car.Year == 2016\n                       select car;\n</code></pre> <pre><code>BMW 550i A1\n</code></pre></p> </li> <li> <p>Language Integrated Query - Method Syntax <pre><code>var bmws = myCars.Where(p =&gt; p.Make == \"BMW\" &amp;&amp; p.Year == 2016);\n</code></pre> <pre><code>BMW 550i A1\n</code></pre></p> </li> <li>Above is similar to a mini method that returns any true values into the <code>var</code> <code>bmws</code></li> <li>var does not mean the same as JavaScript</li> <li>In C#, this tells the complier to figure out what the type is at point of compile</li> </ul> <p><pre><code>            var orderedCars = from car in myCars\n                              orderby car.Year descending   \n                              select car;\n\n\n\n            foreach (var car in orderedCars)\n            {\n                Console.WriteLine(\"{0} {1} {2} {3}\",car.Year, car.Make, car.Model, car.VIN);\n            }   \n</code></pre> <pre><code>2020 BMW 745li C3\n2018 Ford Escape D4\n2016 BMW 550i A1\n2016 Toyota 4Runner B2\n2015 Nissan Rogue E5\n</code></pre></p> <p><pre><code>var orderedCars = myCars.OrderByDescending(p =&gt; p.Year);\n</code></pre> <pre><code>2020 BMW 745li C3\n2018 Ford Escape D4\n2016 BMW 550i A1\n2016 Toyota 4Runner B2\n2015 Nissan Rogue E5\n</code></pre></p> <p><pre><code>            var firstBMW = myCars.First(p =&gt; p.Make == \"BMW\");\n            Console.WriteLine(firstBMW.VIN);\n</code></pre> <pre><code>A1\n</code></pre></p> <p><pre><code>            var firstBMW = myCars.OrderByDescending(p =&gt; p.Year).First(p =&gt; p.Make == \"BMW\");\n            Console.WriteLine(firstBMW.VIN);\n</code></pre> <pre><code>C3\n</code></pre></p> <p><pre><code>Console.WriteLine(myCars.TrueForAll(p =&gt; p.Year &gt; 2012)); // True\n</code></pre> <pre><code>Console.WriteLine(myCars.TrueForAll(p =&gt; p.Year &gt; 2020)); // False\n</code></pre> <pre><code>myCars.ForEach(i =&gt; Console.WriteLine(\"{0} {1}\",i.Make, i.Model));\n</code></pre> <pre><code>BMW 550i\nToyota 4Runner\nBMW 745li\nFord Escape\nNissan Rogue\n</code></pre></p> <p><pre><code>myCars.ForEach(i =&gt; Console.WriteLine(\"{0} {1} {2:C}\",i.Make, i.Model, i.StickerPrice));\n</code></pre> <pre><code>BMW 550i \u00a355,000.00\nToyota 4Runner \u00a335,000.00\nBMW 745li \u00a325,000.00\nFord Escape \u00a332,000.00\nNissan Rogue \u00a338,000.00\n</code></pre></p> <p><pre><code>            myCars.ForEach(i =&gt; i.StickerPrice -= 3000);\n            myCars.ForEach(i =&gt; Console.WriteLine(\"{0} {1} {2:C}\",i.Make, i.Model, i.StickerPrice));\n</code></pre> <pre><code>BMW 550i \u00a352,000.00\nToyota 4Runner \u00a332,000.00\nBMW 745li \u00a322,000.00\nFord Escape \u00a329,000.00\nNissan Rogue \u00a335,000.00\n</code></pre></p> <p><pre><code>Console.WriteLine(myCars.Exists(i =&gt; i.Model == \"Rogue\")); // True\n</code></pre> <pre><code>Console.WriteLine(myCars.Sum(i =&gt; i.StickerPrice)); // 185000\n</code></pre></p> <p><pre><code>            Console.WriteLine(myCars.GetType());\n            var orderedCars = myCars.OrderByDescending(p =&gt; p.Year);\n            Console.WriteLine(orderedCars.GetType());\n</code></pre> <pre><code>System.Collections.Generic.List`1[Program.Car]\nSystem.Linq.OrderedEnumerable`2[Program.Car,System.Int32]\n</code></pre></p> <p><pre><code>            Console.WriteLine(myCars.GetType());\n            var orderedCars = myCars.OrderByDescending(p =&gt; p.Year);\n            Console.WriteLine(orderedCars.GetType());\n\n            var bmws = myCars.Where(p =&gt; p.Make == \"BMW\");\n            Console.WriteLine(bmws.GetType());\n</code></pre> <pre><code>System.Collections.Generic.List`1[Program.Car]\nSystem.Linq.OrderedEnumerable`2[Program.Car,System.Int32]\nSystem.Linq.Enumerable+WhereListIterator`1[Program.Car]\n</code></pre></p> <ul> <li> <p>The var keyword helps us create complex queries without worrying about the data types that are returned</p> </li> <li> <p>A projection can be made that in our example, can take certain values or certain properties of a car, projecting them into a new datatype, without being defined and as a anonymous type </p> </li> </ul> <p><pre><code>            var newCars = from car in myCars\n                       where car.Make == \"BMW\"\n                       &amp;&amp; car.Year == 2016\n                       select new { car.Make, car.Model };\n\n            Console.WriteLine(newCars.GetType());\n</code></pre> <pre><code>System.Linq.Enumerable+WhereSelectListIterator`2[Program.Car,&lt;&gt;f__AnonymousType0`2[System.String,System.String]]\n</code></pre></p> <ul> <li>There is a lot going on under the bonnet with LINQ, but defining the types with <code>var</code> helps massively as the datatype might be extreamly long as seen in the example above</li> </ul>","tags":["csharp","LINQ"]},{"location":"Learning/CSharp%20Fundamentals%20for%20Beginners/Working%20with%20Strings/","title":"Working with Strings","text":"<ul> <li><code>\\</code> can be used to escape sequences into literal strings</li> <li><code>\\n</code> can be used to create a new line</li> <li><code>\\\\</code> can be used to use an actual  within the string, escaping it immediately</li> <li><code>@</code> in front of the string ensures C# understands we want to use the \\ characters</li> <li><code>{0}</code> can be used as replacement code to be replaced by a value at the end of the string</li> <li><code>{O:C}</code> will be replaced with a currency value</li> <li><code>{0:N}</code> will add in decimal points and commas to show a number in an easier to read format</li> <li><code>{0:P}</code> will show the value as a percentage</li> <li>Custom formats can also be used such as <code>{0: (###) ###-####}</code> as an example for an American phone number</li> </ul> <pre><code>using System.Text;\n\nnamespace Program\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            // string myString = \"My \\\"so-called\\\" life \";\n            // string myString = \"What if I need a\\n new line?\";\n            // string myString = \"Go to your C:\\\\ drive\";\n            // string myString = @\"Go to your C:\\ drive\";\n            // string myString = String.Format(\"{0} = {0}\", \"First\", \"Second\");\n            // string myString = string.Format(\"{0:C}\", 123.45);\n            // string myString = string.Format(\"{0:N}\", 12312313123123);\n            // string myString = string.Format(\"{0:P}\", .123);\n            // string myString = string.Format(\"Phone Number: {0:(###) ###-####}\", 1234567899);\n\n            // string myString = \" That summer we took threes across the board  \";\n            // myString = myString.Substring(6, 14);\n            // myString = myString.ToUpper();\n            // myString = myString.Replace(\" \", \"--\");\n            // myString = myString.Remove(6, 14);\n            /*myString = String.Format(\"Length before: {0} -- Length after: {1}\",\n                myString.Length, myString.Trim().Length);\n            */\n\n            /*\n            string myString = \"\";\n            for (int i = 0; i &lt; 100; i++) \n            {\n                myString += \"--\" + i.ToString();\n            }\n            */\n\n            StringBuilder myString = new StringBuilder();\n\n            for (int i = 0; i &lt; 100; i++) \n            {\n                myString.Append(\"--\");\n                myString.Append(i);\n            }\n\n\n\n            Console.WriteLine(myString);\n            Console.ReadLine();\n        }\n    }\n}\n</code></pre>","tags":["csharp"]},{"location":"Learning/Complete%20CSharp%20Unity%20Game%20Developer%203D/Audio%20Introduction/","title":"Audio Introduction","text":"<ul> <li>Audio File - The sound that gets played</li> <li>Audio Source - To 'play' the audio</li> <li> <p>Audio Listener - To 'hear' the audio</p> </li> <li> <p>Listener is normally always on the main camera</p> </li> </ul> <p> </p> <pre><code>AudioSource audioSource;\n\nvoid start()\n{\n    audioSource = GetComponent&lt;AudioSource&gt;();\n}\n</code></pre> <pre><code> private void ProcessThrust()\n {\n     if (Input.GetKey(KeyCode.Space))\n     {\n         rb.AddRelativeForce(Vector3.up * mainThrust * Time.deltaTime);\n         if (!audioSource.isPlaying)\n         {\n             audioSource.Play();\n         }\n\n     }\n     else\n     {\n         audioSource.Stop();\n     }\n\n }\n</code></pre>","tags":["csharp","Unity","audio"]},{"location":"Learning/Complete%20CSharp%20Unity%20Game%20Developer%203D/Basic%20Collisions/","title":"Basic Collisions","text":"<ul> <li>Rigid body gives mass to an object</li> </ul>","tags":["csharp","Collision","Unity"]},{"location":"Learning/Complete%20CSharp%20Unity%20Game%20Developer%203D/Basic%20Input%20Binding/","title":"Basic Input Binding","text":"<pre><code>using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class Movement : MonoBehaviour\n{\n    // Start is called before the first frame update\n    void Start()\n    {\n\n    }\n\n    // Update is called once per frame\n    void Update()\n    {\n        ProcessThrust();\n        ProcessRotation();\n    }\n\n    private void ProcessThrust()\n    {\n        if (Input.GetKey(KeyCode.Space))\n        {\n            Debug.Log(\"Space Key - Thrust\");\n        }\n\n    }\n\n    private void ProcessRotation()\n    {\n        if (Input.GetKey(KeyCode.A))\n        {\n            Debug.Log(\"A - Rotate Left\");\n        }\n        else if (Input.GetKey(KeyCode.D))\n        {\n            Debug.Log(\"D - Rotate Right\");\n        }\n    }\n}\n</code></pre>","tags":["csharp","Unity","input","binding"]},{"location":"Learning/Complete%20CSharp%20Unity%20Game%20Developer%203D/Bool%20Variable%20for%20State/","title":"Bool Variable for State","text":"<pre><code>    bool isTransitioning;\n</code></pre> <pre><code>    private void OnCollisionEnter(Collision collision)\n    {\n        if (isTransitioning) { return; }\n\n        switch (collision.gameObject.tag)\n        {\n            case \"Friendly\":\n                Debug.Log(\"Friendly collision\");\n                break;\n            case \"Finish\":\n                StartSuccessSequence();\n                break;\n            default:\n                StartCrashSequence();\n                break;\n        }\n    }\n</code></pre> <pre><code>    void StartSuccessSequence()\n    {\n        isTransitioning = true;\n        audioSource.Stop();\n        // ToDo - Add particle effects\n        audioSource.PlayOneShot(onSuccess);\n        GetComponent&lt;Movement&gt;().enabled = false;\n        Invoke(\"LoadNextLevel\", levelLoadDelay);\n    }\n</code></pre> <ul> <li>As we're resetting the scene on each sequence, we do not have to worry about resetting the isTransitioning to false as first initially set, if we weren't resetting the scene we would have to set this back to false.</li> </ul>","tags":["csharp","Unity","state"]},{"location":"Learning/Complete%20CSharp%20Unity%20Game%20Developer%203D/Caching%20a%20Reference/","title":"Caching a Reference","text":"<ul> <li>Caching is a technique of storing frequently used data/information in memory, so that it can easily be accessed when needed.</li> </ul> <pre><code>using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class Dropper : MonoBehaviour\n\n{\n    MeshRenderer renderer;\n    Rigidbody rigidbody;\n\n    [SerializeField] float timeElapsed = 5f;\n\n\n    // Start is called before the first frame update\n    void Start()\n    {\n        renderer = GetComponent&lt;MeshRenderer&gt;();\n        rigidbody = GetComponent&lt;Rigidbody&gt;();\n\n        renderer.enabled = false;\n        rigidbody.useGravity = false;\n    }\n\n    // Update is called once per frame\n    void Update()\n    {\n        if (Time.time &gt; timeElapsed)\n        {\n            renderer.enabled = true;\n            rigidbody.useGravity = true;\n        }\n    }\n}\n</code></pre>","tags":["csharp","Unity","caching"]},{"location":"Learning/Complete%20CSharp%20Unity%20Game%20Developer%203D/Cinemachine%20Follow%20Camera/","title":"Cinemachine Follow Camera","text":"<ul> <li>Manage multiple camera in our scene</li> <li>Easily create rules for our cameras</li> </ul>","tags":["csharp","Cinemachine","Unity"]},{"location":"Learning/Complete%20CSharp%20Unity%20Game%20Developer%203D/Incrementing%20a%20Score/","title":"Incrementing a Score","text":"","tags":["csharp","Unity"]},{"location":"Learning/Complete%20CSharp%20Unity%20Game%20Developer%203D/Input.GetAxis%28%29/","title":"Input.GetAxis()","text":"<p> <pre><code>using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class Mover : MonoBehaviour\n{\n\n    // Start is called before the first frame update\n    void Start()\n    {\n\n    }\n\n    // Update is called once per frame\n    void Update()\n    {\n        float xValue = Input.GetAxis(\"Horizontal\");\n        float zValue = Input.GetAxis(\"Vertical\");\n        transform.Translate(xValue, 0, zValue);\n    }\n}\n</code></pre></p>","tags":["csharp","Unity"]},{"location":"Learning/Complete%20CSharp%20Unity%20Game%20Developer%203D/Introduction%20to%20Classes/","title":"Introduction to Classes","text":"<ul> <li>Classes are used to organise our code</li> <li>Classes are \"containers\" for variables and methods that allow us to group similar things together</li> <li> <p>Usually we aim for a class to do one main thing and not multiple things</p> <ul> <li>Easier to read our code</li> <li>Easier to fix issues</li> <li>Easier to have multiple people work on a project</li> </ul> </li> <li> <p>We tend to create a new class each time we create a new script</p> <ul> <li>Movement</li> <li>CollisionHandler</li> <li>Shooting</li> <li>Scoring</li> <li>EnemyAI</li> </ul> </li> </ul>","tags":["csharp","Unity"]},{"location":"Learning/Complete%20CSharp%20Unity%20Game%20Developer%203D/Introduction%20to%20Classes/#encapsulating-our-code","title":"Encapsulating our Code","text":"<ul> <li>\"need to know\" level of access</li> <li>E.g Don't let everything access everything else</li> <li>Only methods in our Movement class can alter our player's movement speed</li> </ul>","tags":["csharp","Unity"]},{"location":"Learning/Complete%20CSharp%20Unity%20Game%20Developer%203D/Introduction%20to%20Classes/#classes-already-built-for-us","title":"Classes already built for us","text":"<ul> <li>Unity has many classes already created</li> <li>We write the class name then use the dot operator to access things within that class</li> <li></li> </ul>","tags":["csharp","Unity"]},{"location":"Learning/Complete%20CSharp%20Unity%20Game%20Developer%203D/Introduction%20to%20Method/","title":"Introduction to Method","text":"<pre><code>void CleanYourRoom()\n{\n    Things to do;\n}\n</code></pre> <ul> <li><code>void</code> is the return value - void = return nothing</li> <li><code>CleanYourRoom</code> is the function name</li> <li> <p><code>()</code> is the parameter - () = nothing required</p> </li> <li> <p>We can ask for some information to be RETURNED</p> </li> <li> <p>We can specify parameters, which are requirements for the function to run</p> </li> <li> <p>Parameter is the argument we would be passing into it</p> </li> <li>The return is data we're returning from the function</li> </ul> <pre><code>bool CleanYourRoom(int time)\n{\n    Things To Do;\n    Dealine = time;\n    return false;\n}\n</code></pre> <ul> <li>Start() and Update() are called by Unity's internal logic which is taking care of calling them for us at the right time</li> <li>Start() and Update() are referred to as callbacks</li> </ul> <pre><code>    void Start()\n   {\n       PrintInstructions();\n   }\n\n    void PrintInstructions()\n    {\n        Debug.Log(\"Welcome to the game\");\n        Debug.Log(\"Move with WASD or arrow keys\");\n        Debug.Log(\"Don't hit the walls\");\n    }\n</code></pre> <p></p>","tags":["csharp","Unity"]},{"location":"Learning/Complete%20CSharp%20Unity%20Game%20Developer%203D/Obstacle%20hitting%20bug/","title":"Obstacle hitting bug","text":"<ul> <li>When we push a particular key, we're forcing the rotation</li> <li>When hitting another object in the world, the physics system takes over and causes conflicts</li> </ul> <pre><code>    private void ApplyRotation(float rotationThisFrame)\n    {\n        rb.freezeRotation = true; // Freezing rotation so we can manually rotate\n        transform.Rotate(Vector3.forward * rotationThisFrame * Time.deltaTime);\n        rb.freezeRotation = false; // Unfreezing rotation so the physics system can take over\n    }\n</code></pre>","tags":["csharp","Unity"]},{"location":"Learning/Complete%20CSharp%20Unity%20Game%20Developer%203D/Order%20of%20Variables/","title":"Order of Variables","text":"<ul> <li>PARAMETERS - for tuning, typically set in the editor</li> <li>CACHE - references for readability or speed</li> <li>STATE - private instance (member) variables</li> </ul>","tags":["csharp","Unity","variables"]},{"location":"Learning/Complete%20CSharp%20Unity%20Game%20Developer%203D/Rotate%20an%20Object/","title":"Rotate an Object","text":"<pre><code>using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class Spinner : MonoBehaviour\n{\n\n    [SerializeField] float rotationSpeed = 100f;\n    Transform spinner;\n\n    // Update is called once per frame\n    void Update()\n    {\n        spinner = GetComponent&lt;Transform&gt;();\n        spinner.Rotate(0, Time.deltaTime * rotationSpeed, 0);\n    }\n}\n</code></pre>","tags":["csharp","Unity"]},{"location":"Learning/Complete%20CSharp%20Unity%20Game%20Developer%203D/SceneManager/","title":"SceneManager","text":"","tags":["csharp","Unity","SceneManager"]},{"location":"Learning/Complete%20CSharp%20Unity%20Game%20Developer%203D/SceneManager/#respawn","title":"Respawn","text":"<p><pre><code>using UnityEngine;\nusing UnityEngine.SceneManagement;\n\npublic class CollisionHandler : MonoBehaviour\n\n\n{\n    private void OnCollisionEnter(Collision collision)\n    {\n        switch (collision.gameObject.tag)\n        {\n            case \"Friendly\":\n                Debug.Log(\"Friendly collision\");\n                break;\n            case \"Finish\":\n                Debug.Log(\"Finish collision\");\n                ReloadLevel();\n                break;\n            case \"Fuel\":\n                Debug.Log(\"Fuel collision\");\n                break;\n            default:\n                ReloadLevel();\n                break;\n        }\n    }\n\n    void ReloadLevel()\n    {\n        int currentSceneIndex = SceneManager.GetActiveScene().buildIndex;\n        SceneManager.LoadScene(currentSceneIndex);\n    }\n}\n</code></pre> </p>","tags":["csharp","Unity","SceneManager"]},{"location":"Learning/Complete%20CSharp%20Unity%20Game%20Developer%203D/SceneManager/#load-next-level","title":"Load Next Level","text":"","tags":["csharp","Unity","SceneManager"]},{"location":"Learning/Complete%20CSharp%20Unity%20Game%20Developer%203D/Start%28%29%20and%20Update%28%29/","title":"Start() and Update()","text":"<ul> <li>Anything within Start() when the script first comes to life and will only be completed once</li> <li> <p>Update() controls a script that will be ran each for each frame in the game</p> </li> <li> <p><code>transform</code> is accessing the transform of the game object we're currently on</p> </li> <li><code>Translate</code> is a built in Unity method </li> </ul> <pre><code>    void Start()\n    {\n        transform.Translate(1, 0, 0);\n    }\n</code></pre> <ul> <li>Moving this to update would run the script above would run on every frame</li> </ul>","tags":["csharp","Unity"]},{"location":"Learning/Complete%20CSharp%20Unity%20Game%20Developer%203D/Switch%20Statements/","title":"Switch Statements","text":"<ul> <li>Switch statements are a conditional like if/else statements</li> <li>Switch statements allow us to compare a single variable to a series of constants</li> </ul> <pre><code>using UnityEngine;\n\npublic class CollisionHandler : MonoBehaviour\n{\n    private void OnCollisionEnter(Collision collision)\n    {\n        switch (collision.gameObject.tag)\n        {\n            case \"Friendly\":\n                Debug.Log(\"Friendly collision\");\n                break;\n            case \"Finish\":\n                Debug.Log(\"Finish collision\");\n                break;\n            case \"Fuel\":\n                Debug.Log(\"Fuel collision\");\n                break;\n            default:\n                Debug.Log(\"Enemy collision\");\n                break;\n        }\n    }\n}\n</code></pre>","tags":["csharp","Unity","Switch"]},{"location":"Learning/Complete%20CSharp%20Unity%20Game%20Developer%203D/Time.deltaTime/","title":"Time.deltaTime","text":"<p> * Depending on CPU speed, this changes how quick the <code>Update()</code> class runs * Using <code>Time.deltaTime</code>, Unity can tell us how long each frame took to execute * When we multiply something by <code>Time.deltaTime</code>, it makes our game \"frame rate independent\" * The game will behave the same on any PC</p> <pre><code>using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class Mover : MonoBehaviour\n{\n\n    [SerializeField] float moveSpeed = 10f;\n\n    // Start is called before the first frame update\n    void Start()\n    {\n\n    }\n\n    // Update is called once per frame\n    void Update()\n    {\n        float xValue = Input.GetAxis(\"Horizontal\") * Time.deltaTime * moveSpeed;\n        float zValue = Input.GetAxis(\"Vertical\") * Time.deltaTime * moveSpeed;\n        transform.Translate(xValue, 0, zValue);\n    }\n}\n</code></pre>","tags":["csharp","deltaTime","Unity"]},{"location":"Learning/Complete%20CSharp%20Unity%20Game%20Developer%203D/Using%20GetComponent/","title":"Using GetComponent","text":"<pre><code>using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class ObjectHit : MonoBehaviour\n{\n    private void OnCollisionEnter(Collision collision)\n    {\n        Debug.Log(collision.gameObject.name + \" bumped into a wall.\");\n        GetComponent&lt;MeshRenderer&gt;().material.color = Color.red; // &lt;--- Change the color of the cube&gt;\n    }\n}\n</code></pre>","tags":["csharp","Unity"]},{"location":"Learning/Complete%20CSharp%20Unity%20Game%20Developer%203D/Using%20Invoke/","title":"Using Invoke","text":"<ul> <li>Using Invoke() allows us to call a method so it executes after a delay of x seconds</li> <li>Invoke(\"MethodName\", delayInSeconds);</li> </ul> <pre><code>using UnityEngine;\nusing UnityEngine.SceneManagement;\n\npublic class CollisionHandler : MonoBehaviour\n\n\n{\n\n    [SerializeField] float levelLoadDelay = 2f;\n\n    private void OnCollisionEnter(Collision collision)\n    {\n        switch (collision.gameObject.tag)\n        {\n            case \"Friendly\":\n                Debug.Log(\"Friendly collision\");\n                break;\n            case \"Finish\":\n                StartSuccessSequence();\n                break;\n            default:\n                StartCrashSequence();\n                break;\n        }\n    }\n\n    void StartSuccessSequence()\n    {\n        // ToDo - Add particle effects\n        // ToDo - Add sound effects\n        GetComponent&lt;Movement&gt;().enabled = false;\n        Invoke(\"LoadNextLevel\", levelLoadDelay);\n    }\n\n    void StartCrashSequence()\n    {\n        // ToDo - Add particle effects\n        // ToDo - Add sound effects\n        GetComponent&lt;Movement&gt;().enabled = false;\n        Invoke(\"ReloadLevel\", levelLoadDelay);\n    }\n\n    void LoadNextLevel()\n    {\n        int currentSceneIndex = SceneManager.GetActiveScene().buildIndex;\n        int nextSceneIndex = currentSceneIndex + 1;\n        if (nextSceneIndex == SceneManager.sceneCountInBuildSettings)\n        {\n            nextSceneIndex = 0;\n        }\n            SceneManager.LoadScene(nextSceneIndex);\n    }\n\n    void ReloadLevel()\n    {\n        int currentSceneIndex = SceneManager.GetActiveScene().buildIndex;\n        SceneManager.LoadScene(currentSceneIndex);\n    }\n}\n</code></pre>","tags":["csharp","Unity","Invoke"]},{"location":"Learning/Complete%20CSharp%20Unity%20Game%20Developer%203D/Using%20OnCollisionEnter%28%29/","title":"Using OnCollisionEnter()","text":"<pre><code>    private void OnCollisionEnter(Collision collision)\n    {\n        Debug.Log(\"I collided with \" + collision.gameObject.name);\n    }\n</code></pre> <ul> <li>Collision is the type of variable that <code>collision will be</code></li> <li>When a player bumps into the wall, we're calling OnCollisionEnter and asking for the information of who collided with me</li> </ul>","tags":["csharp","OnCollisionEnter","Unity"]},{"location":"Learning/Complete%20CSharp%20Unity%20Game%20Developer%203D/Using%20SerializedField/","title":"Using SerializedField","text":"<ul> <li>Changing a value in the inspector doesn't change the value within the script</li> </ul> <pre><code>using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class Mover : MonoBehaviour\n{\n    [SerializeField] float xValue = 0.00f;\n    [SerializeField] float yValue = 0.00f;\n    [SerializeField] float zValue = 0.00f;\n\n    // Start is called before the first frame update\n    void Start()\n    {\n\n    }\n\n    // Update is called once per frame\n    void Update()\n    {\n        transform.Translate(xValue, yValue, zValue);\n    }\n}\n</code></pre>","tags":["csharp","SerializedField","Unity"]},{"location":"Learning/Complete%20CSharp%20Unity%20Game%20Developer%203D/Using%20Tags/","title":"Using Tags","text":"<pre><code>using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class Scorer: MonoBehaviour\n{\n    int score = 0;\n    private void OnCollisionEnter(Collision collision)\n    {\n        if (collision.gameObject.tag != \"Hit\")\n        {\n        score++;\n        Debug.Log(\"Obstacle Hits: \" + score);\n        }\n    }\n}\n</code></pre> <pre><code>using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class ObjectHit : MonoBehaviour\n{\n    private void OnCollisionEnter(Collision collision)\n    {\n        if (collision.gameObject.tag == \"Player\")\n        {\n            // Debug.Log(collision.gameObject.name + \" bumped into a wall.\");\n            GetComponent&lt;MeshRenderer&gt;().material.color = Color.red; // &lt;--- Change the color of the cube&gt;\n            gameObject.tag = \"Hit\";\n        }\n    }\n}\n</code></pre>","tags":["csharp","Tags","Unity"]},{"location":"Learning/Complete%20CSharp%20Unity%20Game%20Developer%203D/Using%20time.time/","title":"Using time.time","text":"<ul> <li>Problem<ul> <li>Make an object fall after x seconds has passed</li> </ul> </li> <li>Solution<ul> <li>A timer - time.time</li> <li>A mechanism to do a thing if x seconds has elapsed - if statement</li> <li>A way to start the object falling - (enable/disable gravity)</li> <li></li> </ul> </li> </ul>","tags":["csharp","timers","Unity"]},{"location":"Learning/Complete%20CSharp%20Unity%20Game%20Developer%203D/Variables/","title":"Variables","text":"<ul> <li>Variables are like boxes</li> <li>Variables help us store, manipulate and refer to information</li> <li>Each variable has a name</li> <li>Each variable contains data</li> <li>Each variable is of a particular type</li> </ul> <pre><code>int hitPoints = 20;\nfloat speed = 3.8f;\nbool isAlive = true;\nstring myName = \"Rick\";\n</code></pre> <pre><code>using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class Mover : MonoBehaviour\n{\n    float xValue = 0.01f;\n    float yValue = 0.00f;\n    float zValue = 0.00f;\n\n    // Start is called before the first frame update\n    void Start()\n    {\n        transform.Translate(xValue, yValue, zValue);\n    }\n\n    // Update is called once per frame\n    void Update()\n    {\n\n    }\n}\n</code></pre>","tags":["csharp","Unity","variables"]},{"location":"Learning/Complete%20CSharp%20Unity%20Game%20Developer%203D/if%20Statements/","title":"if Statements","text":"<pre><code>using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class Dropper : MonoBehaviour\n\n{\n    [SerializeField] float timeElapsed = 5f;\n\n\n    // Start is called before the first frame update\n    void Start()\n    {\n\n    }\n\n    // Update is called once per frame\n    void Update()\n    {\n        if (Time.time &gt; timeElapsed)\n        {\n            Debug.Log(timeElapsed + \" seconds have passed\");\n        }\n    }\n}\n</code></pre>","tags":["csharp","Unity"]},{"location":"Learning/The%20Complete%20React%20Guide/Avoid%20Intersection%20States/","title":"Avoid Intersection States","text":"<ul> <li>You want to avoid managing the same data with multiple states</li> <li>It makes more sense to lift up the existing state into the parent component, which has both access to the Log component and the Gameboard component</li> <li> <p>We can manage the information that we need for the clicks selected, as well as managing the order of clicks selected within the Log component all from the parent component</p> </li> <li> <p>We want to update the new turns, in front of the old turns, so that the first item in the array is the latest turn.</p> </li> <li>We also want to ensure that when setting the <code>setGameTurns</code> state, that we're doing this correctly with the arrow function.</li> </ul> <p><pre><code>    const handleSelectSquare = (rowIndex, colIndex) =&gt; {\n        setActivePlayer((currentPlayer) =&gt; (currentPlayer === \"X\" ? \"0\" : \"X\"));\n        setGameTurns((prevTurns) =&gt; {\n            let currentPlayer = \"X\";\n            if (prevTurns.length &gt; 0 &amp;&amp; prevTurns[0].player === \"X\") {\n                currentPlayer = \"0\";\n            }\n            const updatedTurns = [\n                { square: { rowIndex, colIndex }, player: currentPlayer },\n                ...prevTurns,\n            ];\n\n            return updatedTurns;\n        });\n    };\n</code></pre> * The above updateState function is ensuring that we're updating state in an immutable way and ensuring that we're not merging the different states.</p>","tags":["intersecting","statements","react","jsx"]},{"location":"Learning/The%20Complete%20React%20Guide/Building%20Blocks%20for%20Tic%20Tac%20Toe%20Project/","title":"Building Blocks for Tic Tac Toe Project","text":"<pre><code>function App() {\n    return (\n        &lt;main&gt;\n            &lt;div id=\"game-container\"&gt;\n                &lt;ol id=\"players\"&gt;\n                    &lt;li&gt;\n                        &lt;span className=\"player-name\"&gt;Player 1&lt;/span&gt;\n                        &lt;span className=\"player-symbol\"&gt;X&lt;/span&gt;\n                    &lt;/li&gt;\n                    &lt;li&gt;\n                        &lt;span className=\"player-name\"&gt;Player 2&lt;/span&gt;\n                        &lt;span className=\"player-symbol\"&gt;0&lt;/span&gt;\n                    &lt;/li&gt;\n                &lt;/ol&gt;\n                GAME BOARD\n            &lt;/div&gt;\n            LOG\n        &lt;/main&gt;\n    );\n}\n\nexport default App;\n</code></pre>","tags":["tic-tac-toe","build","blocks","react","components"]},{"location":"Learning/The%20Complete%20React%20Guide/CSS%20Styling%20and%20Dynamic%20Styling/","title":"CSS Styling and Dynamic Styling","text":"<ul> <li>React requires the use of <code>className</code> to set CSS styles</li> <li>This can be handled both with props and state</li> </ul> <pre><code>import PropTypes from \"prop-types\";\nexport default function TabButton({ children, onSelect, isSelected }) {\n    return (\n        &lt;li&gt;\n            &lt;button className={isSelected ? \"active\" : \"\"} onClick={onSelect}&gt;\n                {children}\n            &lt;/button&gt;\n        &lt;/li&gt;\n    );\n}\n\nTabButton.propTypes = {\n    children: PropTypes.any,\n    onSelect: PropTypes.func,\n    isSelected: PropTypes.bool,\n};\n</code></pre> <pre><code>                    &lt;menu&gt;\n                        &lt;TabButton\n                            isSelected={selectedTopic === \"components\"}\n                            onSelect={() =&gt; handleSelect(\"components\")}\n                        &gt;\n                            Components\n                        &lt;/TabButton&gt;\n                        &lt;TabButton\n                            isSelected={selectedTopic === \"jsx\"}\n                            onSelect={() =&gt; handleSelect(\"jsx\")}\n                        &gt;\n                            JSX\n                        &lt;/TabButton&gt;\n                        &lt;TabButton\n                            isSelected={selectedTopic === \"props\"}\n                            onSelect={() =&gt; handleSelect(\"props\")}\n                        &gt;\n                            Props\n                        &lt;/TabButton&gt;\n                        &lt;TabButton\n                            isSelected={selectedTopic === \"state\"}\n                            onSelect={() =&gt; handleSelect(\"state\")}\n                        &gt;\n                            State\n                        &lt;/TabButton&gt;\n                    &lt;/menu&gt;\n</code></pre> <pre><code>import React from 'react';\n\nexport default function App() {\n\n    const [selected, setSelected] = React.useState();\n\n    const handleClick = () =&gt; {\n        setSelected(true);\n    };\n\n\n    return (\n        &lt;div&gt;\n            &lt;p className={selected ? 'active' : ''}&gt;Style me!&lt;/p&gt;\n            &lt;button onClick={handleClick}&gt;Toggle style&lt;/button&gt;\n        &lt;/div&gt;\n    );\n}\n</code></pre>","tags":["CSS","react","Style","dynamic"]},{"location":"Learning/The%20Complete%20React%20Guide/Component%20Composition%20-%20The%20Special%20Children%20Prop/","title":"Component Composition - The Special Children Prop","text":"<ul> <li>If I pass something between opening component and closing component tags, the content is not output on the page. React doesn't know where to output the code.</li> <li>Even if you're not setting any attributes, React will still continue to give you the <code>props</code> object, it will be pretty empty, but not completely empty.</li> <li> <p>You will always be passed the special built in <code>props.children</code></p> </li> <li> <p>The <code>props.children</code> contains the content between component opening and closing tags, this is used as a value for the special <code>children</code> prop</p> </li> <li> <p>React automatically passes a special prop named <code>children</code> to every custom component</p> </li> <li> <p>The above feature is called Component Composition</p> </li> <li>This approach depends on the exact use-case,</li> <li>On our button approach, Component Composition works well</li> <li> <p>Both approaches work, but comes down to personal preference</p> </li> <li> <p>Children</p> <ul> <li>For components that take a single piece of renderable content, this approach is closer to \"normal HTML usage\"</li> <li>This approach is especially convenient when passing JSX code as a value to another component</li> </ul> </li> <li> <p>Attributes</p> <ul> <li>This approach makes sense if you got multiple smaller pieces of information that must be passed to a component.</li> <li>Adding extra props instead of just wrapping the content with the component tags mean extra work</li> </ul> </li> <li> <p>Both options come down to use-case and personal preferences</p> </li> <li></li> </ul>","tags":["react","components","composition","children","props"]},{"location":"Learning/The%20Complete%20React%20Guide/Concept%20Repetition%20-%20Working%20with%20State/","title":"Concept Repetition - Working with State","text":"<ul> <li>Original <pre><code>import { useState } from \"react\";\n\nconst Player = ({ name, symbol }) =&gt; {\n\n    return (\n        &lt;li&gt;\n            &lt;span className=\"player\"&gt;\n                &lt;span className=\"player-name\"&gt;{name}&lt;/span&gt;\n                &lt;span className=\"player-symbol\"&gt;{symbol}&lt;/span&gt;\n            &lt;/span&gt;\n            &lt;button&gt;Edit&lt;/button&gt;\n        &lt;/li&gt;\n    );\n};\n\nexport default Player;\n</code></pre></li> </ul>","tags":["state","repetition","react","jsx"]},{"location":"Learning/The%20Complete%20React%20Guide/Concept%20Repetition%20-%20Working%20with%20State/#my-edit","title":"My Edit","text":"<pre><code>import { useState } from \"react\";\n\nconst Player = ({ name, symbol }) =&gt; {\n    const [isEditing, setIsEditing] = useState(false);\n    const [playerName, setPlayerName] = useState(name);\n\n    const handleClick = () =&gt; {\n        setIsEditing(!isEditing);\n    };\n\n    const handleSubmit = (event) =&gt; {\n        event.preventDefault();\n        setIsEditing(!isEditing);\n        console.log(playerName);\n    };\n\n    const handleInputChange = (event) =&gt; {\n        setPlayerName(event.target.value);\n    };\n\n    if (isEditing) {\n        return (\n            &lt;li&gt;\n                &lt;form onSubmit={handleSubmit}&gt;\n                    &lt;input\n                        type=\"text\"\n                        value={playerName}\n                        onChange={handleInputChange}\n                    /&gt;\n                    &lt;button type=\"submit\"&gt;Save&lt;/button&gt;\n                &lt;/form&gt;\n            &lt;/li&gt;\n        );\n    }\n\n    return (\n        &lt;li&gt;\n            &lt;span className=\"player\"&gt;\n                &lt;span className=\"player-name\"&gt;{playerName}&lt;/span&gt;\n                &lt;span className=\"player-symbol\"&gt;{symbol}&lt;/span&gt;\n            &lt;/span&gt;\n            &lt;button onClick={() =&gt; handleClick()}&gt;Edit&lt;/button&gt;\n        &lt;/li&gt;\n    );\n};\n\nexport default Player;\n</code></pre>","tags":["state","repetition","react","jsx"]},{"location":"Learning/The%20Complete%20React%20Guide/Concept%20Repetition%20-%20Working%20with%20State/#course-edit","title":"Course Edit","text":"<ul> <li>We're passing the <code>handleEditClick</code> function as a value and not calling the function right away.</li> <li>Calling the <code>setIsEditing</code> function is changing a state, which will cause React to re-execute the whole component and revaluate the JSX code</li> <li>The <code>App</code> component, which is the parent component to <code>Player</code> will not be impacted by the state changes </li> <li> <p>We can store JSX code as a value in variables, so <code>&lt;span className=\"player-name\"&gt;{name}&lt;/span&gt;</code> is being stored in a variable.</p> </li> <li> <p>Whenever you're reusing components, React creates an isolated instance. If the state changes in the first component, the second component is not impacted by this</p> </li> <li> <p>We have a shared component with the same logic, but isolated instances are created</p> </li> <li> <p>The edit button is then replaced with a ternary expression that checks on the isEditingState <code>{isEditing ? \"Save\" : \"Edit\"}</code></p> </li> </ul> <pre><code>import { useState } from \"react\";\n\nconst Player = ({ name, symbol }) =&gt; {\n    const [isEditing, setIsEditing] = useState(false);\n\n    const handleEditClick = () =&gt; {\n        setIsEditing(!isEditing);\n    };\n\n    let playerName = &lt;span className=\"player-name\"&gt;{name}&lt;/span&gt;;\n\n    if (isEditing) {\n        playerName = &lt;input type=\"text\" value={name} required /&gt;;\n    }\n\n    return (\n        &lt;li&gt;\n            &lt;span className=\"player\"&gt;\n                {playerName}\n                &lt;span className=\"player-symbol\"&gt;{symbol}&lt;/span&gt;\n            &lt;/span&gt;\n            &lt;button onClick={handleEditClick}&gt;\n                {isEditing ? \"Save\" : \"Edit\"}\n            &lt;/button&gt;\n        &lt;/li&gt;\n    );\n};\n\nexport default Player;\n</code></pre>","tags":["state","repetition","react","jsx"]},{"location":"Learning/The%20Complete%20React%20Guide/Control%20Structures/","title":"Control Structures","text":"<ul> <li>If statements are typically used to check content that you don't know in advanced</li> </ul> <pre><code>const password = prompt('Your password: ');\n\nif (password === \"Hello\") {\n  console.log(\"Hello works\");\n} else if (password === \"hello\") {\n  console.log(\"hello works\");\n} else {\n  console.log(\"Wrong password/Access Denied\");\n}\n</code></pre> <ul> <li>An important for loop that we use in JavaScript is the for loop while looping through an array</li> <li>For loops are required to execute the same amount of code multiple times</li> </ul> <p><pre><code>const hobbies = [\"Fishing\", \"Sports\", \"Cooking\"];\nfor (const hobby of hobbies) {};\n// Fishing\n// Sports\n// Cooking\n</code></pre> * We're telling JavaScript to make a new const for every item within the array, then execute the code within the curly braces to go through all the elements as often as required. * For our <code>hobbies</code> array, this will go through the functionality 3 times</p>","tags":["control","structures","for","loop","if"]},{"location":"Learning/The%20Complete%20React%20Guide/Creating%20Components/","title":"Creating Components","text":"<ul> <li>Reusable Building Blocks<ul> <li>Create small building blocks &amp; compose the UI from them</li> <li>If needed, reuse a building block in different parts of the UI</li> </ul> </li> <li>Related Coder Lives Together<ul> <li>Related HTML &amp; JS &amp; CSS code is stored together</li> <li>Since JS influences the output, storing JS and HTML together makes sense</li> </ul> </li> <li>Separation of Concerns<ul> <li>Different components handle different data &amp; logic</li> <li>Vastly simplifies the process of working on complex apps</li> </ul> </li> </ul>","tags":["react","components","html","javascript","CSS","Declarative"]},{"location":"Learning/The%20Complete%20React%20Guide/Creating%20Components/#describe-the-target-ui-with-jsx","title":"Describe the target UI with JSX","text":"<ul> <li>JavaScript Syntax Extension</li> <li>Used to describe &amp; create HTML elements in JavaScript in a declarative way.</li> <li>With React, you write declarative code</li> <li>You define the target HTML structure  &amp; UI, not the steps to get there</li> <li>Browsers do not support JSX</li> <li>React projects come with a build process that transforms JSX</li> </ul>","tags":["react","components","html","javascript","CSS","Declarative"]},{"location":"Learning/The%20Complete%20React%20Guide/Creating%20Components/#component-functions-rules","title":"Component Functions Rules","text":"<ul> <li>Names starts with an Uppercase character<ul> <li>The function name must start with an uppercase character</li> <li>Multi-word names should be written in PascalCase (e.g MyHeader)</li> <li>It's recommended to pick a name that describes the UI building block</li> </ul> </li> <li> <p>Returns \"Render able\" Content</p> <ul> <li>The function must return a value that can be rendered (\"displayed on screen\") by React</li> <li>In most cases, return JSX, but allowed to return string, number, boolean, null, arrays</li> </ul> </li> <li> <p>Use the format document command/shortcut in VS code to auto-format your code.</p> </li> <li> <p>This does not just improve readability, but also adds the required wrapping parentheses.</p> </li> <li> <p>React component functions can be used like regular HTML</p> </li> </ul>","tags":["react","components","html","javascript","CSS","Declarative"]},{"location":"Learning/The%20Complete%20React%20Guide/Default%20Prop%20Values/","title":"Default Prop Values","text":"<pre><code>const Tabs = ({ children, buttons, buttonsContainer = \"menu\" }) =&gt; {\n    const ButtonsContainer = buttonsContainer;\n    return (\n        &lt;&gt;\n            &lt;ButtonsContainer&gt;{buttons}&lt;/ButtonsContainer&gt;\n            {children}\n        &lt;/&gt;\n    );\n};\n\nexport default Tabs;\n</code></pre> <ul> <li>By setting defaults, this means that the <code>\"menu\"</code> would still be recognised correctly, meaning the menu elements would still be functionality</li> </ul>","tags":["default","props","values","react","components"]},{"location":"Learning/The%20Complete%20React%20Guide/Defining%20Functions%20Inside%20of%20Functions/","title":"Defining Functions Inside of Functions","text":"<ul> <li>Functions defined within functions cannot be executed outside of that function</li> <li>In our example, <code>greet()</code> is defined within <code>init()</code> and therefore it's scoped to the function. <pre><code>function init() {\n  function greet() {\n    console.log(\"Hello\");\n  }\n\n  greet();\n}\n\ninit();\n</code></pre></li> </ul>","tags":["functions","define"]},{"location":"Learning/The%20Complete%20React%20Guide/Deriving%20State%20From%20Props/","title":"Deriving State From Props","text":"<ul> <li>Instead of updating state in the code below, we're deriving state instead</li> <li><code>gameBoard</code> is a computed value that is derived from the <code>gameTurns</code> state</li> <li>You should manage as little state as needed and derive as much as possible.</li> </ul> <pre><code>const GameBoard = ({ onSelectSquare, turns }) =&gt; {\n    let gameBoard = initialGameBoard;\n\n    for (const turn of turns) {\n        const { square, player } = turn;\n        const { row, col } = square;\n\n        gameBoard[row][col] = player;\n    }\n</code></pre> <pre><code>&lt;GameBoard onSelectSquare={handleSelectSquare} turns={gameTurns} /&gt;\n</code></pre>","tags":["state","props","react","jsx","components"]},{"location":"Learning/The%20Complete%20React%20Guide/Deriving%20and%20Outputting%20Data%20Based%20on%20State/","title":"Deriving and Outputting Data Based on State","text":"<ul> <li> <p>From the default state of \"components\" within the useState, we're able to use the following information to change the state depending on which button was clicked</p> </li> <li> <p>This functions as the data is named in the correct way that we're expecting, matching up with the contents from the button <pre><code>export const EXAMPLES = {\n    components: {\n        title: 'Components',\n        description:\n            'Components are the building blocks of React applications. A component is a self-contained module (HTML + optional CSS + JS) that renders some output.',\n        code: `\nfunction Welcome() {\n  return &lt;h1&gt;Hello, World!&lt;/h1&gt;;\n}`,\n\u00a0 \u00a0 },\n</code></pre></p> </li> </ul> <pre><code>import { CORE_CONCEPTS, EXAMPLES } from \"./data.js\";\n</code></pre> <pre><code>                    &lt;div id=\"tab-content\"&gt;\n                        &lt;h3&gt;{EXAMPLES[selectedTopic].title}&lt;/h3&gt;\n                        &lt;p&gt;{EXAMPLES[selectedTopic].description}&lt;/p&gt;\n                        &lt;pre&gt;\n                            &lt;code&gt;{EXAMPLES[selectedTopic].code}&lt;/code&gt;\n                        &lt;/pre&gt;\n                    &lt;/div&gt;\n</code></pre> <pre><code>import Header from \"./components/Header/Header.jsx\";\nimport CoreConcept from \"./components/CoreConcept/CoreConcept.jsx\";\nimport TabButton from \"./components/TabButton/TabButton.jsx\";\nimport { CORE_CONCEPTS, EXAMPLES } from \"./data.js\";\n\nimport { useState } from \"react\";\n\nfunction App() {\n    const [selectedTopic, setSelectedTopic] = useState(\"components\");\n\n    const handleSelect = (selectedButton) =&gt; {\n        setSelectedTopic(selectedButton);\n    };\n    return (\n        &lt;div&gt;\n            &lt;Header /&gt;\n            &lt;main&gt;\n                &lt;section id=\"core-concepts\"&gt;\n                    &lt;h2&gt;Core Concepts&lt;/h2&gt;\n                    &lt;ul&gt;\n                        &lt;CoreConcept {...CORE_CONCEPTS[0]} /&gt;\n                        &lt;CoreConcept {...CORE_CONCEPTS[1]} /&gt;\n                        &lt;CoreConcept {...CORE_CONCEPTS[2]} /&gt;\n                        &lt;CoreConcept {...CORE_CONCEPTS[3]} /&gt;\n                    &lt;/ul&gt;\n                &lt;/section&gt;\n                &lt;section id=\"examples\"&gt;\n                    &lt;h2&gt;Examples&lt;/h2&gt;\n                    &lt;menu&gt;\n                        &lt;TabButton onSelect={() =&gt; handleSelect(\"components\")}&gt;\n                            Components\n                        &lt;/TabButton&gt;\n                        &lt;TabButton onSelect={() =&gt; handleSelect(\"jsx\")}&gt;\n                            JSX\n                        &lt;/TabButton&gt;\n                        &lt;TabButton onSelect={() =&gt; handleSelect(\"props\")}&gt;\n                            Props\n                        &lt;/TabButton&gt;\n                        &lt;TabButton onSelect={() =&gt; handleSelect(\"state\")}&gt;\n                            State\n                        &lt;/TabButton&gt;\n                    &lt;/menu&gt;\n                    &lt;div id=\"tab-content\"&gt;\n                        &lt;h3&gt;{EXAMPLES[selectedTopic].title}&lt;/h3&gt;\n                        &lt;p&gt;{EXAMPLES[selectedTopic].description}&lt;/p&gt;\n                        &lt;pre&gt;\n                            &lt;code&gt;{EXAMPLES[selectedTopic].code}&lt;/code&gt;\n                        &lt;/pre&gt;\n                    &lt;/div&gt;\n                &lt;/section&gt;\n            &lt;/main&gt;\n        &lt;/div&gt;\n    );\n}\n\nexport default App;\n</code></pre>","tags":["state","data","react","components"]},{"location":"Learning/The%20Complete%20React%20Guide/Destructuring/","title":"Destructuring","text":"<ul> <li>On the right side, they will create a new array</li> <li> <p>On the left side, they will destructure the array <pre><code>const [] = [\"Liam\", \"Frazer\"];\n</code></pre></p> </li> <li> <p>The [] syntax can be used to pull values out of an array.</p> </li> </ul> <pre><code>const [firstName, lastName] = [\"Liam\", \"Frazer\"];\nconsole.log(firstName, lastName)\n</code></pre> <ul> <li>The destructuring syntax also exists for objects, it doesn't just exist for arrays.</li> </ul> <p><pre><code>const { name, age } = { name: \"Liam\", age: 25 };\nconsole.log(name, age); // Liam 25\n</code></pre> * On the right side, this will create an object * On the left side, this will destructure an object. * We have to use the field names that are defined in the object, whereas arrays are pulled out by position.</p> <ul> <li>An alias can also be defined when destructuring the object</li> </ul> <pre><code>const { name: userName, age } = { name: \"Liam\", age: 25 };\nconsole.log(userName, age); // Liam 25\n</code></pre> <ul> <li> <p>The destructuring syntax can also be used in <code>function parameter lists</code> <pre><code>function storeOrder({ id, currency }) {\n  localStorage.setItem('id', id);\n  localStorage.setItem('currency', currency);\n}\n\nconsole.log(storeOrder(({ id: 1, currency: \"USD\" })))\nconsole.log(localStorage)\n</code></pre></p> </li> <li> <p>Instead of accessing the order properties via the <code>dot notation</code> inside the storeOrder function body, you could use the destructuring code above.</p> </li> <li>Instead <code>id</code> and <code>currency</code> are pulled out of the incoming object.</li> <li>storeOrder still only takes one parameter, it does not accept two parameters. Instead, it's one single parameter, an object which then just is destructured internally.</li> </ul>","tags":["destructure","destructuring","arrays","objects","function-parameter"]},{"location":"Learning/The%20Complete%20React%20Guide/Detaching%20DOM%20Rendering%20from%20JSX%20Structure%20with%20Portals/","title":"Detaching DOM Rendering from JSX Structure with Portals","text":"<ul> <li>Technically, it would make more sense for the overlay element to be output directly within a body or a <code>div</code></li> <li>A deeply nested element could be hidden by other elements</li> </ul> <p><pre><code>import { createPortal } from \"react-dom\";\n</code></pre> * The idea is to teleport the HTML code into a different place within the DOM * This wraps the returned JSX and then a second value is passed from the main HTML file</p> <pre><code>    return createPortal(\n        &lt;dialog ref={dialog} className=\"result-modal\" onClose={onReset}&gt;\n            {userLost &amp;&amp; &lt;h2&gt;You lost.&lt;/h2&gt;}\n            {!userLost &amp;&amp; &lt;h2&gt;Your Score: {score}&lt;/h2&gt;}\n            &lt;p&gt;\n                The target time was &lt;strong&gt;{targetTime} seconds.&lt;/strong&gt;\n            &lt;/p&gt;\n            &lt;p&gt;\n                You stopped the timer with{\" \"}\n                &lt;strong&gt;{formattedRemainingTime} seconds left.&lt;/strong&gt;\n            &lt;/p&gt;\n            &lt;form method=\"dialog\" onSubmit={onReset}&gt;\n                &lt;button&gt;Close&lt;/button&gt;\n            &lt;/form&gt;\n        &lt;/dialog&gt;,\n        document.getElementById(\"modal\")\n    );\n</code></pre>","tags":["react","portals"]},{"location":"Learning/The%20Complete%20React%20Guide/Disabling%20Buttons%20Conditionally/","title":"Disabling Buttons Conditionally","text":"<pre><code>&lt;button onClick={() =&gt;  onSelectSquare(rowIndex, colIndex)} disabled={playerSymbol} &gt;\n    {playerSymbol}\n&lt;/button&gt;\n</code></pre> <ul> <li>If <code>playerSymbol</code> is a false value, this means that the <code>disabled</code> prop will not be set</li> <li>If <code>playerSymbol</code> is a true value, which means the symbol has been selected by a player, this then means that the disable option will then be set, preventing the button from being clicked again.</li> </ul>","tags":["buttons","conditional","jsx","react"]},{"location":"Learning/The%20Complete%20React%20Guide/Dynamic%20and%20Conditional%20Styling%20with%20CSS%20files%20and%20CSS%20Classes/","title":"Dynamic and Conditional Styling with CSS files and CSS Classes","text":"<pre><code>className={emailNotValid ? \"invalid\" : undefined}\n</code></pre> <ul> <li>Ternary should be used if the conditional class is not being applied</li> <li> <p>Using <code>false</code> as a className wouldn't work correctly</p> </li> <li> <p>Backticks/template literals can be used to dynamically set multiple styling conditions</p> </li> <li>Hard coded classNames can be applied with dynamically injected values that are based upon conditions</li> </ul> <pre><code>&lt;label className={`label ${emailNotValid ? \"invalid\" : \"\"}`}&gt;\n    Email\n&lt;/label&gt;\n</code></pre>","tags":["react","CSS","conditional","classes","ternarny"]},{"location":"Learning/The%20Complete%20React%20Guide/Exposing%20%20Component%20APIs%20via%20the%20useImperativeHandle%20Hook/","title":"Exposing  Component APIs via the useImperativeHandle Hook","text":"<ul> <li> <p>Majority of the time we will not require the useImperativeHandle hook, but in certain usecases where I require to expose the component to be more stable and usable</p> </li> <li> <p>We're passing the dialog as a value to the ResultModal <pre><code>&lt;ResultModal ref={dialog} targetTime={targetTime} result=\"lost\" /&gt;\n</code></pre></p> </li> <li> <p>Thanks to <code>forwardRef</code> and <code>useImperativeHandle</code> the connection to the object is established <pre><code>const ResultModal = forwardRef(function ResultModal({ result, targetTime }, ref) {\n    const dialog = useRef();\n\n    useImperativeHandle(ref, () =&gt; {\n        return {\n            open() {\n                dialog.current.showModal();\n            },\n        };\n    });\n</code></pre></p> </li> <li> <p>The open method from the <code>useImperativeHandle</code> object is now called <pre><code>    const handleStart = () =&gt; { timer.current = setTimeout(() =&gt; {\n            setTimerExpired(true);\n            dialog.current.open();\n        }, targetTime * 1000);\n\n        setTimerStarted(true);\n    };\n</code></pre></p> </li> <li> <p>We can now use the feature above to create callable functions from inside a component</p> </li> </ul>","tags":["react","APIs","useImperativeHandle","hooks"]},{"location":"Learning/The%20Complete%20React%20Guide/Forwarding%20Props%20to%20Wrapped%20Elements/","title":"Forwarding Props to Wrapped Elements","text":"<ul> <li>This JavaScript feature is called \"Rest property\"</li> <li>This syntax groups all remaining object properties into a new object (named \"props\" in this case)</li> </ul> <pre><code>export default function Section({ title, children, ...props }) {\n    return (\n        &lt;section {...props}&gt;\n            &lt;h2&gt;{title}&lt;/h2&gt;\n            {children}\n        &lt;/section&gt;\n    );\n}\n</code></pre> <ul> <li>All the props that were not manually extracted like <code>title</code> or <code>children</code> in our example, will all be merged into the <code>props</code> element with <code>...props</code> and then spread out again in <code>&lt;section {...props}</code></li> <li>This can be a very useful pattern when building wrapper components</li> <li> <p>We now have a very flexible wrapper component</p> </li> <li> <p>We merge any leftover props into the <code>props</code> object with <code>...props</code></p> </li> <li>Then we can spread the remaining props with <code>button {...props}</code> onto the built in button</li> <li>We just have to ensure, in our example that we use the <code>onClick</code> prop that exists on the built in button</li> </ul> <p><pre><code>                &lt;TabButton\n                    isSelected={selectedTopic === \"components\"}\n                    onClick={() =&gt; handleSelect(\"components\")}\n                &gt;\n</code></pre> <pre><code>        &lt;li&gt;\n            &lt;button className={isSelected ? \"active\" : \"\"} {...props}&gt;\n                {children}\n            &lt;/button&gt;\n        &lt;/li&gt;\n</code></pre></p> <pre><code>    export default function Input({ richText, ...props }) {\n      if (richText) {\n        return &lt;textarea {...props} /&gt;;\n      }\n\n      return &lt;input {...props} /&gt;;\n    }\n</code></pre>","tags":["react","props","forwarding","wrapped","elements","rest"]},{"location":"Learning/The%20Complete%20React%20Guide/Forwarding%20Refs%20to%20Custom%20Components/","title":"Forwarding Refs to Custom Components","text":"<pre><code>    const dialog = useRef(null);\n    &lt;ResultModal ref={dialog} targetTime={targetTime} result=\"lost\" /&gt;\n    export const ResultModal = ({ result, targetTime, ref }) =&gt; {\n\n\n    dialog.current.showModal();\n</code></pre> <ul> <li> <p>We can't forward a ref to another component as it will appear as a prop that doesn't exist</p> </li> <li> <p>We need to use a special function provided by React <pre><code>import { forwardRef } from \"react\";\n\nconst ResultModal = forwardRef(function ResultModal(\n    { result, targetTime },\n    ref\n) {\n    return (\n        &lt;dialog ref={ref} className=\"result-modal\"&gt;\n            &lt;h2&gt;You {result}&lt;/h2&gt;\n            &lt;p&gt;\n                The target time was &lt;strong&gt;{targetTime} seconds.&lt;/strong&gt;\n            &lt;/p&gt;\n            &lt;p&gt;\n                You stopped the timer with &lt;strong&gt;X seconds left.&lt;/strong&gt;\n            &lt;/p&gt;\n            &lt;form method=\"dialog\"&gt;\n                &lt;button&gt;Close&lt;/button&gt;\n            &lt;/form&gt;\n        &lt;/dialog&gt;\n    );\n});\n\nexport default ResultModal;\n</code></pre></p> </li> </ul>","tags":["react","useRef","components"]},{"location":"Learning/The%20Complete%20React%20Guide/How%20Not%20to%20Update%20the%20UI/","title":"How Not to Update the UI","text":"<ul> <li>By default, React components execute only once.</li> <li>You have to \"tell\" React if a Component should be executed again</li> </ul>","tags":["react","function","update"]},{"location":"Learning/The%20Complete%20React%20Guide/How%20Not%20to%20Update%20the%20UI/#how-react-checks-if-ui-updates-are-needed","title":"How React Checks If UI updates are needed","text":"<ul> <li> <p>React compares the old output (\"old JSX Code\") of your component function to the new output (\"new JSX code\") and applies any differences to the actual website UI</p> </li> <li> <p>Updating the UI with a regular value will not work, as the function has already been executed and will not execute again.</p> </li> </ul>","tags":["react","function","update"]},{"location":"Learning/The%20Complete%20React%20Guide/Identifying%20Unnecessary%20State/","title":"Identifying Unnecessary State","text":"<ul> <li>Helper function that sits outside of the App function</li> </ul> <pre><code>const deriveActivePlayer = (gameTurns) =&gt; {\n    let currentPlayer = \"X\";\n    if (gameTurns.length &gt; 0 &amp;&amp; gameTurns[0].player === \"X\") {\n        currentPlayer = \"0\";\n    }\n    return currentPlayer;\n};\n</code></pre> <ul> <li> <p>We're still grabbing the activePlayer, but now we're doing it without managing additional states that we don't have to</p> </li> <li> <p>In React, you want to manage as little or as few states as possible, and then derive as many values as needed</p> </li> </ul>","tags":["state","react","components"]},{"location":"Learning/The%20Complete%20React%20Guide/Lifting%20State%20Up/","title":"Lifting State Up","text":"<ul> <li> <p>We need to know the active player in both the GameBoard component and the Player component</p> </li> <li> <p>Lift the state up to the closest ancestor component that has access to all components that need to work with that state</p> </li> </ul> <pre><code>const [activePlayer, setActivePlayer] = useState(\"X\");\n</code></pre> <pre><code>&lt;GameBoard onSelectSquare={handleSelectSquare} activePlayerSymbol={activePlayer}/&gt;\n</code></pre> <pre><code>const GameBoard = ({ onSelectSquare, activePlayerSymbol }) =&gt; {\n    const [gameBoard, setGameBoard] = useState(initialGameBoard);\n</code></pre> <pre><code>updatedBoard[rowIndex][colIndex] = activePlayerSymbol;\nreturn updatedBoard;\n</code></pre>","tags":["lifting","state","update","components","jsx","react"]},{"location":"Learning/The%20Complete%20React%20Guide/Making%20Components%20reusable%20with%20props/","title":"Making Components reusable with props","text":"<ul> <li>Main advantage of components is that they're reusable</li> <li> <p>You can reuse React components, but you don't have to.</p> </li> <li> <p>Like we can use functions with different data, we can also use components with different data</p> </li> <li> <p>React allows you to pass data to components via a concept called <code>Props</code></p> </li> <li> <p>JSX Code that uses a Component &gt; Set Props &gt; Component &gt; Receive Props &gt; Component Function</p> </li> <li> <p>JSX Code that uses a Component</p> <ul> <li>Set component input data via \"custom HTML attributes (props)\"</li> </ul> </li> <li>Component<ul> <li>Defines internal logic + JSX code that should be rendered</li> </ul> </li> <li> <p>Component Function</p> <ul> <li>Receives props with parameter with configuration data</li> </ul> </li> <li> <p>You're not limited to values when passing props.</p> </li> <li>String/Number/Array/Object</li> <li>props is the name typically chosen</li> <li>Props will be set by React, as React will execute the function, we're using them as HTML elements</li> </ul> <pre><code>                        &lt;CoreConcept\n                            title=\"Components\"\n                            description=\"The Core UI building block.\"\n                            image={componentsImg}\n                        /&gt;\n                        &lt;CoreConcept /&gt;\n                        &lt;CoreConcept /&gt;\n                        &lt;CoreConcept /&gt;\n</code></pre> <pre><code>function CoreConcept(props) {\n    return (\n        &lt;li&gt;\n            &lt;img src={props.image} alt={props.title} /&gt;\n            &lt;h3&gt;{props.title}&lt;/h3&gt;\n            &lt;p&gt;{props.description}&lt;/p&gt;\n        &lt;/li&gt;\n    );\n}\n</code></pre> <p></p> <ul> <li>PropTypes</li> </ul> <pre><code>import PropTypes from \"prop-types\";\n\nCoreConcept.propTypes = {\n    title: PropTypes.string,\n    description: PropTypes.string,\n    image: PropTypes.string,\n};\n</code></pre> <ul> <li> <p>Thanks to props, is that the component is re-usable</p> </li> <li> <p>We can use a shorthand spread operator to pull out all the key value pairs of an object.</p> </li> <li>By using the spread operator, key value pairs of the object can be added as key value pairs to the component as props.</li> </ul> <pre><code>function App() {\n    return (\n        &lt;div&gt;\n            &lt;Header /&gt;\n            &lt;main&gt;\n                &lt;section id=\"core-concepts\"&gt;\n                    &lt;h2&gt;Core Concepts&lt;/h2&gt;\n                    &lt;ul&gt;\n                        &lt;CoreConcept {...CORE_CONCEPTS[0]} /&gt;\n                        &lt;CoreConcept {...CORE_CONCEPTS[1]} /&gt;\n                        &lt;CoreConcept {...CORE_CONCEPTS[2]} /&gt;\n                        &lt;CoreConcept {...CORE_CONCEPTS[3]} /&gt;\n                    &lt;/ul&gt;\n                &lt;/section&gt;\n            &lt;/main&gt;\n        &lt;/div&gt;\n    );\n}\n\nexport default App;\n</code></pre> <ul> <li> <p>The alternative is fine, but you may want to go with a shorter alternative</p> </li> <li> <p>Within the parameter list, we can use object destructuring </p> </li> <li>When using destructuring, JavaScript will match the properties coming out of the object as standalone variables within the function.</li> <li>Object destructuring can be used with either longhand or shorthand objects on the component itself.</li> </ul> <pre><code>function CoreConcept({ image, title, description }) {\n    return (\n        &lt;li&gt;\n            &lt;img src={image} alt={title} /&gt;\n            &lt;h3&gt;{title}&lt;/h3&gt;\n            &lt;p&gt;{description}&lt;/p&gt;\n        &lt;/li&gt;\n    );\n}\n</code></pre>","tags":["react","components","props","reusable","destructuring"]},{"location":"Learning/The%20Complete%20React%20Guide/Making%20Components%20reusable%20with%20props/#default-prop-values","title":"Default prop values","text":"<ul> <li>Sometimes, you'll build components that may receive an optional prop.</li> <li>For example, a custom <code>button</code> component may receive a <code>type</code> prop.</li> <li>So the button component should be usable either with a type being set: <pre><code>&lt;Button type=\"submit\" caption=\"My Button\" /&gt;\n</code></pre></li> <li>Or Without <pre><code>&lt;Button caption=\"My Button\"\n</code></pre></li> <li>To make this component work, you might want to set a default value for the type prop, in case it's not passed.</li> <li>This can easily be achieved since JavaScript supports default values when using object destructuring: <pre><code>export default function Button({ caption, type = \"submit\"}) {\n//caption has no default value, type has a default value of \"submit\"\n}\n</code></pre></li> </ul>","tags":["react","components","props","reusable","destructuring"]},{"location":"Learning/The%20Complete%20React%20Guide/Managing%20State%20and%20Using%20Hooks/","title":"Managing State and Using Hooks","text":"<ul> <li>We cannot use a regular variable for updating the UI</li> <li>We need to tell React we want to update the UI</li> </ul> <p><pre><code>import { useState } from \"react\";\n</code></pre> * This is a React hook, any function starting with <code>use</code> are React Hooks * Hooks are regular functions, but only to be called within Components or other Hooks * <code>useState()</code> must be used within the top level of the component and cannot be called within a Function.</p>","tags":["react","state","hooks","managing"]},{"location":"Learning/The%20Complete%20React%20Guide/Managing%20State%20and%20Using%20Hooks/#rules-of-hooks","title":"Rules of Hooks","text":"<ul> <li>Only call Hooks inside of Component Functions<ul> <li>React Hooks must not be called outside of React component functions</li> </ul> </li> <li> <p>Only call Hooks on the top level</p> <ul> <li>React Hooks must not be called in nested code statements (e.g inside of if-statements)</li> </ul> </li> <li> <p>useState() is the most important function built into React</p> </li> <li> <p>useState does accept an argument, which is the default value you want React to store/use</p> </li> <li> <p><code>useState()</code> contains an Array with two elements</p> </li> <li>It will always be two elements</li> </ul> <pre><code>\u00a0 \u00a0 const [selectedTopic, setSelectedTopic] = useState(\"Please click a button:\");\n</code></pre> <p></p> <ul> <li>Manage data &amp; \"tell\" React to re-execute a component function via React's <code>useState()</code> Hook</li> <li> <p>State updates lead to new state values (as the component function executes again)</p> </li> <li> <p>Calling the <code>setCounter</code> special function within the example above, will then allow the Component where the state is stored to be re-rendered</p> </li> <li> <p>In the example above, counter will be re-created each time the component function executes, this means that we're able to use a const</p> </li> <li> <p>When you call <code>setSelectedTopic</code>, React schedules the state update and then re-executes the Component Function. Therefore, the updated value is only available once the Component Function has been re-rendered.</p> </li> </ul>","tags":["react","state","hooks","managing"]},{"location":"Learning/The%20Complete%20React%20Guide/Outputting%20Dynamic%20Content%20in%20JSX/","title":"Outputting Dynamic Content in JSX","text":"<ul> <li>Static Content<ul> <li>Content that's hardcoded into the JSX code</li> <li>Can't change at runtime</li> </ul> </li> <li> <p>Dynamic Content</p> <ul> <li>Logic that produces the actual value is added to JSX</li> <li>Content/value is derived at runtime</li> </ul> </li> <li> <p>Any JavaScript expression can be added into the JSX code</p> </li> <li>if-statements, for-loops, function definitions and other block statements are not allowed here</li> <li> <p>Only expression that directly produce a value</p> </li> <li> <p>Expressions produce a value</p> </li> <li> <p>Function statements do not produce a value</p> </li> <li> <p>Keeping your JSX code lean is preferred, where you would keep function expressions out of JSX, but only refer to them as their const </p> </li> </ul> <pre><code>    const description = getRandomValue(values);\n\n    return (\n        &lt;header&gt;\n            &lt;img src=\"src/assets/react-core-concepts.png\" alt=\"Stylized atom\" /&gt;\n            &lt;h1&gt;React Essentials&lt;/h1&gt;\n            &lt;p&gt;\n                {description} React concepts you will need for almost any app\n                you are going to build!\n            &lt;/p&gt;\n        &lt;/header&gt;\n    );\n}\n</code></pre>","tags":["react","dynamic","jsx","javascript","expression","statements"]},{"location":"Learning/The%20Complete%20React%20Guide/Outputting%20List%20Data%20Dynamically/","title":"Outputting List Data Dynamically","text":"<ul> <li>Currently in our code, we're manually repeating components, which is against the DRY principles</li> <li>If we remove an entry, this breaks the app as we've still got a manual component being output.</li> <li> <p>It would be better if we dynamically render components depending on how much data there is</p> </li> <li> <p>You can output an array of data within JSX</p> </li> <li>You can also output an array of JSX elements</li> <li> <p>The map item can be used, as the function would now output an item for every item that exists within the array</p> </li> <li> <p>In React, you will often lists of data and often create components from them.</p> </li> <li> <p>Majority of the time you will require the map method to do this.</p> </li> <li> <p>Each child in a list should have a unique key prop.</p> </li> <li>We're not using the key prop, as it will be used by React</li> </ul> <pre><code>                &lt;section id=\"core-concepts\"&gt;\n                    &lt;h2&gt;Core Concepts&lt;/h2&gt;\n                    &lt;ul&gt;\n                        {CORE_CONCEPTS.map((conceptItem) =&gt; (\n                            &lt;CoreConcept\n                                key={conceptItem.title}\n                                {...conceptItem}\n                            /&gt;\n                        ))}\n                    &lt;/ul&gt;\n                &lt;/section&gt;\n</code></pre> <p><pre><code>import React from 'react';\nimport Todo from './Todo'\nimport './styles.css'\n\n// don't remove the export keyword here!\nexport const DUMMY_TODOS = [\n    'Learn React',\n    'Practice React',\n    'Profit!'\n];\n\n// don't change the Component name \"App\"\nexport default function App() {\n    return(\n        &lt;ul&gt;\n            {DUMMY_TODOS.map(todo =&gt; &lt;Todo text={todo} /&gt;)}\n        &lt;/ul&gt;\n    );\n}\n</code></pre> <pre><code>import React from 'react';\n\nexport default function Todo(props) {\n    return &lt;li&gt;{props.text}&lt;/li&gt;;\n}\n</code></pre></p>","tags":["dynamic","react","jsx","output"]},{"location":"Learning/The%20Complete%20React%20Guide/Passing%20Custom%20Arguments%20to%20Event%20Functions/","title":"Passing Custom Arguments to Event Functions","text":"<ul> <li>We'll need to know which button was clicked</li> </ul> <pre><code>import { CORE_CONCEPTS } from \"./data.js\";\nimport Header from \"./components/Header/Header.jsx\";\nimport CoreConcept from \"./components/CoreConcept/CoreConcept.jsx\";\nimport TabButton from \"./components/TabButton/TabButton.jsx\";\n\nfunction App() {\n    const handleSelect = (selectedButton) =&gt; {\n        // selectedButton =&gt; 'components', 'jsx', 'props', 'state'\n        console.log(\"Selected\");\n    };\n    return (\n        &lt;div&gt;\n            &lt;Header /&gt;\n            &lt;main&gt;\n                &lt;section id=\"core-concepts\"&gt;\n                    &lt;h2&gt;Core Concepts&lt;/h2&gt;\n                    &lt;ul&gt;\n                        &lt;CoreConcept {...CORE_CONCEPTS[0]} /&gt;\n                        &lt;CoreConcept {...CORE_CONCEPTS[1]} /&gt;\n                        &lt;CoreConcept {...CORE_CONCEPTS[2]} /&gt;\n                        &lt;CoreConcept {...CORE_CONCEPTS[3]} /&gt;\n                    &lt;/ul&gt;\n                &lt;/section&gt;\n                &lt;section id=\"examples\"&gt;\n                    &lt;h2&gt;Examples&lt;/h2&gt;\n                    &lt;menu&gt;\n                        &lt;TabButton onSelect={handleSelect}&gt;\n                            Components\n                        &lt;/TabButton&gt;\n                        &lt;TabButton onSelect={handleSelect}&gt;JSX&lt;/TabButton&gt;\n                        &lt;TabButton onSelect={handleSelect}&gt;Props&lt;/TabButton&gt;\n                        &lt;TabButton onSelect={handleSelect}&gt;State&lt;/TabButton&gt;\n                    &lt;/menu&gt;\n                &lt;/section&gt;\n            &lt;/main&gt;\n        &lt;/div&gt;\n    );\n}\n\nexport default App;\n</code></pre> <ul> <li>By default in the code above, we are not getting the identify of which button was clicked</li> <li>We will have to control how handleSelect is used.</li> <li>Instead of passing <code>handleSelect</code> as a value, we can instead pass an arrow function to <code>onSelect</code></li> <li>Anonymous arrow functions can be passed like the below</li> </ul> <pre><code>                        &lt;TabButton onSelect={() =&gt; handleSelect()}&gt;\n                            Components\n                        &lt;/TabButton&gt;\n</code></pre> <ul> <li>If you want to define a function that should be executed upon an event, but you also want to control how it's called and what arguments are passed through it</li> </ul> <pre><code>import { CORE_CONCEPTS } from \"./data.js\";\nimport Header from \"./components/Header/Header.jsx\";\nimport CoreConcept from \"./components/CoreConcept/CoreConcept.jsx\";\nimport TabButton from \"./components/TabButton/TabButton.jsx\";\n\nfunction App() {\n    const handleSelect = (selectedButton) =&gt; {\n        // selectedButton =&gt; 'components', 'jsx', 'props', 'state'\n        console.log(selectedButton);\n    };\n    return (\n        &lt;div&gt;\n            &lt;Header /&gt;\n            &lt;main&gt;\n                &lt;section id=\"core-concepts\"&gt;\n                    &lt;h2&gt;Core Concepts&lt;/h2&gt;\n                    &lt;ul&gt;\n                        &lt;CoreConcept {...CORE_CONCEPTS[0]} /&gt;\n                        &lt;CoreConcept {...CORE_CONCEPTS[1]} /&gt;\n                        &lt;CoreConcept {...CORE_CONCEPTS[2]} /&gt;\n                        &lt;CoreConcept {...CORE_CONCEPTS[3]} /&gt;\n                    &lt;/ul&gt;\n                &lt;/section&gt;\n                &lt;section id=\"examples\"&gt;\n                    &lt;h2&gt;Examples&lt;/h2&gt;\n                    &lt;menu&gt;\n                        &lt;TabButton onSelect={() =&gt; handleSelect(\"components\")}&gt;\n                            Components\n                        &lt;/TabButton&gt;\n                        &lt;TabButton onSelect={() =&gt; handleSelect(\"jsx\")}&gt;\n                            JSX\n                        &lt;/TabButton&gt;\n                        &lt;TabButton onSelect={() =&gt; handleSelect(\"props\")}&gt;\n                            Props\n                        &lt;/TabButton&gt;\n                        &lt;TabButton onSelect={() =&gt; handleSelect(\"state\")}&gt;\n                            State\n                        &lt;/TabButton&gt;\n                    &lt;/menu&gt;\n                &lt;/section&gt;\n            &lt;/main&gt;\n        &lt;/div&gt;\n    );\n}\n\nexport default App;\n</code></pre>","tags":["events","functions","custom","arguments","react"]},{"location":"Learning/The%20Complete%20React%20Guide/Passing%20Functions%20as%20values%20to%20Props/","title":"Passing Functions as values to Props","text":"<ul> <li> <p>We want to update content whenever a button is pressed, then we want to show different content depending on which button was pressed</p> </li> <li> <p>In order to set dynamic content, we need to listen for clicks on our custom button</p> </li> <li> <p>Because you must handle the event in the component that also manages the data that should be changed</p> <ul> <li>The \"Dynamic Content\" that should be displayed in this case</li> </ul> </li> <li> <p>Props that receive a function, should start with on</p> </li> <li>This makes it clear that it's set to a function, depending on an event</li> </ul> <pre><code>import { CORE_CONCEPTS } from \"./data.js\";\nimport Header from \"./components/Header/Header.jsx\";\nimport CoreConcept from \"./components/CoreConcept/CoreConcept.jsx\";\nimport TabButton from \"./components/TabButton/TabButton.jsx\";\n\nfunction App() {\n    const handleSelect = () =&gt; {\n        console.log(\"Selected\");\n    };\n    return (\n        &lt;div&gt;\n            &lt;Header /&gt;\n            &lt;main&gt;\n                &lt;section id=\"core-concepts\"&gt;\n                    &lt;h2&gt;Core Concepts&lt;/h2&gt;\n                    &lt;ul&gt;\n                        &lt;CoreConcept {...CORE_CONCEPTS[0]} /&gt;\n                        &lt;CoreConcept {...CORE_CONCEPTS[1]} /&gt;\n                        &lt;CoreConcept {...CORE_CONCEPTS[2]} /&gt;\n                        &lt;CoreConcept {...CORE_CONCEPTS[3]} /&gt;\n                    &lt;/ul&gt;\n                &lt;/section&gt;\n                &lt;section id=\"examples\"&gt;\n                    &lt;h2&gt;Examples&lt;/h2&gt;\n                    &lt;menu&gt;\n                        &lt;TabButton onSelect={handleSelect}&gt;\n                            Components\n                        &lt;/TabButton&gt;\n                        &lt;TabButton onSelect={handleSelect}&gt;JSX&lt;/TabButton&gt;\n                        &lt;TabButton onSelect={handleSelect}&gt;Props&lt;/TabButton&gt;\n                        &lt;TabButton onSelect={handleSelect}&gt;State&lt;/TabButton&gt;\n                    &lt;/menu&gt;\n                &lt;/section&gt;\n            &lt;/main&gt;\n        &lt;/div&gt;\n    );\n}\n\nexport default App;\n</code></pre> <ul> <li> <p>We're passing a pointer at the handleSelect function, passing the function as a value to the onSelect prop, in our custom component, we're passing the function to the onClick prop, which then triggers the original function from the App.jsx file</p> </li> <li></li> </ul>","tags":["props","functions","values","react"]},{"location":"Learning/The%20Complete%20React%20Guide/Project%20Management%20App/","title":"Project Management App","text":"<ol> <li> <p>Add a Projects Sidebar Component <pre><code>// app.jsx\nimport ProjectsSidebar from \"./components/ProjectsSidebar\";\n\nfunction App() {\n    return (\n        &lt;main&gt;\n            &lt;ProjectsSidebar /&gt;\n        &lt;/main&gt;\n    );\n}\n\nexport default App;\n</code></pre> <pre><code>// ProjectSidebar.jsx\nconst ProjectsSidebar = () =&gt; {\n    return (\n        &lt;aside&gt;\n            &lt;h2&gt;Your Projects&lt;/h2&gt;\n            &lt;div&gt;\n                &lt;button&gt;+ Add Project&lt;/button&gt;\n            &lt;/div&gt;\n            &lt;ul&gt;&lt;/ul&gt;\n        &lt;/aside&gt;\n    );\n};\n\nexport default ProjectsSidebar;\n</code></pre></p> </li> <li> <p>Styling the sidebar &amp; button with Tailwind CSS <pre><code>// App.jsx\n\u00a0 \u00a0 \u00a0 \u00a0 &lt;main className=\"h-screen my-8\"&gt;\n</code></pre> <pre><code>//ProjectSidebar.jsx\n        &lt;aside className=\"w-1/3 px-8 py-16 bg-stone-900 text-stone-50 md:w-72 rounded-r-xl\"&gt;\n\n            &lt;h2 className=\"mb-8 font-bold uppercase md:text-xl text-stone-200\"&gt;Your Projects&lt;/h2&gt;\n\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 &lt;button className=\"px-4 py-2 text-xs md:text-base rounded-md bg-stone-700 text-stone-400 hover:bg-stone-600 hover:text-stone-100\"&gt;+ Add Project&lt;/button&gt;\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \n</code></pre></p> </li> <li> <p>Adding the \"New Project\" Component &amp; A Reusable Input Component <pre><code>// Input.jsx\nconst Input = ({ label, textArea, ...props }) =&gt; {\n    return (\n        &lt;p&gt;\n            &lt;label&gt;{label}&lt;/label&gt;\n            {textArea ? &lt;textarea {...props} /&gt; : &lt;input {...props} /&gt;}\n        &lt;/p&gt;\n    );\n};\n\nexport default Input;\n</code></pre> <pre><code>// NewProject.jsx\nimport Input from \"./Input\";\n\nconst NewProject = () =&gt; {\n    return (\n        &lt;div&gt;\n            &lt;menu&gt;\n                &lt;li&gt;\n                    &lt;button&gt;Cancel&lt;/button&gt;\n                &lt;/li&gt;\n                &lt;li&gt;\n                    &lt;button&gt;Save&lt;/button&gt;\n                &lt;/li&gt;\n            &lt;/menu&gt;\n            &lt;div&gt;\n                &lt;Input label=\"Title\" /&gt;\n                &lt;Input label=\"Description\" textArea /&gt;\n                &lt;Input label=\"Due Date\" /&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n    );\n};\n\nexport default NewProject;\n</code></pre></p> </li> <li>Styling Buttons &amp; Inputs with Tailwind CSS <pre><code>// Input.jsx\nconst Input = ({ label, textArea, ...props }) =&gt; {\n    const classes = \"w-full p-1 border-b-2 rounded-sm border-stone-300 bg-stone-200 text-stone-600 focus:outline-none focus:border-stone-600\";\n    return (\n        &lt;p className=\"flex flex-col gap-1 my-4\"&gt;\n            &lt;label className=\"text-sm font-bold uppercase text-stone-500\"&gt;{label}&lt;/label&gt;\n            {textArea ? &lt;textarea className={classes} {...props} /&gt; : &lt;input className={classes} {...props} /&gt;}\n        &lt;/p&gt;\n    );\n};\n\nexport default Input;\n</code></pre></li> <li> <p>Splitting Components to Split JSX &amp; Tailwind Styles (for Higher Reusability) <pre><code>// NoProjectSelected.jsx\nimport noProjectImage from \"../assets/no-projects.png\";\nimport Button from \"./Button\";\nconst NoProjectSelected = () =&gt; {\n    return (\n        &lt;div className=\"mt-24 text-center w-2/3\"&gt;\n            &lt;img src={noProjectImage} alt=\"An empty task list\" className=\"w-16 h-16 object-contain mx-auto\" /&gt;\n            &lt;h2 className=\"text-xl font-bold text-stone-500 my-4\"&gt;No Project Selected&lt;/h2&gt;\n            &lt;p className=\"text-stone-400 mb-4\"&gt;Select a project or start a new one&lt;/p&gt;\n            &lt;p className=\"mt-8\"&gt;\n                &lt;Button&gt;Create New Project&lt;/Button&gt;\n            &lt;/p&gt;\n        &lt;/div&gt;\n    );\n};\n\nexport default NoProjectSelected;\n</code></pre> <pre><code>// Button.jsx\nconst Button = ({ children, ...props }) =&gt; {\n    return (\n        &lt;button className=\"px-4 py-2 text-xs md:text-base rounded-md bg-stone-700 text-stone-400 hover:bg-stone-600 hover:text-stone-100\" {...props}&gt;\n            {children}\n        &lt;/button&gt;\n    );\n};\n\nexport default Button;\n</code></pre> <pre><code>// App.jsx\nimport NewProject from \"./components/NewProject\";\nimport NoProjectSelected from \"./components/NoProjectSelected\";\nimport ProjectsSidebar from \"./components/ProjectsSidebar\";\n\nfunction App() {\n    return (\n        &lt;main className=\"h-screen my-8 flex gap-8\"&gt;\n            &lt;ProjectsSidebar /&gt;\n            {/* &lt;NewProject /&gt; */}\n            &lt;NoProjectSelected /&gt;\n        &lt;/main&gt;\n    );\n}\n\nexport default App;\n</code></pre> <pre><code>//ProjectsSidebar.jsx\nimport Button from \"./Button\";\n\nconst ProjectsSidebar = () =&gt; {\n    return (\n        &lt;aside className=\"w-1/3 px-8 py-16 bg-stone-900 text-stone-50 md:w-72 rounded-r-xl\"&gt;\n            &lt;h2 className=\"mb-8 font-bold uppercase md:text-xl text-stone-200\"&gt;Your Projects&lt;/h2&gt;\n            &lt;div&gt;\n                &lt;Button&gt;+ Add Project&lt;/Button&gt;\n            &lt;/div&gt;\n            &lt;ul&gt;&lt;/ul&gt;\n        &lt;/aside&gt;\n    );\n};\n\nexport default ProjectsSidebar;\n</code></pre></p> </li> <li> <p>Managing State to Switch Between Components</p> </li> </ol>","tags":["react","project"]},{"location":"Learning/The%20Complete%20React%20Guide/Project%20Management%20Test%20App/","title":"Project Management Test App","text":"","tags":["react","project"]},{"location":"Learning/The%20Complete%20React%20Guide/Props%20are%20not%20Forwarded%20to%20Inner%20Elements/","title":"Props are not Forwarded to Inner Elements","text":"<pre><code>export default function Section({ title, children }) {\n    return (\n        &lt;section&gt;\n            &lt;h2&gt;{title}&lt;/h2&gt;\n        &lt;/section&gt;\n    );\n}\n</code></pre> <ul> <li>Expecting a title prop to be passed through, using props destructuring</li> <li>Using the special children prop, so that we can use the section as a wrapper around the actual section content.</li> </ul> <pre><code>        &lt;Section title=\"Examples\" id=\"examples\"&gt;\n            &lt;menu&gt;\n                &lt;TabButton\n                    isSelected={selectedTopic === \"components\"}\n                    onSelect={() =&gt; handleSelect(\"components\")}\n                &gt;\n                    Components\n                &lt;/TabButton&gt;\n                &lt;TabButton\n                    isSelected={selectedTopic === \"jsx\"}\n                    onSelect={() =&gt; handleSelect(\"jsx\")}\n                &gt;\n                    JSX\n                &lt;/TabButton&gt;\n                &lt;TabButton\n                    isSelected={selectedTopic === \"props\"}\n                    onSelect={() =&gt; handleSelect(\"props\")}\n                &gt;\n                    Props\n                &lt;/TabButton&gt;\n                &lt;TabButton\n                    isSelected={selectedTopic === \"state\"}\n                    onSelect={() =&gt; handleSelect(\"state\")}\n                &gt;\n                    State\n                &lt;/TabButton&gt;\n            &lt;/menu&gt;\n            {tabContent}\n        &lt;/Section&gt;\n</code></pre> <ul> <li>When setting props, on custom components those props are not automatically forwarded on the JSX code used within that component</li> </ul> <p> * Props must be used &amp; set explicitly * In our example above, while the custom component has <code>id=examples</code> set, this isn't being used within the component we're displaying</p> <p><pre><code>export default function Section({ title, children, id }) {\n    return (\n        &lt;section id={id}&gt;\n            &lt;h2&gt;{title}&lt;/h2&gt;\n            {children}\n        &lt;/section&gt;\n    );\n}\n</code></pre> </p> <ul> <li> <p>We can use a pattern called forwarded props or \"proxy-props\", and not have to destructure each prop that we're passing through to the element, as this would not be scalable.</p> </li> <li></li> </ul>","tags":["react","props","forwarded","elements","children","proxy-props"]},{"location":"Learning/The%20Complete%20React%20Guide/Reacting%20to%20Events/","title":"Reacting to Events","text":"<ul> <li>As we're using react, we don't want to interact with the DOM ourselves, like we would in JavaScript</li> <li> <p>Instead, we can use inbuilt elements with their built in props such as <code>onClick</code></p> </li> <li> <p>Any event prop must be a function, as we want to point at the function that executes when the event occurs</p> </li> <li> <p>The advantage of defining these event handler functions inside the component function is that they then have access to the component's prop and state.</p> </li> <li> <p>Muse use the name as the function, as we want to use the function as a value</p> </li> <li>This should not be executed with parenthesis</li> <li>Using the Function as a value means that the function is executed by React when a click on the button occurs.</li> </ul> <pre><code>import PropTypes from \"prop-types\";\nexport default function TabButton({ children }) {\n    const handleClick = () =&gt; {\n        console.log(children);\n    };\n\n    return (\n        &lt;li&gt;\n            &lt;button onClick={handleClick}&gt;{children}&lt;/button&gt;\n        &lt;/li&gt;\n    );\n}\n\nTabButton.propTypes = {\n    children: PropTypes.any,\n};\n</code></pre>","tags":["react","events"]},{"location":"Learning/The%20Complete%20React%20Guide/Reference%20vs%20Primitive%20Values/","title":"Reference vs Primitive Values","text":"<ul> <li>Primitive values like strings cannot be edited.</li> <li> <p>Even executing a method on the value with produce a new string instead of editing the old string.</p> </li> <li> <p>When dealing with objects &amp; arrays, this is different</p> </li> <li>An example when using array.push, push is editing the original array,  it mutated the original array</li> <li> <p>Objects in JavaScript are reference values</p> </li> <li> <p>In a variable, you don't store the value but the address of data in memory is stored.</p> </li> <li> <p>When calling push, JavaScript will reach out to the address, then add the new item to the existing array in memory.</p> </li> <li> <p>This also is the reason why we can use <code>const</code> on an array, meaning the value can't be edited.</p> </li> <li>Objects can be stored in a constant,</li> </ul> <pre><code>let userMessage = \"Hello\" // Primitive\nuserMessage = \"Hello there\" // Brand new string / Old string thrown away\n\nconst hobbies = [\"Fishing\", \"Sports\", \"Cooking\"];\nhobbies.push(\"Hiking\");\nconsole.log(hobbies)\n</code></pre>","tags":["Reference","Primitive","values","objects","arrays","const"]},{"location":"Learning/The%20Complete%20React%20Guide/Refs%20vs%20State%20Values/","title":"Refs vs State Values","text":"<ul> <li> <p>When trying to access the <code>useRef()</code> when the component has been rendered for the first time, this will not work and using <code>useState()</code> is still required</p> </li> <li> <p>Whenever a ref changes, the component function does not re-execute</p> </li> <li>Whenever a state changes, the component function will be re-executed</li> </ul>","tags":["react","useRef","useState"]},{"location":"Learning/The%20Complete%20React%20Guide/Refs%20vs%20State%20Values/#state","title":"State","text":"<ul> <li>Causes component re-evaluation (re-execution) when changed</li> <li>Should be used for values that are directly reflected in the UI</li> <li>Should not be used for \"behind the scenes\" values that have no direct UI impact</li> </ul>","tags":["react","useRef","useState"]},{"location":"Learning/The%20Complete%20React%20Guide/Refs%20vs%20State%20Values/#refs","title":"Refs","text":"<ul> <li>Do not cause component re-evaluation</li> <li>Can be used to gain direct DOM element access</li> <li>Great for reading values or accessing certain browser APIs</li> </ul>","tags":["react","useRef","useState"]},{"location":"Learning/The%20Complete%20React%20Guide/Rendering%20Content%20Conditionally/","title":"Rendering Content Conditionally","text":"<ul> <li> <p>We need to output content conditionally, in our example if a topic has been selected</p> </li> <li> <p>In the following code, we're saying that if we don't have a selected topic, render the paragraph, otherwise render nothing.</p> </li> </ul> <pre><code>    const [selectedTopic, setSelectedTopic] = useState();\n</code></pre> <pre><code>                    {!selectedTopic ? (\n                        &lt;p&gt; Please select a topic.&lt;/p&gt;\n                    ) : (\n                        &lt;div id=\"tab-content\"&gt;\n                            &lt;h3&gt;{EXAMPLES[selectedTopic].title}&lt;/h3&gt;\n                            &lt;p&gt;{EXAMPLES[selectedTopic].description}&lt;/p&gt;\n                            &lt;pre&gt;\n                                &lt;code&gt;{EXAMPLES[selectedTopic].code}&lt;/code&gt;\n                            &lt;/pre&gt;\n                        &lt;/div&gt;\n                    )}\n</code></pre> <ul> <li>The <code>&amp;&amp;</code> value will output the condition that comes after it, if the condition in front of it is true.</li> </ul> <pre><code>                    {!selectedTopic &amp;&amp; &lt;p&gt;Please select a topic.&lt;/p&gt;}\n                    {selectedTopic &amp;&amp; (\n                        &lt;div id=\"tab-content\"&gt;\n                            &lt;h3&gt;{EXAMPLES[selectedTopic].title}&lt;/h3&gt;\n                            &lt;p&gt;{EXAMPLES[selectedTopic].description}&lt;/p&gt;\n                            &lt;pre&gt;\n                                &lt;code&gt;{EXAMPLES[selectedTopic].code}&lt;/code&gt;\n                            &lt;/pre&gt;\n                        &lt;/div&gt;\n                    )}\n</code></pre> <ul> <li>JSX code can be stored in variables and constants</li> </ul> <pre><code>    let tabContent = &lt;p&gt;Please select a topic.&lt;/p&gt;;\n\n    if (selectedTopic) {\n        tabContent = (\n            &lt;div id=\"tab-content\"&gt;\n                &lt;h3&gt;{EXAMPLES[selectedTopic].title}&lt;/h3&gt;\n                &lt;p&gt;{EXAMPLES[selectedTopic].description}&lt;/p&gt;\n                &lt;pre&gt;\n                    &lt;code&gt;{EXAMPLES[selectedTopic].code}&lt;/code&gt;\n                &lt;/pre&gt;\n            &lt;/div&gt;\n        );\n    }\n</code></pre> <pre><code>                    {tabContent}\n</code></pre> <pre><code>import React from 'react';\n\nexport default function App() {\n\n    const [alert, setAlert] = React.useState();\n\n    const handleClick = () =&gt; {\n        setAlert(!alert);\n    }\n\n    let warning = &lt;button onClick={handleClick}&gt;Delete&lt;/button&gt;;\n\n    if (alert) {\n        warning = (\n            &lt;div data-testid=\"alert\" id=\"alert\"&gt;\n            &lt;h2&gt;Are you sure?&lt;/h2&gt;\n            &lt;p&gt;These changes can't be reverted!&lt;/p&gt;\n            &lt;button onClick={handleClick}&gt;Proceed&lt;/button&gt;\n        &lt;/div&gt;\n        );\n    };\n\n    return (\n      &lt;div&gt;\n        {warning}\n      &lt;/div&gt;    \n    );\n}\n</code></pre>","tags":["rendering","conditional","components","react","ternery"]},{"location":"Learning/The%20Complete%20React%20Guide/Rendering%20Multi-dimensional%20Lists/","title":"Rendering Multi-dimensional Lists","text":"<pre><code>const initialGameBoard = [\n    [null, null, null],\n    [null, null, null],\n    [null, null, null],\n];\n\nconst GameBoard = () =&gt; {\n    return (\n        &lt;ol id=\"game-board\"&gt;\n            {initialGameBoard.map((row, rowIndex) =&gt; (\n                &lt;li key={rowIndex}&gt;\n                    &lt;ol&gt;\n                        {row.map((playerSymbol, colIndex) =&gt; (\n                            &lt;li key={colIndex}&gt;\n                                &lt;button&gt;{playerSymbol}&lt;/button&gt;\n                            &lt;/li&gt;\n                        ))}\n                    &lt;/ol&gt;\n                &lt;/li&gt;\n            ))}\n        &lt;/ol&gt;\n    );\n};\nexport default GameBoard;\n</code></pre>","tags":["lists","multi-dimenstional","rendering","react","jsx"]},{"location":"Learning/The%20Complete%20React%20Guide/Scoping%20CSS%20Rules%20with%20CSS%20Modules/","title":"Scoping CSS Rules with CSS Modules","text":"<ul> <li>Adding .module. to the filename will change how the .css file is built</li> <li>This also means that we will be importing the file differently</li> <li>The className could also be applied conditionally similar to what we've seen previous with vanilla or inline CSS</li> </ul> <p><pre><code>import classes from './Header.module.css'\n</code></pre> <pre><code>&lt;p className={classes.paragraph}&gt;&lt;/p&gt;\n</code></pre></p>","tags":["react","CSS","scope","modules","rules"]},{"location":"Learning/The%20Complete%20React%20Guide/Scoping%20CSS%20Rules%20with%20CSS%20Modules/#advantages","title":"Advantages","text":"<ul> <li>CSS code is decoupled from JSC code</li> <li>You write CSS code</li> <li>CSS code can be written by another developer</li> <li>CSS classes are scoped to the component files which import them</li> </ul>","tags":["react","CSS","scope","modules","rules"]},{"location":"Learning/The%20Complete%20React%20Guide/Scoping%20CSS%20Rules%20with%20CSS%20Modules/#disadvantages","title":"Disadvantages","text":"<ul> <li>You need to know CSS</li> <li>You may end up with many relatively small CSS files in your project</li> </ul>","tags":["react","CSS","scope","modules","rules"]},{"location":"Learning/The%20Complete%20React%20Guide/Setting%20Component%20Types%20Dynamically/","title":"Setting Component Types Dynamically","text":"<ul> <li>For the Tabs component, we might want to use different wrapper elements in different points within the application</li> </ul> <pre><code>export default function Tabs({ children, buttons }) {\n    return (\n        &lt;&gt;\n            &lt;menu&gt;{buttons}&lt;/menu&gt;\n            {children}\n        &lt;/&gt;\n    );\n}\n</code></pre> <ul> <li>We could use the identifier of a component as a value and pass this through as a prop, giving the developer more options/functionality to use the component in different ways</li> <li> <p>Custom components must be passed as a dynamic value <code>{Component}</code></p> </li> <li> <p>Setting <code>&lt;buttonsContainer/&gt;</code> instead of the menu would not work as it's not an uppercase character and it's trying to use a component that does not exist</p> </li> <li>Instead, we would manually create one ourselves above</li> </ul> <pre><code>export default function Tabs({ children, buttons, buttonsContainer }) {\n    const ButtonsContainer = buttonsContainer;\n    return (\n        &lt;&gt;\n            &lt;ButtonsContainer&gt;{buttons}&lt;/ButtonsContainer&gt;\n            {children}\n        &lt;/&gt;\n    );\n}\n</code></pre> <ul> <li> <p>React will use the value from <code>buttonsContainter</code>, React recognises that we're either using a custom component or built in component such as <code>menu</code></p> </li> <li> <p>We're now able to dynamically set the wrapper, but knowing about this pattern, passing a component identifier as a value for a prop, dynamically rendering different HTML elements</p> </li> </ul> <pre><code>const Tabs = ({ children, buttons, buttonsContainer }) =&gt; {\n    const ButtonsContainer = buttonsContainer;\n    return (\n        &lt;&gt;\n            &lt;ButtonsContainer&gt;{buttons}&lt;/ButtonsContainer&gt;\n            {children}\n        &lt;/&gt;\n    );\n};\n\nexport default Tabs;\n</code></pre>","tags":["react","jsx","components","dynamic"]},{"location":"Learning/The%20Complete%20React%20Guide/Setting%20HTML%20and%20Loading%20Images/","title":"Setting HTML and Loading Images","text":"<ul> <li>When loading images directly in React, they should not be loaded via older HTML <code>img</code> tags</li> <li>This may get lost by React, or skipped by the React build stage</li> </ul> <pre><code>import reactImg from \"\"\n</code></pre> <ul> <li>The image is now a JavaScript variable that will include a path to the image</li> <li>This will also include an automatically generated path that will also work once deployed</li> </ul> <pre><code>&lt;img src={reactImg} alt=\"Stylized atom\" /&gt;\n</code></pre> <ul> <li>Quotes must be omitted, else this will be a string. They must also include the JSX <code>{}</code> to poin t at JavaScript values</li> </ul>","tags":["images","html","react","import"]},{"location":"Learning/The%20Complete%20React%20Guide/Setting%20Timers%20and%20Managing%20State/","title":"Setting Timers and Managing State","text":"<ul> <li> <p>Whenever we're updating state, we have to remember that the state will cause the component to be re-evaluated/re-rendered - this means that if we set a timer as a variable, once the refresh takes places this essentially will be a new timer variable</p> </li> <li> <p>Moving this outside of the component will also not resolve the issue</p> </li> <li>Doing the above will cause the variable to be shared across multiple instances</li> </ul> <pre><code>import { useState, useRef } from \"react\";\n\nexport const TimerChallenge = ({ title, targetTime }) =&gt; {\n    const [timerStarted, setTimerStarted] = useState(false);\n    const [timerExpired, setTimerExpired] = useState(false);\n\n    let timer;\n    const handleStart = () =&gt; {\n        timer = setTimeout(() =&gt; {\n            setTimerExpired(true);\n        }, targetTime * 1000);\n\n        setTimerStarted(true);\n    };\n\n    const handleStop = () =&gt; {\n        clearTimeout(timer);\n    };\n\n    return (\n        &lt;section className=\"challenge\"&gt;\n            &lt;h2&gt;{title}&lt;/h2&gt;\n            {timerExpired &amp;&amp; &lt;p&gt;Timer Expired&lt;/p&gt;}\n            &lt;p className=\"challenge-time\"&gt;\n                {targetTime} second{targetTime &gt; 1 ? \"s\" : \"\"}\n            &lt;/p&gt;\n            &lt;p&gt;\n                &lt;button onClick={timerStarted ? handleStop : handleStart}&gt;\n                    {timerStarted ? \"Stop\" : \"Start\"} Challenge\n                &lt;/button&gt;\n            &lt;/p&gt;\n            &lt;p className={timerStarted ? \"active\" : \"\"}&gt;\n                {timerStarted ? \"Time is running\" : \"Timer inactive\"}\n            &lt;/p&gt;\n        &lt;/section&gt;\n    );\n};\n</code></pre> <ul> <li>Instead we can use <code>useRef()</code> which will allow React to store these values behind the scene and will also not be re-rendered/modified whenever the state changes</li> <li>The value is not lost when the component re-executes</li> <li> <p>The value change does not cause the component to be rerendered either</p> </li> <li> <p>If you have a value that must be managed, but isn't a state or have an impact on the UI, <code>useRef()</code> would be a good example to use</p> </li> </ul> <pre><code>import { useState, useRef } from \"react\";\n\nexport const TimerChallenge = ({ title, targetTime }) =&gt; {\n    const [timerStarted, setTimerStarted] = useState(false);\n    const [timerExpired, setTimerExpired] = useState(false);\n    const timer = useRef(null);\n\n    const handleStart = () =&gt; {\n        timer.current = setTimeout(() =&gt; {\n            setTimerExpired(true);\n        }, targetTime * 1000);\n\n        setTimerStarted(true);\n    };\n\n    const handleStop = () =&gt; {\n        clearTimeout(timer.current);\n    };\n\n    return (\n        &lt;section className=\"challenge\"&gt;\n            &lt;h2&gt;{title}&lt;/h2&gt;\n            {timerExpired &amp;&amp; &lt;p&gt;Timer Expired&lt;/p&gt;}\n            &lt;p className=\"challenge-time\"&gt;\n                {targetTime} second{targetTime &gt; 1 ? \"s\" : \"\"}\n            &lt;/p&gt;\n            &lt;p&gt;\n                &lt;button onClick={timerStarted ? handleStop : handleStart}&gt;\n                    {timerStarted ? \"Stop\" : \"Start\"} Challenge\n                &lt;/button&gt;\n            &lt;/p&gt;\n            &lt;p className={timerStarted ? \"active\" : \"\"}&gt;\n                {timerStarted ? \"Time is running\" : \"Timer inactive\"}\n            &lt;/p&gt;\n        &lt;/section&gt;\n    );\n};\n</code></pre>","tags":["react","useRef","useState","timers"]},{"location":"Learning/The%20Complete%20React%20Guide/Special%20Projects%20Folders/","title":"Special Projects Folders","text":"<ul> <li>JavaScript code, typically uses JSX (\"HTML in JavaScript\")</li> <li>Code is transformed and optimised (e.g unnecessary whitespace is removed)</li> <li>Code that runs in the browser (JavaScript code, without JSX)</li> <li> <p>The transformation is handled by tools such as CRA &amp; Vite, why we require things such as a build tool</p> </li> <li> <p>The code you write is not the code that gets executed in the browser</p> </li> <li> <p>Your code is transformed before it's handed off to the browser</p> </li> <li> <p>Raw, unprocessed React code won't execute in the browser, as React uses JSX</p> </li> <li> <p>JSX is not a default JavaScript feature</p> </li> <li> <p>The code would not be optimised for production(e.g. not minified)</p> </li> <li>React projects require a build process that transforms your code</li> </ul>","tags":["react","jsx"]},{"location":"Learning/The%20Complete%20React%20Guide/Splitting%20Components%20by%20Feature%20and%20State/","title":"Splitting Components by Feature and State","text":"<ul> <li>Managing state within the main App component was causing the whole App component to re-run</li> <li>This was causing the <code>&lt;Header /&gt;</code> component to re-run the random name function for the title.</li> <li> <p>By moving the state to it's own component, this means that each time we do a re-render within select components, the App component does not cause additional code to re-run</p> </li> <li> <p>The app component will not be executed again, but instead, the Example function/component will be executed by itself</p> </li> <li></li> </ul>","tags":["react","state","Split","components","Feature"]},{"location":"Learning/The%20Complete%20React%20Guide/Storing%20Components%20and%20Good%20Project%20Structure/","title":"Storing Components and Good Project Structure","text":"<pre><code>import { CORE_CONCEPTS } from \"./data.js\";\nimport Header from \"./components/Header.jsx\";\nimport CoreConcept from \"./components/CoreConcept.jsx\";\n\nfunction App() {\n    return (\n        &lt;div&gt;\n            &lt;Header /&gt;\n            &lt;main&gt;\n                &lt;section id=\"core-concepts\"&gt;\n                    &lt;h2&gt;Core Concepts&lt;/h2&gt;\n                    &lt;ul&gt;\n                        &lt;CoreConcept {...CORE_CONCEPTS[0]} /&gt;\n                        &lt;CoreConcept {...CORE_CONCEPTS[1]} /&gt;\n                        &lt;CoreConcept {...CORE_CONCEPTS[2]} /&gt;\n                        &lt;CoreConcept {...CORE_CONCEPTS[3]} /&gt;\n                    &lt;/ul&gt;\n                &lt;/section&gt;\n            &lt;/main&gt;\n        &lt;/div&gt;\n    );\n}\n\nexport default App;\n</code></pre> <pre><code>import PropTypes from \"prop-types\";\n\nCoreConcept.propTypes = {\n    title: PropTypes.string,\n    description: PropTypes.string,\n    image: PropTypes.string,\n};\n\nexport default function CoreConcept({ image, title, description }) {\n    return (\n        &lt;li&gt;\n            &lt;img src={image} alt={title} /&gt;\n            &lt;h3&gt;{title}&lt;/h3&gt;\n            &lt;p&gt;{description}&lt;/p&gt;\n        &lt;/li&gt;\n    );\n}\n</code></pre> <ul> <li>The CSS file should also be split across multiple files, stored next to their respective components and not in 1 large index.css</li> <li>Importing a CSS file within a component will not scope these styles to that component.</li> <li>If we would use a Header element elsewhere, those styles would also be applied elsewhere.</li> </ul>","tags":["react","components","structures","practice","project"]},{"location":"Learning/The%20Complete%20React%20Guide/Styling%20React%20apps%20with%20Inline%20Styles/","title":"Styling React apps with Inline Styles","text":"<ul> <li> <p>Styles are applied within the JSX code instead of separate CSS files</p> </li> <li> <p>The style prop takes a dynamic value <code>{}</code> and then you pass an object as a value to the style prop <pre><code>            &lt;p style={{ color: \"red\" }}&gt;A community of artists and art-lovers.&lt;/p&gt;\n</code></pre></p> </li> </ul>","tags":["react","CSS","inline","styles","ternery"]},{"location":"Learning/The%20Complete%20React%20Guide/Styling%20React%20apps%20with%20Inline%20Styles/#advantages","title":"Advantages","text":"<ul> <li>Quick and easy to add to JSX</li> <li>Styles only affect the element to which you add them</li> </ul>","tags":["react","CSS","inline","styles","ternery"]},{"location":"Learning/The%20Complete%20React%20Guide/Styling%20React%20apps%20with%20Inline%20Styles/#disadvantages","title":"Disadvantages","text":"<ul> <li>You need to know CSS</li> <li>You need to style every element individually</li> <li>There is no separation between JSX and CSS</li> </ul>","tags":["react","CSS","inline","styles","ternery"]},{"location":"Learning/The%20Complete%20React%20Guide/Styling%20React%20apps%20with%20Inline%20Styles/#ternary-expression","title":"Ternary Expression","text":"<pre><code>style={{backgroundColor: emailNotValid ? \"#fed2d2\" : \"#d1d5db\" }}\n</code></pre>","tags":["react","CSS","inline","styles","ternery"]},{"location":"Learning/The%20Complete%20React%20Guide/The%20Spread%20Operator/","title":"The Spread Operator","text":"<ul> <li>The spread operator pulls out values from an array, then adds them as separated comma values to a new array.</li> <li>The spread operator functions on both arrays and objects</li> </ul> <pre><code>const hobbies = [\"Fishing\", \"Sports\", \"Cooking\"];\nconst newHobbies = [\"Hiking\"];\nconst mergedHobbies = [...newHobbies, ...hobbies];\n\nconsole.log(mergedHobbies) // [\"Hiking\", \"Fishing\"]\n</code></pre> <pre><code>const user = {\n  name: \"Liam\",\n  age: 25\n};\n\nconst extendedUser = {\n  isAdmin: true,\n  ...user\n}\n\nconsole.log(extendedUser) // Object { isAdmin: true, name: \"Liam\", age: 25 }\n</code></pre>","tags":["spread","operator","array","objects"]},{"location":"Learning/The%20Complete%20React%20Guide/Understanding%20React%20Error%20Messages/","title":"Understanding React Error Messages","text":"<ul> <li>Uncaught TypeError: results[0] is undefined</li> </ul> <pre><code> for (let i = 0; i &lt; duration; i++) {\n    const interestEarnedInYear = investmentValue * (expectedReturn / 100);\n    investmentValue += interestEarnedInYear + annualInvestment;\n    results.push({\n      year: i + 1, // year identifier\n      interest: interestEarnedInYear, // the amount of interest earned in this year\n      valueEndOfYear: investmentValue, // investment value at end of year\n      annualInvestment: annualInvestment, // investment added in this year\n    });\n  }\n}\n</code></pre> <pre><code>    if (results.length &lt; 1) {\n        return &lt;p&gt;Duration cannot be less than 0&lt;/p&gt;;\n    }\n</code></pre>","tags":["react","error","messages"]},{"location":"Learning/The%20Complete%20React%20Guide/Understanding%20React%20Error%20Messages/#strict-mode","title":"Strict mode","text":"<pre><code>import { StrictMode } from 'react';\n&lt;StrictMode&gt;\n    &lt;App /&gt;\n&lt;/StrictMode&gt;\n</code></pre> <ul> <li>When every component gets executed twice, it helps capture duplication errors, e.g. twice the amount of variables within a table</li> <li>It immediately shows when there could be a problem</li> </ul>","tags":["react","error","messages"]},{"location":"Learning/The%20Complete%20React%20Guide/Understanding%20React%20Error%20Messages/#react-devtools","title":"React Devtools","text":"","tags":["react","error","messages"]},{"location":"Learning/The%20Complete%20React%20Guide/Updating%20Object%20State%20Immutably/","title":"Updating Object State Immutably","text":"<pre><code>    const handleSelectSquare = (rowIndex, colIndex) =&gt; {\n        setGameBoard((prevGameBoard) =&gt; {\n            prevGameBoard[rowIndex][colIndex] = \"X\";\n            return prevGameBoard;\n        });\n    };\n</code></pre> <ul> <li> <p>The above functionality is not recommended</p> </li> <li> <p>Objects &amp; Arrays are reference values in JavaScript</p> </li> <li>You should there not mutate them directly, instead create a (deep) copy first</li> </ul> <pre><code>// wrong\nconst updatedUser = user;\nuser.name = \"Liam\" // Editing the user object in memory\n</code></pre> <pre><code>// correct\nconst updatedUSer = {...user}\nupdatedUser.name = \"Liam\"  Creating a copy via JavaScript's \"Spread\" operator\n// Editing the copy, not the original\n</code></pre> <ul> <li>If we followed the code above, we would be updating the object in memory, even before the state had been changed by React</li> <li>This can lead to strange bugs or side effects when multiple places schedule state updates for the same state</li> </ul> <pre><code>    const handleSelectSquare = (rowIndex, colIndex) =&gt; {\n        setGameBoard((prevGameBoard) =&gt; {\n            const updatedBoard = [\n                ...prevGameBoard.map((innerArray) =&gt; [...innerArray]),\n            ];\n            updatedBoard[rowIndex][colIndex] = \"X\";\n            return updatedBoard;\n        });\n    };\n</code></pre>","tags":["updating","objects","state","immutably","react","jsx","spread","deep"]},{"location":"Learning/The%20Complete%20React%20Guide/Updating%20State%20Based%20on%20Old%20State%20Correctly/","title":"Updating State Based on Old State Correctly","text":"<ul> <li>In React, when updating state based on the previous value of the state, you should not use something like <code>setIsEditing(!isEditing)</code></li> <li> <p>Instead, you should pass a function to the <code>setIsEditing</code> function</p> </li> <li> <p>If your new state depends on your previous state value, you should not update the state like this.</p> </li> <li>Instead, pass a function to your state updating function</li> <li>This function will automatically be called by React and will receive the guaranteed latest state value</li> </ul>","tags":["react","state","updating","correctly"]},{"location":"Learning/The%20Complete%20React%20Guide/Updating%20State%20Based%20on%20Old%20State%20Correctly/#react-is-scheduling-state-updates","title":"React is scheduling State Updates","text":"<ul> <li>State updates are not performed instantly but at some point in the future, when React has time for it</li> <li>In most cases, those state updates are still executed almost instantly</li> <li>By adding a function, you're guaranteed by React to always be working with the latest state update</li> <li></li> </ul>","tags":["react","state","updating","correctly"]},{"location":"Learning/The%20Complete%20React%20Guide/User%20Input%20and%20Two%20Way%20Binding/","title":"User Input and Two Way Binding","text":"<ul> <li> <p>The value prop sets the value shown within the input <pre><code>    if (isEditing) {\n        playerName = &lt;input type=\"text\" value={name} required /&gt;;\n    }\n</code></pre></p> </li> <li> <p>Using <code>onChange={handleChange}</code> within an input field will trigger for every keystoke</p> </li> <li>It will provide us with an event object that contains the value entered by the user</li> <li>React will call the <code>handleChange</code> function, when the change occurs and React will provide the event object as an argument for the function</li> </ul> <pre><code>    const handleChange = (event) =&gt; {\n        setPlayerName(event.target.value);\n    };\n</code></pre> <ul> <li>We're not managing the playername as a State</li> <li>This is referred to as two-way binding</li> </ul>","tags":["react","user","input","binding","jsx"]},{"location":"Learning/The%20Complete%20React%20Guide/Using%20Functions%20as%20Values/","title":"Using Functions as Value","text":"<ul> <li>Functions can be passed as values to other functions.</li> <li>We're creating an anonymous function</li> <li> <p>When you're passing a function to another function</p> </li> <li> <p>By added parentheses to the function being passed through the first function, you would make sure that the function gets executed immediately, once the first function is set which then makes it the return value, if it would return any value</p> </li> <li>In our example,  we don't want to pass the return value, but the function itself.</li> <li>Parenthesis must be omitted, so that the function is being passed as a value</li> </ul> <pre><code>const handleTimeout = () =&gt; {\n  console.log(\"Timeout\");\n}\n\nsetTimeout(handleTimeout(), 5000) // 5 second delay to console log\n</code></pre> <ul> <li>An anonymous function can also be passed in advance, and then any code could then be executed within that anonymous arrow function</li> <li>When defining an anonymous function, you're also not executing that function, you're just defining it, then passing the defined function to the first function</li> </ul> <p><pre><code>function greeter(greetFn) {\n  greetFn();\n}\n\ngreeter(() =&gt; console.log(\"Hello\"))\n</code></pre> * This function is getting executed, as we're passing it as a parameter for the greeter function. * Inside the greet function, we're then executing the greetFn function. * Passing functions as values is not limited to built in functions, but can be done with all functions.</p> <ul> <li>Here's a comparison:</li> </ul> Aspect Function Expression Function Declaration Syntax Assigned to a variable Standalone statement Hoisting Not hoisted Hoisted to the top of scope Named or Anonymous Can be named or anonymous Must have a name Usage Often used as a variable value Used as standalone function <ul> <li>Both function expressions and function declarations have their use cases. Function expressions offer more flexibility and can be more versatile in certain scenarios, especially when creating functions dynamically or as values assigned to variables. Function declarations, on the other hand, are standalone and provide a cleaner syntax for defining functions directly.</li> </ul>","tags":["functions","values","anonymous","arrow","function"]},{"location":"Learning/The%20Complete%20React%20Guide/Vanilla%20CSS%20Styles%20are%20NOT%20Scoped/","title":"Vanilla CSS Styles are NOT Scoped","text":"<ul> <li>If CSS files are split across components, multiple files, then importing certain files, the CSS rules are not scoped to that component</li> <li>Instead, you'll see that all the styles are injected into the Head section</li> <li>They're applied globally to the page, not necessary a problem but something to keep in mind for the future</li> </ul>","tags":["react","CSS","components","scope"]},{"location":"Learning/The%20Complete%20React%20Guide/Vanilla%20CSS%20in%20React/","title":"Vanilla CSS in React","text":"","tags":["react","CSS"]},{"location":"Learning/The%20Complete%20React%20Guide/Vanilla%20CSS%20in%20React/#advantages","title":"Advantages","text":"<ul> <li>CSS code is decoupled from JSX code</li> <li>You write CSS code as you know and (maybe) love it</li> <li>CSS code can be written by another developer who needs only a minimal amount of access to your JSX code</li> </ul>","tags":["react","CSS"]},{"location":"Learning/The%20Complete%20React%20Guide/Vanilla%20CSS%20in%20React/#disadvantages","title":"Disadvantages","text":"<ul> <li>You need to know CSS</li> <li>CSS code is not scoped to components</li> <li>CSS rules may clash across components</li> <li>E.g. Same CSS class name used in different components for different purposes</li> </ul>","tags":["react","CSS"]},{"location":"Learning/The%20Complete%20React%20Guide/What%20are%20Refs/","title":"What are Refs","text":"<ul> <li>A <code>ref</code> in React is a value, similar to how a variable or state is a value</li> <li>It's a value managed by React</li> </ul> <pre><code>import { useState } from \"react\";\nexport default function Player() {\n    const [enteredPlayerName, setEnteredPlayerName] = useState(null);\n    const [submitted, setSubmitted] = useState(false);\n\n    const handleChange = (event) =&gt; {\n        setSubmitted(false);\n        setEnteredPlayerName(event.target.value);\n    };\n\n    const handleClick = () =&gt; {\n        setSubmitted(true);\n    };\n\n    return (\n        &lt;&gt;\n            &lt;section id=\"player\"&gt;\n                &lt;h2&gt;\n                    Welcome {submitted ? enteredPlayerName : \"unknown entity\"}\n                &lt;/h2&gt;\n                &lt;p&gt;\n                    &lt;input\n                        type=\"text\"\n                        onChange={handleChange}\n                        value={enteredPlayerName}\n                    /&gt;\n                    &lt;button onClick={handleClick}&gt;Set Name&lt;/button&gt;\n                &lt;/p&gt;\n            &lt;/section&gt;\n        &lt;/&gt;\n    );\n}\n</code></pre> <p><pre><code>import { useState, useRef } from \"react\";\nexport default function Player() {\n    const playerName = useRef(null);\n\n    const [enteredPlayerName, setEnteredPlayerName] = useState(null);\n\n    const handleClick = () =&gt; {\n        setEnteredPlayerName(playerName.current.value); // playerName.current.value;\n    };\n\n    return (\n        &lt;&gt;\n            &lt;section id=\"player\"&gt;\n                &lt;h2&gt;Welcome {enteredPlayerName ?? \"unknown entity\"}&lt;/h2&gt;\n                &lt;p&gt;\n                    &lt;input ref={playerName} type=\"text\" /&gt;\n                    &lt;button onClick={handleClick}&gt;Set Name&lt;/button&gt;\n                &lt;/p&gt;\n            &lt;/section&gt;\n        &lt;/&gt;\n    );\n}\n</code></pre> * All hook functions must be called inside of a component function * You can connect them to JSX elements, with a special prop <code>ref</code> * <code>ref</code> is a prop that can be added to any JSX element * <code>ref</code> takes a special value</p> <pre><code>import { useState, useRef } from \"react\";\n\nconst playerName = useRef(null);\n\n&lt;input ref={playerName} type=\"text\" onChange={handleChange} value={enteredPlayerName}/&gt;\n</code></pre> <ul> <li>The <code>ref</code> value will usually always be a JavaScript object that will always have a <code>current</code> property</li> <li>Within the current property, the connected input will be stored</li> </ul> <p></p> <ul> <li> <p>The ternary expression can also now be shortened down to output the value if it's truthy, or output the default value if it's falsey</p> </li> <li> <p>We're not updating a state only when clicked, then getting the value directly from the input element with the help of the <code>ref</code> hook</p> </li> </ul> <pre><code>function App() {\n    const filePicker = React.useRef();\n\n    const handleImage = () =&gt; {\n        filePicker.current.click();\n    }\n\n  return (\n    &lt;div id=\"app\"&gt;\n      &lt;p&gt;Please select an image&lt;/p&gt;\n      &lt;p&gt;\n        &lt;input ref={filePicker} data-testid=\"file-picker\" type=\"file\" accept=\"image/*\" /&gt;\n        &lt;button onClick={handleImage}&gt;Pick Image&lt;/button&gt;\n      &lt;/p&gt;\n    &lt;/div&gt;\n  );\n}\n\nexport default App;\n</code></pre>","tags":["react","useRef"]},{"location":"Learning/The%20Complete%20React%20Guide/Why%20Use%20React/","title":"Why Use React","text":"<ul> <li>With React, you define the target UI state or states</li> <li>You don't define the steps to get there</li> <li> <p>React will figure out &amp; perform the necessary steps</p> </li> <li> <p>When writing React code, you're writing code in a Declarative way</p> </li> <li> <p>You define the goal, not the steps</p> </li> <li> <p>JavaScript is Imperative, you're defining the steps and how to get to the goal</p> </li> <li>You're not defining the goal itself  </li> </ul>","tags":["Declarative","Imperative","react"]},{"location":"Learning/The%20Complete%20React%20Guide/Working%20with%20Fragments/","title":"Working with Fragments","text":"<ul> <li>JSX must have one parent element, commonly providing sibling elements within a parent div</li> <li>In JavaScript, we can only return one value with code, returning 2 siblings will not work for similar reasons.</li> <li>This means we will end up with an extra <code>&lt;div&gt;</code> and this is unnecessary</li> <li>We can use the fragment component instead <code>&lt;&gt;</code></li> </ul> <pre><code>return (\n        &lt;&gt;\n            &lt;Header /&gt;\n            &lt;main&gt;\n</code></pre>","tags":["jsx","react","fragments"]},{"location":"Learning/The%20Complete%20React%20Guide/Working%20with%20Multiple%20JSX%20Slots/","title":"Working with Multiple JSX Slots","text":"<ul> <li>The idea behind the Tabs component is that we could use it for all types of Tabs</li> <li>This means that we don't want to manage the content directly within the Tabs component, it should be managed where it is used</li> </ul> <pre><code>                &lt;TabButton\n                    isSelected={selectedTopic === \"components\"}\n                    onClick={() =&gt; handleSelect(\"components\")}\n                &gt;\n</code></pre> <ul> <li>There will be two issues with moving the TabButton into a Tabs component</li> <li> <p>We want to use both the isSelected and the onClick function detected by clicking this component</p> </li> <li> <p>We don't want to accept a bunch of props just to get the buttons to work</p> </li> <li>Instead, we can pass the buttons as JSX code to the Tabs element</li> <li> <p>We want to have an additional slot for JSX code within the Tabs component</p> </li> <li> <p>JSX elements are just regular values and can be used like values</p> </li> <li> <p>Whenever you're using JSX code as a value, only one route element can be used</p> </li> <li> <p>Being able to set multiple slots in components is a crucial concept within React.</p> </li> </ul> <p><pre><code>export default function Tabs({ children, buttons }) {\n    return (\n        &lt;&gt;\n            &lt;menu&gt;{buttons}&lt;/menu&gt;\n            {children}\n        &lt;/&gt;\n    );\n}\n</code></pre> <pre><code>    return (\n        &lt;Section title=\"Examples\" id=\"examples\"&gt;\n            &lt;Tabs\n                buttons={\n                    &lt;&gt;\n                        &lt;TabButton\n                            isSelected={selectedTopic === \"components\"}\n                            onClick={() =&gt; handleSelect(\"components\")}\n                        &gt;\n                            Components\n                        &lt;/TabButton&gt;\n                        &lt;TabButton\n                            isSelected={selectedTopic === \"jsx\"}\n                            onClick={() =&gt; handleSelect(\"jsx\")}\n                        &gt;\n                            JSX\n                        &lt;/TabButton&gt;\n                        &lt;TabButton\n                            isSelected={selectedTopic === \"props\"}\n                            onClick={() =&gt; handleSelect(\"props\")}\n                        &gt;\n                            Props\n                        &lt;/TabButton&gt;\n                        &lt;TabButton\n                            isSelected={selectedTopic === \"state\"}\n                            onClick={() =&gt; handleSelect(\"state\")}\n                        &gt;\n                            State\n                        &lt;/TabButton&gt;\n                    &lt;/&gt;\n                }\n            &gt;\n                {tabContent}\n            &lt;/Tabs&gt;\n        &lt;/Section&gt;\n    );\n}\n</code></pre></p>","tags":["react","jsx","slots","components"]},{"location":"Learning/The%20Complete%20React%20Guide/You%20Don%27t%20have%20to%20use%20JSX/","title":"You Don't have to use JSX","text":"<ol> <li>React Code<ol> <li>The React code you write and test</li> </ol> </li> <li>Build Process<ol> <li>Changes and optimizes your code</li> <li>Transforms it such that it runs in the browser</li> <li>Also, potentially optimises other assets like CSS &amp; image files</li> </ol> </li> <li> <p>Deployable files</p> <ol> <li>A collection of generated files that include your optimised code and any other extra assets</li> </ol> </li> <li> <p>In theory, React doesn't need JSX, but the vast majority will use JSX and a build process</p> </li> </ol>","tags":["jsx","react"]},{"location":"Learning/The%20Complete%20React%20Guide/array%20and%20array%20methods/","title":"array and array methods","text":"<ul> <li>The main idea behind an array is that you can create a list of values.</li> <li>Objects allow you to group values together with key value pairs, the main point of an array is to just have values stored in a certain order, accessed by their position.</li> <li>Using the index of the element, index always starts at 0</li> <li>Arrays are often used to store a list of values</li> <li> <p>Arrays can contain any kind of values</p> </li> <li> <p><code>array.push()</code> can be used to add another item to the array</p> </li> <li> <p><code>array.findIndex()</code> allows you to find the index of a certain value, this will take a function as an input, this should accept at least one input parameter <pre><code>const hobbies = [\"Fishing\", \"Sports\", \"Cooking\"];\n\nconst index = hobbies.findIndex((hobby) =&gt; {\n  return hobby === \"Sports\"\n}); // 1\n</code></pre></p> </li> <li> <p>The above arrow function can be shortened down even further</p> </li> </ul> <p><pre><code>const index = hobbies.findIndex((hobby) =&gt; hobby === \"Sports\");\n</code></pre> * This is the shortest possible way of writing the arrow function * We're defining a function, that takes an input called <code>hobby</code>, then compares that input to other values to yield true or false</p> <ul> <li><code>array.map()</code> allows you to transform all the items in an array to another item.</li> <li>Map will not add it to the original array, instead it return a new array,</li> </ul> <pre><code>const editedHobby = hobbies.map((hobby) =&gt; hobby + \"!\")\nconsole.log(hobbies) // [\"Fishing\"]\nconsole.log(editedHobby) // [\"Fishing!\"]\n</code></pre> <ul> <li>array.map() doesn't have to return another array, they could also be converted to JS objects <pre><code>const editedHobby = hobbies.map((hobby) =&gt; ({ text: hobby }))\nconsole.log(hobbies) // [\"Fishing\"]\nconsole.log(editedHobby) // [ {\u2026}, {\u2026}, {\u2026} ]\n</code></pre></li> </ul> <pre><code>function transformToObjects(numberArray) {\n  return numberArray.map((number) =&gt; ({ val: number }))\n}\n\nconsole.log(transformToObjects([1, 2, 3])) // 0: Object { val: 1 } 1: Object { val: 2 } 2: Object { val: 3 }\n</code></pre>","tags":["array","map","index","objects","push"]},{"location":"Learning/The%20Complete%20React%20Guide/functions%20and%20parameters/","title":"functions and parameters","text":"<ul> <li>Functions are used when you're defining code, that isn't executed immediately, but at some point when the function is called. A function can be called multiple times</li> <li>A function needs to be invoked to work</li> </ul> <pre><code>function greet() {\n  console.log('Hello World!');\n}\n\ngreet() // Hello World!\n</code></pre> <ul> <li>Functions can take parameters, knows as input values</li> <li>Parameters are then available within the scope of the function</li> <li> <p>The idea behind parameters, is that you can have one re-usable function, that can be re-used with different input values <pre><code>function greet(userName, message) {\n  console.log(`${message} ${userName}`);\n}\n\ngreet(\"Liam\", \"Hello\");\ngreet(\"Frazer\", \"Hello\")\n</code></pre></p> </li> <li> <p>You can assign default values to parameters, by adding a <code>=</code> sign</p> </li> <li> <p>The default value can be overridden, by simply providing a value <pre><code>function greet(userName, message = \"Hello\") {\n  console.log(`${message} ${userName}`);\n}\n\ngreet(\"Liam\", \"Hi\"); // Hi Liam\ngreet(\"Frazer\") // Hello Frazer\n</code></pre></p> </li> <li> <p>Functions can also return values, by using the <code>return</code> keyword</p> </li> <li>Functions must only have one return statement at most.</li> <li> <p>Functions without <code>return</code> implicitly return <code>undefined</code></p> </li> <li> <p>Whenever you create functions, you should describe what's inside of it, or what it does</p> </li> <li>Functions can also be used for producing and returning values</li> <li>They should be named to ensure it's very clear what a function does</li> </ul> <pre><code>function combine(a, b, c) {\n  return a * b / c\n}\n\nconsole.log(combine(2, 3, 4)) // 1.5\n</code></pre>","tags":["javascript","function","parameters","return","values","arrow","parentheses","statement","objects"]},{"location":"Learning/The%20Complete%20React%20Guide/functions%20and%20parameters/#arrow-functions","title":"Arrow Functions","text":"<ul> <li>Arrow functions are very popular with anonymous functions, where the function does not need a name</li> <li>When using arrow functions, you cannot use the function keyword and instead use the parameter list, an arrow and then the curly braces</li> <li>The return keyword can still be used</li> </ul>","tags":["javascript","function","parameters","return","values","arrow","parentheses","statement","objects"]},{"location":"Learning/The%20Complete%20React%20Guide/functions%20and%20parameters/#omitting-parameter-list-parentheses","title":"Omitting parameter list parentheses","text":"<ul> <li>If your arrow functions take exactly one parameter, you may omit the wrapping parentheses <pre><code>userName =&gt; { ... }\n(userName) =&gt; { ... }\n</code></pre></li> <li>If the function takes no parameters, parentheses must not be omitted.</li> <li>If the function takes more than one parameter, you must also not omit parentheses</li> </ul>","tags":["javascript","function","parameters","return","values","arrow","parentheses","statement","objects"]},{"location":"Learning/The%20Complete%20React%20Guide/functions%20and%20parameters/#omitting-function-body-curly-braces","title":"Omitting function body curly braces","text":"<ul> <li>If your arrow function contains no other logic, but a <code>return</code> statement, you may omit the curly braces and the <code>return</code> keyword <pre><code>number =&gt; {\n    return number * 3;\n}\n\nnumber =&gt; number * 3;\n</code></pre></li> </ul>","tags":["javascript","function","parameters","return","values","arrow","parentheses","statement","objects"]},{"location":"Learning/The%20Complete%20React%20Guide/functions%20and%20parameters/#special-case-just-returning-an-object","title":"Special case: Just returning an object","text":"<ul> <li>If you use the shorter alternative <code>number =&gt; number * 3</code>  and you're attempting to return a JavaScript object, you may end up with invalid code.</li> <li>JavaScript treats the curly braces as <code>function body wrappers</code></li> <li>To tell JavaScript that an object should be created (and returned) instead, the code would need to be adjusted <pre><code>number =&gt; ({ age: number}) // wrapping the object in extra parentheses\n</code></pre></li> <li>By wrapping the object and its curly braces with an extra pair of parentheses, JavaScript understands that the curly braces are not there to define a <code>function body</code> but instead to create an object, now an object then gets returned.</li> </ul>","tags":["javascript","function","parameters","return","values","arrow","parentheses","statement","objects"]},{"location":"Learning/The%20Complete%20React%20Guide/import%20and%20export/","title":"import and export","text":"<ul> <li>Best practice to split code across multiple files, with import and export</li> <li>Adding <code>export</code> will allow variables/code to be available outside of the file it was created</li> <li>We should then <code>import</code> it in the locations where we require to use it</li> </ul> <p><pre><code>export let apiKey = \"apikey\";\n</code></pre> <pre><code>import { apiKey } from \"./utils\";\n</code></pre></p> <ul> <li>Majority of the time in React projects, the extension isn't required and will be omitted</li> <li> <p>This will instead be handled by the build process behind the scenes</p> </li> <li> <p>For the import and export keywords to function, we must ensure to use the type <code>module</code></p> </li> <li> <p>When adding the <code>default</code> keyword, I'm stating that the value provided should be the default item to be important</p> </li> <li> <p>You can only have one <code>default</code> export per file <pre><code>export default \"adada\";\n</code></pre> <pre><code>import apiKey from \"./utils.js\"\n</code></pre></p> </li> <li> <p>If you have named exports, especially using multiple, you can import them by grouping them together within a JavaScript object <pre><code>import * as utils from \"./utils.js\"\n</code></pre></p> </li> <li>The <code>as</code> keyword can also assign an alias <pre><code>import { apiKey as utils } from \"./utils.js\";\n</code></pre></li> </ul>","tags":["import","export","javascript","from","as"]},{"location":"Learning/The%20Complete%20React%20Guide/objects%20and%20classes/","title":"objects and classes","text":"<pre><code>const user = {\n  name: \"Liam\",\n  age: 25,\n}\nconsole.log(user) // \n</code></pre> <ul> <li>Objects can store functions, that are then typically called <code>methods</code></li> <li> <p>If you are within a method, you can access the properties of the object, using the <code>this</code> keyword</p> </li> <li> <p>With the class keyword, you can create a \"blueprint\", that later could be used</p> </li> <li>Class names should start with a capital and then methods can be included in</li> <li>The <code>contructor</code> function can be used to input parameters, then store them in properties of the object</li> </ul> <pre><code>class User {\n  constructor(name, age) {\n    this.name = name;\n    this.age = age;\n  }\n  greet() {\n    console.log(\"Hello\")\n  }\n}\n\nconst user1 = new User(\"Liam\", 25);\n\nconsole.log(user1) // Object { name: \"Liam\", age: 25 }\nuser1.greet() // \"Hello\"\n</code></pre>","tags":["objects","classes","methods","this"]}]}